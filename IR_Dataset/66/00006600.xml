  <page>
    <title>Currying</title>
    <ns>0</ns>
    <id>6600</id>
    <revision>
      <id>938971638</id>
      <parentid>938207459</parentid>
      <timestamp>2020-02-03T14:49:36Z</timestamp>
      <contributor>
        <username>JanusDC</username>
        <id>454750</id>
      </contributor>
      <minor />
      <comment>Link update</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{about|the mathematical technique|the cooking process of this name|Curry|the leather finishing process|Currier|horse grooming|Horse grooming}}
In [[mathematics]] and [[computer science]], '''currying''' is the technique of translating the evaluation of a [[Function (mathematics)|function]] that takes multiple [[Parameter (computer science)|arguments]] into evaluating a sequence of functions, each with a single argument. For example, a function that takes two arguments, one from &lt;math&gt;X&lt;/math&gt; and one from &lt;math&gt;Y&lt;/math&gt;, and produces outputs in &lt;math&gt;Z,&lt;/math&gt; by currying is translated into a function that takes a single argument from &lt;math&gt;X&lt;/math&gt; and produces as outputs ''functions'' from &lt;math&gt;Y&lt;/math&gt; to &lt;math&gt;Z.&lt;/math&gt; Currying is related to, but not the same as, [[partial application]].

Currying is useful in both practical and theoretical settings. In [[functional programming language]]s, and many others, it provides a way of automatically managing how arguments are passed to functions and exceptions. In [[theoretical computer science]], it provides a way to study functions with multiple arguments in simpler theoretical models which provide only one argument. The most general setting for the strict notion of currying and uncurrying is in the [[closed monoidal category|closed monoidal categories]], which underpins a vast generalization of the [[Curry–Howard correspondence]] of proofs and programs to a correspondence with many other structures, including quantum mechanics, cobordisms and string theory.&lt;ref name=&quot;rosetta&quot;/&gt;  It was introduced by [[Gottlob Frege]],&lt;ref&gt;[[Willard Van Orman Quine]], introduction to [[Moses Schönfinkel]]'s &quot;Bausteine der mathematischen Logik&quot;, pp.&amp;nbsp;355&amp;ndash;357, esp. 355. Translated by Stefan Bauer-Mengelberg as &quot;On the building blocks of mathematical logic&quot; in [[Jean van Heijenoort]] (1967), ''A Source Book in Mathematical Logic, 1879&amp;ndash;1931''. Harvard University Press, pp. 355&amp;ndash;66.&lt;/ref&gt; developed by [[Moses Schönfinkel]],&lt;ref&gt;{{cite journal|first=Christopher|last=Strachey|authorlink=Christopher Strachey|title=Fundamental Concepts in Programming Languages|journal=[[Higher-Order and Symbolic Computation]]|volume=13|pages=11–49|year=2000|quote=There is a device originated by Schönfinkel, for reducing operators with several operands to the successive application of single operand operators.|doi=10.1023/A:1010000313106|ref=harv}} (Reprinted lecture notes from 1967.)&lt;/ref&gt;&lt;ref&gt;{{cite journal|first=John C.|last=Reynolds|authorlink=John C. Reynolds|title=Definitional Interpreters for Higher-Order Programming Languages |journal=[[Higher-Order and Symbolic Computation]]|volume=11|issue=4|page=374|doi=10.1023/A:1010027404223|quote=In the last line we have used a trick called Currying (after the logician H. Curry) to solve the problem of introducing a binary operation into a language where all functions must accept a single argument. (The referee comments that although &quot;Currying&quot; is tastier, &quot;Schönfinkeling” might be more accurate.)|year=1998|ref=harv}}&lt;/ref&gt;&lt;ref&gt;Kenneth Slonneger and Barry L. Kurtz. ''Formal Syntax and Semantics of Programming Languages''. 1995. p.&amp;nbsp;144.&lt;/ref&gt;
and further developed by [[Haskell Curry]].&lt;ref&gt;Henk Barendregt, Erik Barendsen, &quot;[http://www.nyu.edu/projects/barker/Lambda/barendregt.94.pdf Introduction to Lambda Calculus]&quot;, March 2000, page&amp;nbsp;8.&lt;/ref&gt;&lt;ref&gt;{{cite book|last=Curry|first=Haskell|author2=Feys, Robert|title=Combinatory logic|publisher=North-Holland Publishing Company |volume=I|edition=2|year=1958|location=Amsterdam, Netherlands}}&lt;/ref&gt;

'''Uncurrying''' is the [[Duality (mathematics)|dual]] transformation to currying, and can be seen as a form of [[defunctionalization]].  It takes a [[function (mathematics)|function]] &lt;math&gt;f&lt;/math&gt; whose return value is another function &lt;math&gt;g&lt;/math&gt;, and yields a new function &lt;math&gt;f'&lt;/math&gt; that takes as parameters the arguments for both &lt;math&gt;f&lt;/math&gt; and &lt;math&gt;g&lt;/math&gt;, and returns, as a result, the application of &lt;math&gt;f&lt;/math&gt; and subsequently, &lt;math&gt;g&lt;/math&gt;, to those arguments.  The process can be iterated.

==Motivation==
Currying provides a way for working with functions that take multiple arguments, and using them in frameworks where functions might take only one argument. For example, some [[#Definition|analytical techniques]] can only be applied to [[function (mathematics)|function]]s with a single argument. Practical functions frequently take more arguments than this. [[Gottlob Frege|Frege]] showed that it was sufficient to provide solutions for the single argument case, as it was possible to transform a function with multiple arguments into a chain of single-argument functions instead. This transformation is the process now known as currying.&lt;ref&gt;{{cite web|url=http://www.cs.nott.ac.uk/~gmh/faq.html#currying|title=Frequently Asked Questions for comp.lang.functional: Currying|author=Graham Hutton|work=nott.ac.uk}}&lt;/ref&gt; All &quot;ordinary&quot; functions that might typically be encountered in [[mathematical analysis]] or in [[computer programming]] can be curried.  However, there are categories in which currying is not possible; the most general categories which allow currying are the [[closed monoidal category|closed monoidal categories]].

Some [[programming language]]s almost always use curried functions to achieve multiple arguments; notable examples are [[ML programming language|ML]] and [[Haskell (programming language)|Haskell]], where in both cases all functions have exactly one argument. This property is inherited from [[lambda calculus]], where multi-argument functions are usually represented in curried form.

Currying is related to, but not the same as [[partial application]]. In practice, the programming technique of [[Closure (computer programming)|closures]] can be used to perform partial application and a kind of currying, by hiding arguments in an environment that travels with the curried function.

=== Illustration ===
Suppose we have a function  &lt;math&gt;f:\mathbb{R}\times\mathbb{R}\to\mathbb{R}&lt;/math&gt; which takes two real arguments and outputs real numbers, and it is defined by &lt;math&gt;f(x,y)=x+y^2&lt;/math&gt;. Currying translates this into a function  &lt;math&gt;h&lt;/math&gt; which takes a single real argument and outputs functions from  &lt;math&gt;\mathbb{R}&lt;/math&gt; to  &lt;math&gt;\mathbb{R}&lt;/math&gt;. In symbols,  &lt;math&gt;h:\mathbb{R}\to\mathbb{R}^\mathbb{R}&lt;/math&gt;, where &lt;math&gt;\mathbb{R}^\mathbb{R}&lt;/math&gt;denotes the set of all functions that take a single real argument and produce real outputs.   For every real number &lt;math&gt;x&lt;/math&gt;, define the function &lt;math&gt;h_x : \mathbb{R}\to\mathbb{R}&lt;/math&gt; by &lt;math&gt;h_x(y)=x+y^2&lt;/math&gt;, and then define the function &lt;math&gt;h:\mathbb{R}\to\mathbb{R}^\mathbb{R}&lt;/math&gt; by &lt;math&gt;h(x)=h_x&lt;/math&gt;. So for instance, &lt;math&gt;h(2)&lt;/math&gt; is the function that sends its real argument &lt;math&gt;y&lt;/math&gt; to the output &lt;math&gt;2+y^2&lt;/math&gt;, or &lt;math&gt;h(2)(y)=h_2(y)=2+y^2&lt;/math&gt;. We see that in general 

:&lt;math&gt;h(x)(y)=x+y^2=f(x,y)&lt;/math&gt;

so that the original function &lt;math&gt;f&lt;/math&gt; and its currying &lt;math&gt;h&lt;/math&gt; convey exactly the same information. In this situation, we also write 

:&lt;math&gt;\text{curry}(f) = h.&lt;/math&gt;

This also works for functions with more than two arguments. If &lt;math&gt;f&lt;/math&gt; were a function of three arguments &lt;math&gt;f(x,y,z)&lt;/math&gt;, its currying &lt;math&gt;h&lt;/math&gt; would have the property

:&lt;math&gt;f(x,y,z)=h(x)(y)(z).&lt;/math&gt;

== History ==
The name &quot;currying&quot;, coined by [[Christopher Strachey]] in 1967{{Citation needed|date=June 2019}}, is a reference to logician [[Haskell Curry]].  The alternative name &quot;Schönfinkelisation&quot; has been proposed as a reference to [[Moses Schönfinkel]].&lt;ref&gt;I. Heim and A. Kratzer (1998). ''Semantics in Generative Grammar''. Blackwell.&lt;/ref&gt;  In the mathematical context, the principle can be traced back to work in 1893 by [[Gottlob Frege|Frege]].

== Definition ==
Currying is most easily understood by starting with an informal definition, which can then be molded to fit many different domains. First, there is some notation to be established.  The notation &lt;math&gt;X \to Y &lt;/math&gt; denotes all [[Function (mathematics)|functions]] from &lt;math&gt;X&lt;/math&gt; to &lt;math&gt;Y&lt;/math&gt;.  If &lt;math&gt;f&lt;/math&gt;  is such a function, we write  &lt;math&gt;f \colon X \to Y &lt;/math&gt;.  Let &lt;math&gt;X \times Y&lt;/math&gt; denote the [[ordered pair]]s of the elements of &lt;math&gt;X&lt;/math&gt; and &lt;math&gt;Y&lt;/math&gt; respectively, that is, the [[Cartesian product]] of &lt;math&gt;X&lt;/math&gt; and &lt;math&gt;Y&lt;/math&gt;. Here, &lt;math&gt;X&lt;/math&gt; and &lt;math&gt;Y&lt;/math&gt; may be sets, or they may be types, or they may be other kinds of objects, as explored below. 

Given a function

:&lt;math&gt;f \colon (X \times Y) \to Z &lt;/math&gt;, 

'''currying''' constructs a new function

:&lt;math&gt;h \colon X \to (Y \to Z) &lt;/math&gt;. 

That is, &lt;math&gt;h &lt;/math&gt; takes an argument from &lt;math&gt;X&lt;/math&gt; and returns a function that maps &lt;math&gt;Y&lt;/math&gt; to &lt;math&gt;Z&lt;/math&gt;. It is defined by

:&lt;math&gt;h(x)(y)=f(x,y)&lt;/math&gt;

for &lt;math&gt;x&lt;/math&gt; from &lt;math&gt;X&lt;/math&gt; and &lt;math&gt;y&lt;/math&gt; from &lt;math&gt;Y&lt;/math&gt;. We then also write

:&lt;math&gt;\text{curry}(f)=h.&lt;/math&gt;

'''Uncurrying''' is the reverse transformation, and is most easily understood in terms of its right adjoint, the [[apply|function &lt;math&gt;\operatorname{apply}.&lt;/math&gt;]]

=== Set theory ===
In [[set theory]], the notation &lt;math&gt;Y^X&lt;/math&gt; is used to denote the [[set (mathematics)|set]] of functions from the set &lt;math&gt;X&lt;/math&gt; to the set &lt;math&gt;Y&lt;/math&gt;. Currying is the [[natural equivalence|natural bijection]] between the set &lt;math&gt;A^{B\times C}&lt;/math&gt; of functions from &lt;math&gt;B\times C&lt;/math&gt; to &lt;math&gt;A&lt;/math&gt;, and the set &lt;math&gt;(A^C)^B&lt;/math&gt; of functions from &lt;math&gt;B&lt;/math&gt; to the set of functions from &lt;math&gt;C&lt;/math&gt; to &lt;math&gt;A&lt;/math&gt;.  In symbols:

:&lt;math&gt;A^{B\times C}\cong (A^C)^B&lt;/math&gt;

Indeed, it is this natural bijection that justifies the [[exponential notation]] for the set of functions. As is the case in all instances of currying, the formula above describes an [[Adjoint functors|adjoint pair of functors]]: for every fixed set &lt;math&gt;C&lt;/math&gt;, the functor &lt;math&gt;B\mapsto B\times C&lt;/math&gt; is left adjoint to the functor &lt;math&gt;A \mapsto A^C&lt;/math&gt;.

In the [[category of sets]], the [[Mathematical object|object]] &lt;math&gt;Y^X&lt;/math&gt; is called the [[exponential object]].

=== Function spaces ===
In the theory of [[function space]]s, such as in [[functional analysis]] or [[homotopy theory]], one is commonly interested in [[continuous function]]s between [[topological space]]s. One writes &lt;math&gt;\text{Hom}(X,Y)&lt;/math&gt; (the [[Hom functor]]) for the set of ''all'' functions from &lt;math&gt;X&lt;/math&gt; to &lt;math&gt;Y&lt;/math&gt;, and uses the notation &lt;math&gt;Y^X&lt;/math&gt; to denote the subset of continuous functions. Here, &lt;math&gt;\text{curry}&lt;/math&gt; is the [[bijection]]

:&lt;math&gt;\text{curry}:\text{Hom}(X\times Y, Z) \to \text{Hom}(X, \text{Hom}(Y,Z)) ,&lt;/math&gt;

while uncurrying is the inverse map. If the set &lt;math&gt;Y^X&lt;/math&gt; of continuous functions from &lt;math&gt;X&lt;/math&gt; to &lt;math&gt;Y&lt;/math&gt; is given the [[compact-open topology]], and if the space &lt;math&gt;Y&lt;/math&gt; is [[locally compact Hausdorff]], then

:&lt;math&gt;\text{curry} : Z^{X\times Y}\to (Z^Y)^X&lt;/math&gt; 

is a [[homeomorphism]].  This is also the case when &lt;math&gt;X&lt;/math&gt;, &lt;math&gt;Y&lt;/math&gt; and &lt;math&gt;Y^X&lt;/math&gt; are [[Compactly generated space|kaonized]],&lt;ref name=&quot;may&quot;&gt;J.P. May, ''[http://www.math.uchicago.edu/~may/CONCISE/ConciseRevised.pdf A Concise Course in Algebraic Topology]'', (1999) Chicago Lectures in Mathematics {{ISBN|0-226-51183-9}}&lt;/ref&gt;{{rp|at=chapter 5}}&lt;ref&gt;{{nlab|id=compactly+generated+topological+space|title=Compactly generated topological space}}&lt;/ref&gt; although there are more cases.&lt;ref&gt;P. I. Booth and J. Tillotson, &quot;[http://msp.org/pjm/1980/88-1/pjm-v88-n1-p03-s.pdf Monoidal closed, Cartesian closed and convenient categories of topological spaces]&quot;, ''Pacific Journal of Mathematics'', '''88''' (1980) pp.33-53.&lt;/ref&gt;&lt;ref&gt;{{nlab| convenient+category+of+topological+spaces | title=Convenient category of topological spaces}}&lt;/ref&gt;

One useful corollary is that a function is continuous [[if and only if]] its curried form is continuous.  Another important result is that the [[apply|application map]], usually called &quot;evaluation&quot; in this context, is continuous (note that [[eval]] is a strictly different concept in computer science.) That is,

&lt;math&gt;\begin{align} &amp;&amp;\text{eval}:Y^X \times X \to Y \\
                     &amp;&amp; (f,x) \mapsto f(x) \end{align}&lt;/math&gt;

is continuous when &lt;math&gt;Y^X&lt;/math&gt; is compact-open and &lt;math&gt;Y&lt;/math&gt; locally compact Hausdorff.&lt;ref name=rotman&gt;Joseph J. Rotman, ''An Introduction to Algebraic Topology'' (1988) Springer-Verlag {{ISBN|0-387-96678-1}} ''(See Chapter 11 for proof.)''&lt;/ref&gt; These two results are central for establishing the continuity of [[homotopy]], i.e. when &lt;math&gt;X&lt;/math&gt; is the unit interval &lt;math&gt;I&lt;/math&gt;, so that &lt;math&gt;Z^{I\times Y} \cong (Z^Y)^I&lt;/math&gt; can the thought of as either a homotopy of two functions from &lt;math&gt;Y&lt;/math&gt; to &lt;math&gt;Z&lt;/math&gt;, or, equivalently, a single (continuous) path in &lt;math&gt;Z^Y&lt;/math&gt;.

=== Algebraic topology ===
In [[algebraic topology]], currying serves as an example of [[Eckmann–Hilton duality]], and, as such, plays an important role in a variety of different settings. For example, [[loop space]] is adjoint to [[reduced suspension]]s; this is commonly written as
:&lt;math&gt;[\Sigma X,Z] \approxeq [X, \Omega Z]&lt;/math&gt;
where &lt;math&gt;[A,B]&lt;/math&gt; is the set of [[homotopy class]]es of maps &lt;math&gt;A \rightarrow B&lt;/math&gt;, and &lt;math&gt;\Sigma A&lt;/math&gt; is the [[Suspension (topology)|suspension]] of ''A'', and &lt;math&gt;\Omega A&lt;/math&gt; is the [[loop space]] of ''A''.  In essence, the suspension &lt;math&gt;\Sigma X&lt;/math&gt; can be seen as the cartesian product of &lt;math&gt;X&lt;/math&gt; with the unit interval, modulo an equivalence relation to turn the interval into a loop.  The curried form then maps the space &lt;math&gt;X&lt;/math&gt; to the space of functions from loops into &lt;math&gt;Z&lt;/math&gt;, that is, from &lt;math&gt;X&lt;/math&gt; into &lt;math&gt;\Omega Z&lt;/math&gt;.&lt;ref name=rotman/&gt; Then &lt;math&gt;\text{curry}&lt;/math&gt; is the [[adjoint functor]] that maps suspensions to loop spaces, and uncurrying is the dual.&lt;ref name=rotman/&gt;

The duality between the [[mapping cone (topology)|mapping cone]] and the mapping fiber ([[cofibration]] and [[fibration]])&lt;ref name=may/&gt;{{rp|at=chapters 6,7}} can be understood as a form of currying, which in turn leads to the duality of the [[long exact sequence|long exact]] and coexact [[Puppe sequence]]s.

In [[homological algebra]], the relationship between currying and uncurrying is known as [[tensor-hom adjunction]].  Here, an interesting twist arises: the [[Hom functor]] and the [[tensor product]] functor might not [[lift (mathematics)|lift]] to an [[exact sequence]]; this leads to the definition of the [[Ext functor]] and the [[Tor functor]].

=== Domain theory ===
In [[order theory]], that is, the theory of [[lattice (order)|lattices]] of [[partially ordered set]]s, &lt;math&gt;\text{curry}&lt;/math&gt; is a [[continuous function]] when the lattice is given the [[Scott topology]].&lt;ref&gt;{{cite book |last1=Barendregt |first1=H.P. |authorlink1=Henk Barendregt |title=The Lambda Calculus |year=1984 |publisher=North-Holland |isbn=978-0-444-87508-2}} ''(See theorems 1.2.13, 1.2.14)''&lt;/ref&gt; Scott-continuous functions were first investigated in the attempt to provide a semantics for [[lambda calculus]] (as ordinary set theory is inadequate to do this).  More generally, Scott-continuous functions are now studied in [[domain theory]], which encompasses the study of [[denotational semantics]] of computer algorithms. Note that the Scott topology is quite different than many common topologies one might encounter in the [[category of topological spaces]]; the Scott topology is typically [[final topology|finer]], and is not [[sober space|sober]].

The notion of continuity makes its appearance in [[homotopy type theory]], where, roughly speaking, two computer programs can be considered to be homotopic, i.e. compute the same results, if they can be &quot;continuously&quot; [[code refactoring|refactored]] from one to the other.

=== Lambda calculi ===
In [[theoretical computer science]], currying provides a way to study functions with multiple arguments in very simple theoretical models, such as the [[lambda calculus]], in which functions only take a single argument. Consider a function &lt;math&gt;f(x,y)&lt;/math&gt; taking two arguments, and having the type &lt;math&gt;(X \times Y)\to Z&lt;/math&gt;, which should be understood to mean that ''x'' must have the type &lt;math&gt;X&lt;/math&gt;, ''y'' must have the type &lt;math&gt;Y&lt;/math&gt;, and the function itself returns the type &lt;math&gt;Z&lt;/math&gt;. The curried form of ''f'' is defined as

:&lt;math&gt;\text{curry}(f) = \lambda x.(\lambda y.(f(x,y)))&lt;/math&gt;

where &lt;math&gt;\lambda&lt;/math&gt; is the abstractor of lambda calculus. Since curry takes, as input, functions with the type &lt;math&gt;(X\times Y)\to Z&lt;/math&gt;, one concludes that the type of curry itself is

:&lt;math&gt;\text{curry}:((X \times Y)\to Z) \to (X \to (Y \to Z))&lt;/math&gt;

The → operator is often considered [[right-associative]], so the curried function type &lt;math&gt;X \to (Y \to Z)&lt;/math&gt; is often written as &lt;math&gt;X \to Y \to Z&lt;/math&gt;.  Conversely,  [[function application]] is considered to be [[Operator associativity|left-associative]], so that &lt;math&gt;f(x, y)&lt;/math&gt; is equivalent to

:&lt;math&gt;((\text{curry}(f) \; x) \;y) = \text{curry}(f) \; x \;y&lt;/math&gt;.

That is, the parenthesis are not required to disambiguate the order of the application.

Curried functions may be used in any [[programming language]] that supports [[closure (computer science)|closure]]s; however, uncurried functions are generally preferred for efficiency reasons, since the overhead of partial application and closure creation can then be avoided for most function calls.

=== Type theory ===
In [[type theory]], the general idea of a [[type system]] in computer science is formalized into a specific algebra of types. For example, when writing &lt;math&gt;f \colon X \to Y &lt;/math&gt;, the intent is that &lt;math&gt;X&lt;/math&gt; and &lt;math&gt;Y&lt;/math&gt; are [[type system|types]], while the arrow &lt;math&gt;\to&lt;/math&gt; is a [[type constructor]], specifically, the [[function type]] or arrow type.  Similarly, the Cartesian product &lt;math&gt;X \times Y&lt;/math&gt; of types is constructed by the [[product type]] constructor &lt;math&gt;\times&lt;/math&gt;.

The type-theoretical approach is expressed in programming languages such as [[ML (programming language)|ML]] and the languages derived from and inspired by it: [[CaML]], [[Haskell (programming language)|Haskell]] and [[F Sharp (programming language)|F#]].

The type-theoretical approach provides a natural complement to the language of [[category theory]], as discussed below. This is because categories, and specifically, [[monoidal categories]], have an [[internal language]], with [[simply-typed lambda calculus]] being the most prominent example of such a language.  It is important in this context, because it can be built from a single type constructor, the arrow type.  Currying then endows the language with a natural product type. The correspondence between objects in categories and types then allows programming languages to be re-interpreted as logics (via [[Curry–Howard correspondence]]), and as other types of mathematical systems, as explored further, below.

=== Logic ===
Under the [[Curry–Howard correspondence]], the existence of currying and uncurrying is equivalent to the logical theorem &lt;math&gt;(A \land B) \to C \Leftrightarrow A \to (B \to C)&lt;/math&gt;, as [[tuple]]s ([[product type]]) corresponds to conjunction in logic, and function type corresponds to implication.

The [[exponential object]] &lt;math&gt;Q^P&lt;/math&gt; in the category of [[Heyting algebra]]s is normally written as [[Material conditional|material implication]] &lt;math&gt;P\to Q&lt;/math&gt;. Distributive Heyting algebras are [[Boolean algebra]]s, and the exponential object has the explicit form &lt;math&gt;\neg P \lor Q&lt;/math&gt;, thus making it clear that the exponential object really is [[Material implication (rule of inference)|material implication]].&lt;ref&gt;Saunders Mac Lane and Ieke Moerdijk, ''Sheaves in Geometry and Logic'' (1992) Springer {{ISBN|0-387-97710-4}} (''See Chapter 1, pp.48-57'')&lt;/ref&gt;

=== Category theory ===
The above notions of currying and uncurrying find their most general, abstract statement in [[category theory]]. Currying is a [[universal property]] of an [[exponential object]], and gives rise to an [[Adjunction (category theory)|adjunction]] in [[cartesian closed category|cartesian closed categories]]. That is, there is a [[Natural transformation|natural]] [[isomorphism]] between the [[morphism (category theory)|morphisms]] from a [[product (category theory)|binary product]] &lt;math&gt;f \colon (X \times Y) \to Z &lt;/math&gt; and the morphisms to an exponential object &lt;math&gt;g \colon X \to Z^Y &lt;/math&gt;.  

This generalizes to a broader result in [[closed monoidal category|closed monoidal categories]]: Currying is the statement that the [[monoidal category|tensor product]] and the [[internal Hom]] are [[adjoint functors]]; that is, for every object &lt;math&gt;B&lt;/math&gt; there is a [[natural transformation|natural isomorphism]]: 

:&lt;math&gt; \mathrm{Hom}(A\otimes B, C) \cong \mathrm{Hom}(A, B\Rightarrow C) .&lt;/math&gt;

Here, ''Hom'' denotes the (external) Hom-functor of all morphisms in the category, while &lt;math&gt;B\Rightarrow C&lt;/math&gt; denotes the internal hom functor in the closed monoidal category.  For the [[category of sets]], the two are the same. When the product is the cartesian product, then the internal hom &lt;math&gt;B\Rightarrow C&lt;/math&gt; becomes the exponential object &lt;math&gt;C^B&lt;/math&gt;.

Currying can break down in one of two ways. One is if a category is not [[closed category|closed]], and thus lacks an internal hom functor (possibly because there is more than one choice for such a functor). Another ways is if it is not [[monoidal category|monoidal]], and thus lacks a product (that is, lacks a way of writing down pairs of objects). Categories that do have both products and internal homs are exactly the closed monoidal categories.

The setting of cartesian closed categories is sufficient for the discussion of [[classical logic]]; the more general setting of closed monoidal categories is suitable for [[quantum computation]].&lt;ref&gt;Samson Abramsky and Bob Coecke, &quot;[https://arxiv.org/abs/quantph/0402130/ A Categorical Semantics for Quantum Protocols].&quot;&lt;/ref&gt;

The difference between these two is that the [[product (mathematics)|product]] for cartesian categories (such as the [[category of sets]], [[complete partial order]]s or [[Heyting algebra]]s) is just the [[Cartesian product]]; it is interpreted as an [[ordered pair]] of items (or a list).  [[Simply typed lambda calculus]] is the [[internal language]] of cartesian closed categories; and it is for this reason that pairs and lists are the primary [[type system|types]] in the [[type theory]] of [[LISP]], [[scheme (programming language)|scheme]] and many [[functional programming language]]s.

By contrast, the product for [[monoidal category|monoidal categories]] (such as [[Hilbert space]] and the [[vector space]]s of [[functional analysis]]) is the [[tensor product]]. The internal language of such categories is [[linear logic]], a form of [[quantum logic]]; the corresponding [[type system]] is the [[linear type system]]. Such categories are suitable for describing [[entangled quantum states]], and, more generally, allow a vast generalization of the [[Curry–Howard correspondence]] to [[quantum mechanics]], to [[cobordism]]s in [[algebraic topology]], and to [[string theory]].&lt;ref name=&quot;rosetta&quot;&gt;John C. Baez and Mike Stay, &quot;[http://math.ucr.edu/home/baez/rosetta/rose3.pdf Physics, Topology, Logic and Computation: A Rosetta Stone]&quot;, (2009) [https://arxiv.org/abs/0903.0340/ ArXiv 0903.0340] in ''New Structures for Physics'', ed. Bob Coecke, ''Lecture Notes in Physics'' vol. '''813''', Springer, Berlin, 2011, pp. 95-174.&lt;/ref&gt;  The [[linear type system]], and [[linear logic]] are useful for describing [[synchronization primitive]]s, such as mutual exclusion locks, and the operation of vending machines.

== Contrast with partial function application ==
{{main article|Partial application}}
Currying and partial function application are often conflated.&lt;ref&gt;{{cite web|url=http://www.uncarved.com/blog/not_currying.mrk|title=The Uncarved Blog: Partial Function Application is not Currying|work=uncarved.com}}&lt;/ref&gt; One of the significant differences between the two is that a call to a partially applied function returns the result right away, not another function down the currying chain; this distinction can be illustrated clearly for functions whose [[arity]] is greater than two.&lt;ref&gt;{{cite web|url=http://slid.es/gsklee/functional-programming-in-5-minutes|title=Functional Programming in 5 Minutes|work=Slides}}&lt;/ref&gt;

Given a function of type &lt;math&gt;f \colon (X \times Y \times Z) \to N &lt;/math&gt;, currying produces &lt;math&gt;\text{curry}(f) \colon X \to (Y \to (Z \to N)) &lt;/math&gt;.  That is, while an evaluation of the first function might be represented as &lt;math&gt;f(1, 2, 3)&lt;/math&gt;, evaluation of the curried function would be represented as &lt;math&gt;f_\text{curried}(1)(2)(3)&lt;/math&gt;, applying each argument in turn to a single-argument function returned by the previous invocation.  Note that after calling &lt;math&gt;f_\text{curried}(1)&lt;/math&gt;, we are left with a function that takes a single argument and returns another function, not a function that takes two arguments.

In contrast, '''partial function application''' refers to the process of fixing a number of arguments to a function, producing another function of smaller arity.  Given the definition of &lt;math&gt;f&lt;/math&gt; above, we might fix (or 'bind') the first argument, producing a function of type &lt;math&gt;\text{partial}(f) \colon (Y \times Z) \to N&lt;/math&gt;.  Evaluation of this function might be represented as &lt;math&gt;f_\text{partial}(2, 3)&lt;/math&gt;.  Note that the result of partial function application in this case is a function that takes two arguments.

Intuitively, partial function application says &quot;if you fix the first [[parameter (computer science)|argument]] of the function, you get a function of the remaining arguments&quot;. For example, if function ''div'' stands for the division operation ''x''/''y'', then ''div'' with the parameter ''x'' fixed at 1 (i.e., ''div'' 1) is another function: the same as the function ''inv'' that returns the multiplicative inverse of its argument, defined by ''inv''(''y'') =&amp;nbsp;1/''y''.

The practical motivation for partial application is that very often the functions obtained by supplying some but not all of the arguments to a function are useful; for example, many languages have a function or operator similar to &lt;code&gt;plus_one&lt;/code&gt;. Partial application makes it easy to define these functions, for example by creating a function that represents the addition operator with 1 bound as its first argument.

Partial application can be seen as evaluating a curried function at a fixed point, e.g. given &lt;math&gt;f \colon (X \times Y \times Z) \to N &lt;/math&gt; and &lt;math&gt;a \in X&lt;/math&gt; then &lt;math&gt;\text{curry}(\text{partial}(f)_a)(y)(z) = \text{curry}(f)(a)(y)(z) &lt;/math&gt; or simply &lt;math&gt;\text{partial}(f)_a = \text{curry}_1(f)(a) &lt;/math&gt; where &lt;math&gt;\text{curry}_1&lt;/math&gt; curries f's first parameter. 

Thus, partial application is reduced to a curried function at a fixed point. Further, a curried function at a fixed point is (trivially), a partial application.  For further evidence, note that, given any function &lt;math&gt;f(x,y)&lt;/math&gt;, a function &lt;math&gt;g(y,x)&lt;/math&gt; may be defined such that &lt;math&gt;g(y,x) = f(x,y)&lt;/math&gt;.  Thus, any partial application may be reduced to a single curry operation.  As such, curry is more suitably defined as an operation which, in many theoretical cases, is often applied recursively, but which is theoretically indistinguishable (when considered as an operation) from a partial application.

So, a partial application can be defined as the objective result of a single application of the curry operator on some ordering of the inputs of some function.

== See also ==
* [[Tensor-hom adjunction]]
* [[Lazy evaluation]]
* [[Closure (computer science)]]
* [[smn theorem|s&lt;sub&gt;mn&lt;/sub&gt; theorem]]
* [[Closed monoidal category]]

== Notes ==
{{Reflist}}

== References ==
* {{cite journal|last=Schönfinkel|first=Moses|title=Über die Bausteine der mathematischen Logik|journal=[[Math. Ann.]]|volume=92|year=1924|pages=305–316|doi=10.1007/BF01448013|issue=3–4|ref=harv}}
* {{Cite journal
  | last = Heim
  | first = Irene
  | author-link = 
  | last2 = Kratzer
  | first2 = Angelika
  | author2-link = 
  | title = Semantics in a Generative Grammar
  | place = Malden
  | publisher = Blackwall Publishers
  | year = 1998
  | volume = 
  | edition = 
  | url =
  | doi = 
  | id = 
  | isbn =
  | ref = harv
  }}

== External links ==
{{Wiktionary|currying}}
*[http://c2.com/cgi/wiki?CurryingSchonfinkelling Currying Schonfinkelling] at the [[Portland Pattern Repository]]
*[http://lambda-the-ultimate.org/node/2266 Currying != Generalized Partial Application!] - post at Lambda-the-Ultimate.org

[[Category:Higher-order functions]]
[[Category:Functional programming]]
[[Category:Lambda calculus]]
[[Category:Articles with example Java code]]</text>
      <sha1>90hlm1xwb51l5ttdglud4eh7fyrwr0j</sha1>
    </revision>
  </page>
