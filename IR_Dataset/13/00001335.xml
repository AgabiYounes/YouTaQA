  <page>
    <title>Associative property</title>
    <ns>0</ns>
    <id>1335</id>
    <revision>
      <id>942898474</id>
      <parentid>935114209</parentid>
      <timestamp>2020-02-27T15:36:44Z</timestamp>
      <contributor>
        <username>AManWithNoPlan</username>
        <id>12416903</id>
      </contributor>
      <comment>URL duplicates doi and ISBN.  publisher duplicates titles</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{About|the associative property in mathematics|associativity in the central processing unit memory cache|CPU cache#Associativity|associativity in programming languages|operator associativity|the meaning of an associated group of people in linguistics|Associativity (linguistics)}}
{{redirect2|Associative|non-associative|associative and non-associative learning|Learning#Types}}
{{short description|Property allowing removing parentheses in a sequence of operations}}
{{More citations needed|date=June 2009}}
{{Transformation rules}}

In [[mathematics]], the '''associative property'''&lt;ref&gt;
{{cite book
|last=Hungerford
|first=Thomas W.
|year=1974 |edition=1st
|title=Algebra
|page=24
|publisher=[[Springer Science+Business Media|Springer]]
|isbn=978-0387905181
|quote=Definition 1.1 (i) a(bc) = (ab)c for all a, b, c in G.}}&lt;/ref&gt; is a property of some [[binary operation]]s. In [[propositional logic]], '''associativity''' is a [[Validity (logic)|valid]] [[rule of replacement]] for [[well-formed formula|expressions]] in [[Formal proof|logical proofs]].

Within an expression containing two or more occurrences in a row of the same associative operator, the order in which the [[Operation (mathematics)|operations]] are performed does not matter as long as the sequence of the [[operand]]s is not changed. That is, (after rewriting the expression with parentheses and in infix notation if necessary) rearranging the [[parentheses]] in such an expression will not change its value. Consider the following equations:

:&lt;math&gt;(2 + 3) + 4 = 2 + (3 + 4) = 9 \,&lt;/math&gt;

:&lt;math&gt;2 \times (3 \times 4) = (2 \times 3) \times 4 = 24 .&lt;/math&gt;

Even though the parentheses were rearranged on each line, the values of the expressions were not altered. Since this holds true when performing addition and multiplication on any [[real number]]s, it can be said that &quot;addition and multiplication of real numbers are associative operations&quot;.

Associativity is not the same as [[commutativity]], which addresses whether or not the order of two [[operand]]s changes the result. For example, the order does not matter in the multiplication of real numbers, that is, {{nowrap|1=''a'' × ''b'' = ''b'' × ''a''}}, so we say that the multiplication of real numbers is a commutative operation.

Associative operations are abundant in mathematics; in fact, many [[algebraic structure]]s (such as [[semigroup (mathematics)|semigroups]] and [[category (mathematics)|categories]]) explicitly require their binary operations to be associative.

However, many important and interesting operations are non-associative; some examples include [[subtraction]], [[exponentiation]], and the [[vector cross product]].  In contrast to the theoretical properties of real numbers, the addition of [[floating point]] numbers in computer science is not associative, and the choice of how to associate an expression can have a significant effect on rounding error.

== Definition ==
[[File:Semigroup_associative.svg|thumbnail|A binary operation ∗ on the set ''S'' is associative when [[Commutative diagram|this diagram commutes]]. That is, when the two paths from ''S''×''S''×''S'' to ''S'' [[Function composition|compose]] to the same function from ''S''×''S''×''S'' to ''S''.]]
Formally, a [[binary operation]] ∗ on a [[Set (mathematics)|set]] ''S'' is called '''associative''' if it satisfies the '''associative law''':

:(''x'' ∗ ''y'') ∗ ''z'' = ''x'' ∗ (''y'' ∗ ''z'') for all ''x'', ''y'', ''z'' in ''S''.

Here, ∗ is used to replace the symbol of the operation, which may be any symbol, and even the absence of symbol ([[wikt:juxtaposition|juxtaposition]]) as for [[multiplication]].

:(''xy'')''z'' = ''x''(''yz'') = ''xyz'' for all ''x'', ''y'', ''z'' in ''S''.

The associative law can also be expressed in functional notation thus: {{nowrap|1=''f''(''f''(''x'', ''y''), ''z'') = ''f''(''x'', ''f''(''y'', ''z''))}}.

==Generalized associative law==
[[Image:Tamari lattice.svg|thumb|250px|In the absence of the associative property, five factors ''a, b, c, d, e'' result in a [[Tamari lattice]] of order four, possibly different products.]]
If a binary operation is associative, repeated application of the operation produces the same result regardless of how valid pairs of parentheses are inserted in the expression.&lt;ref&gt;{{cite book |last=Durbin |first=John R. |title=Modern Algebra: an Introduction |year=1992 |publisher=Wiley |location=New York |isbn=978-0-471-51001-7 |page=78 |url=http://www.wiley.com/WileyCDA/WileyTitle/productCd-EHEP000258.html |edition=3rd |quote=If &lt;math&gt;a_1, a_2, \dots, a_n \,\, (n \ge 2)&lt;/math&gt; are elements of a set with an associative operation, then the product &lt;math&gt;a_1 a_2 \dots a_n&lt;/math&gt; is unambiguous; this is, the same element will be obtained regardless of how parentheses are inserted in the product}}&lt;/ref&gt; This is called the '''generalized associative law'''. For instance, a product of four elements may be written, without changing the order of the factors, in five possible ways:

: &lt;math&gt;((ab)c)d&lt;/math&gt;
: &lt;math&gt;(ab)(cd)&lt;/math&gt;
: &lt;math&gt;(a(bc))d&lt;/math&gt;
: &lt;math&gt;a((bc)d)&lt;/math&gt;
: &lt;math&gt;a(b(cd))&lt;/math&gt;

If the product operation is associative, the generalized associative law says that all these formulas will yield the same result. So unless the formula with omitted parentheses already has a different meaning (see below), the parentheses can be considered unnecessary and &quot;the&quot; product can be written unambiguously as

:&lt;math&gt;abcd.&lt;/math&gt;

As the number of elements increases, the [[Catalan number#Applications in combinatorics|number of possible ways to insert parentheses]] grows quickly, but they remain unnecessary for disambiguation.

An example where this does not work is the [[logical biconditional]] &lt;math&gt;\leftrightarrow&lt;/math&gt;. It is associative, thus A&lt;math&gt;\leftrightarrow&lt;/math&gt;(B&lt;math&gt;\leftrightarrow&lt;/math&gt;C) is equivalent to (A&lt;math&gt;\leftrightarrow&lt;/math&gt;B)&lt;math&gt;\leftrightarrow&lt;/math&gt;C, but A&lt;math&gt;\leftrightarrow&lt;/math&gt;B&lt;math&gt;\leftrightarrow&lt;/math&gt;C most commonly means (A&lt;math&gt;\leftrightarrow&lt;/math&gt;B and B&lt;math&gt;\leftrightarrow&lt;/math&gt;C), which is not equivalent.

==Examples==
[[File:Associativity of binary operations (without question marks).svg|thumb|In associative operations is &lt;math&gt;(x\circ y)\circ z = x\circ(y\circ z)&lt;/math&gt;.]]
[[File:Associativity of real number addition.svg|thumb|The addition of real numbers is associative.]]
Some examples of associative operations include the following.

* The [[string concatenation|concatenation]] of the three strings &lt;code&gt;&quot;hello&quot;&lt;/code&gt;, &lt;code&gt;&quot; &quot;&lt;/code&gt;, &lt;code&gt;&quot;world&quot;&lt;/code&gt; can be computed by concatenating the first two strings (giving &lt;code&gt;&quot;hello &quot;&lt;/code&gt;) and appending the third string (&lt;code&gt;&quot;world&quot;&lt;/code&gt;), or by joining the second and third string (giving &lt;code&gt;&quot; world&quot;&lt;/code&gt;) and concatenating the first string (&lt;code&gt;&quot;hello&quot;&lt;/code&gt;) with the result. The two methods produce the same result; string concatenation is associative (but not commutative).
* In [[arithmetic]], [[addition]] and [[multiplication]] of [[real number]]s are associative; i.e.,
:: &lt;math&gt;
\left.
\begin{matrix}
(x+y)+z=x+(y+z)=x+y+z\quad
\\
(x\,y)z=x(y\,z)=x\,y\,z\qquad\qquad\qquad\quad\ \ \,
\end{matrix}
\right\}
\mbox{for all }x,y,z\in\mathbb{R}.
&lt;/math&gt;
:Because of associativity, the grouping parentheses can be omitted without ambiguity.
* The trivial operation {{math|1=''x'' ∗ ''y'' = ''x''}} (that is, the result is the first argument, no matter what the second argument is) is associative but not commutative. Likewise, the trivial operation {{math|1=''x'' ∘ ''y'' = ''y''}} (that is, the result is the second argument, no matter what the first argument is) is associative but not commutative.
* Addition and multiplication of [[complex number]]s and [[quaternion]]s are associative. Addition of [[octonion]]s is also associative, but multiplication of octonions is non-associative.
* The [[greatest common divisor]] and [[least common multiple]] functions act associatively.
:: &lt;math&gt;

\left.
\begin{matrix}
\operatorname{gcd}(\operatorname{gcd}(x,y),z)=
\operatorname{gcd}(x,\operatorname{gcd}(y,z))=
\operatorname{gcd}(x,y,z)\ \quad
\\
\operatorname{lcm}(\operatorname{lcm}(x,y),z)=
\operatorname{lcm}(x,\operatorname{lcm}(y,z))=
\operatorname{lcm}(x,y,z)\quad
\end{matrix}
\right\}\mbox{ for all }x,y,z\in\mathbb{Z}.
&lt;/math&gt;
* Taking the [[intersection (set theory)|intersection]] or the [[union (set theory)|union]] of [[Set (mathematics)|sets]]:
:: &lt;math&gt;

\left.
\begin{matrix}
(A\cap B)\cap C=A\cap(B\cap C)=A\cap B\cap C\quad
\\
(A\cup B)\cup C=A\cup(B\cup C)=A\cup B\cup C\quad
\end{matrix}
\right\}\mbox{for all sets }A,B,C.
&lt;/math&gt;
* If ''M'' is some set and ''S'' denotes the set of all functions from ''M'' to ''M'', then the operation of [[function composition]] on ''S'' is associative:

:: &lt;math&gt;(f\circ g)\circ h=f\circ(g\circ h)=f\circ g\circ h\qquad\mbox{for all }f,g,h\in S.&lt;/math&gt;
* Slightly more generally, given four sets ''M'', ''N'', ''P'' and ''Q'', with ''h'': ''M'' to ''N'', ''g'': ''N'' to ''P'', and ''f'': ''P'' to ''Q'', then

:: &lt;math&gt;(f\circ g)\circ h=f\circ(g\circ h)=f\circ g\circ h&lt;/math&gt;

: as before. In short, composition of maps is always associative.
* Consider a set with three elements, A, B, and C. The following operation:

:{| class=&quot;wikitable&quot; style=&quot;text-align:center&quot;
|-
! × !! A !! B !! C
|-
! A
| A || A || A
|-
! B
| A || B || C
|-
! C
| A || A || A
|}

:is associative. Thus, for example, A(BC)=(AB)C = A. This operation is not commutative.
* Because [[Matrix (mathematics)|matrices]] represent [[linear map|linear function]]s, and [[matrix multiplication]] represents function composition, one can immediately conclude that matrix multiplication is associative.&lt;ref&gt;{{cite web|url=http://www.khanacademy.org/math/linear-algebra/matrix-transformations/composition-of-transformations/v/matrix-product-associativity|title=Matrix product associativity|publisher=Khan Academy|accessdate=5 June 2016}}&lt;/ref&gt;

== Propositional logic ==

=== Rule of replacement ===
In standard truth-functional propositional logic, ''association'',&lt;ref&gt;{{cite book |last1=Moore |first1=Brooke Noel |last2=Parker |first2=Richard |date=2017 |title=Critical Thinking (12th edition) |location=New York |publisher=McGraw-Hill Education |page=321 |isbn=9781259690877}}&lt;/ref&gt;&lt;ref&gt;{{cite book |last1=Copi |first1=Irving M. |last2=Cohen |first2=Carl |last3=McMahon |first3=Kenneth |date=2014 |title=Introduction to Logic (14th edition) |location=Essex |publisher=Pearson Education |page=387 |isbn=9781292024820}}&lt;/ref&gt; or ''associativity''&lt;ref&gt;{{cite book |last1=Hurley |first1=Patrick J. |last2=Watson |first2=Lori |date=2016 |title=A Concise Introduction to Logic (13th edition) |location=Boston |publisher=Cengage Learning |page=427 |isbn=9781305958098}}&lt;/ref&gt; are two [[Validity (logic)|valid]] [[rule of replacement|rules of replacement]]. The rules allow one to move parentheses in [[well-formed formula|logical expressions]] in [[formal proof|logical proofs]]. The rules (using [[Logical connective#In language|logical connectives]]  notation) are:
:&lt;math&gt;(P \lor (Q \lor R)) \Leftrightarrow ((P \lor Q) \lor R)&lt;/math&gt;
and
:&lt;math&gt;(P \land (Q \land R)) \Leftrightarrow ((P \land Q) \land R),&lt;/math&gt;
where &quot;&lt;math&gt;\Leftrightarrow&lt;/math&gt;&quot; is a [[metalogic]]al [[Symbol (formal)|symbol]] representing &quot;can be replaced in a [[Formal proof|proof]] with.&quot;

=== Truth functional connectives ===
''Associativity'' is a property of some [[logical connective]]s of truth-functional [[propositional logic]]. The following [[logical equivalence]]s demonstrate that associativity is a property of particular connectives. The following are truth-functional [[tautology (logic)|tautologies]].&lt;ref&gt;{{cite web|url=https://math.stackexchange.com/questions/2197480/symbolic-logic-proof-of-associativity |title=Symbolic Logic Proof of Associativity |work=Math.stackexchange.com |date=22 March 2017}}&lt;/ref&gt;

'''Associativity of disjunction''':
:&lt;math&gt;((P \lor Q) \lor R) \leftrightarrow (P \lor (Q \lor R))&lt;/math&gt;
:&lt;math&gt;(P \lor (Q \lor R)) \leftrightarrow ((P \lor Q) \lor R)&lt;/math&gt;
'''Associativity of conjunction''':
:&lt;math&gt;((P \land Q) \land R) \leftrightarrow (P \land (Q \land R))&lt;/math&gt;
:&lt;math&gt;(P \land (Q \land R)) \leftrightarrow ((P \land Q) \land R)&lt;/math&gt;
'''Associativity of equivalence''':
:&lt;math&gt;((P \leftrightarrow Q) \leftrightarrow R) \leftrightarrow (P \leftrightarrow (Q \leftrightarrow R))&lt;/math&gt;
:&lt;math&gt;(P \leftrightarrow (Q \leftrightarrow R)) \leftrightarrow ((P \leftrightarrow Q) \leftrightarrow R)&lt;/math&gt;

Joint denial is an example of a truth functional connective that is ''not'' associative.

== Non-associative operation==
A binary operation &lt;math&gt;*&lt;/math&gt; on a set ''S'' that does not satisfy the associative law is called '''non-associative'''. Symbolically,

:&lt;math&gt;(x*y)*z\ne x*(y*z)\qquad\mbox{for some }x,y,z\in S.&lt;/math&gt;

For such an operation the order of evaluation ''does'' matter. For example:
* [[Subtraction]]
:&lt;math&gt;
(5-3)-2 \, \ne \, 5-(3-2)
&lt;/math&gt;
* [[Division (mathematics)|Division]]
:&lt;math&gt;
(4/2)/2 \, \ne \, 4/(2/2)
&lt;/math&gt;
* [[Exponentiation]]
:&lt;math&gt;
2^{(1^2)} \, \ne \, (2^1)^2
&lt;/math&gt;
Also note that infinite sums are not generally associative, for example:
:&lt;math&gt;
(1+-1)+(1+-1)+(1+-1)+(1+-1)+(1+-1)+(1+-1)+\dots \, = \, 0
&lt;/math&gt;
whereas
:&lt;math&gt;
1+(-1+1)+(-1+1)+(-1+1)+(-1+1)+(-1+1)+(-1+1)+\dots \, = \, 1
&lt;/math&gt;

The study of non-associative structures arises from reasons somewhat different from the mainstream of classical algebra. One area within [[non-associative algebra]] that has grown very large is that of [[Lie algebra]]s. There the associative law is replaced by the [[Jacobi identity]]. Lie algebras abstract the essential nature of [[infinitesimal transformation]]s, and have become ubiquitous in mathematics.

There are other specific types of non-associative structures that have been studied in depth; these tend to come from some specific applications or areas such as [[combinatorial mathematics]]. Other examples are [[quasigroup]], [[quasifield]], [[non-associative ring]], [[non-associative algebra]] and [[commutative non-associative magmas]].

===Nonassociativity of floating point calculation===

In mathematics, addition and multiplication of real numbers is associative.  By contrast, in computer science, the addition and multiplication of [[floating point]] numbers is ''not'' associative, as rounding errors are introduced when dissimilar-sized values are joined together.&lt;ref&gt;Knuth, Donald, [[The Art of Computer Programming]], Volume 3, section 4.2.2&lt;/ref&gt;

To illustrate this, consider a floating point representation with a 4-bit [[significand|mantissa]]:
&lt;br /&gt;(1.000&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;0&lt;/sup&gt; +
1.000&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;0&lt;/sup&gt;) +
1.000&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;4&lt;/sup&gt; =
1.000&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;1&lt;/sup&gt; +
1.000&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;4&lt;/sup&gt; =
1.00{{fontcolor|red|1}}&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;4&lt;/sup&gt;
&lt;br /&gt;1.000&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;0&lt;/sup&gt; +
(1.000&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;0&lt;/sup&gt; +
1.000&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;4&lt;/sup&gt;) =
1.000&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;0&lt;/sup&gt; +
1.00{{fontcolor|red|0}}&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;4&lt;/sup&gt; =
1.00{{fontcolor|red|0}}&lt;sub&gt;2&lt;/sub&gt;×2&lt;sup&gt;4&lt;/sup&gt;

Even though most computers compute with a 24 or 53 bits of mantissa,&lt;ref&gt;{{Cite book |title=IEEE Standard for Floating-Point Arithmetic |author=IEEE Computer Society |date=29 August 2008 |id=IEEE Std 754-2008|doi=10.1109/IEEESTD.2008.4610935 |ref=CITEREFIEEE_7542008 |isbn=978-0-7381-5753-5}}&lt;/ref&gt; this is an important source of rounding error, and approaches such as the [[Kahan summation algorithm]] are ways to minimise the errors. It can be especially problematic in parallel computing.&lt;ref&gt;{{Citation
| last   = Villa
| first   = Oreste
| last2   = Chavarría-mir
| first2   = Daniel
| last3   = Gurumoorthi
| first3   = Vidhya
| last4   = Márquez
| first4   = Andrés
| last5   = Krishnamoorthy
| first5   = Sriram
| date   = 
| title   = Effects of Floating-Point non-Associativity on Numerical Computations on Massively Multithreaded Systems
| url   = http://cass-mt.pnnl.gov/docs/pubs/pnnleffects_of_floating-pointpaper.pdf
| accessdate   = 8 April 2014
| archive-url   = https://web.archive.org/web/20130215171724/http://cass-mt.pnnl.gov/docs/pubs/pnnleffects_of_floating-pointpaper.pdf
| archive-date   = 15 February 2013
| url-status   = dead
}}&lt;/ref&gt;&lt;ref name=&quot;Goldberg_1991&quot;&gt;{{cite journal|last=Goldberg|first=David|author-link=David Goldberg (PARC)|date=March 1991|title=What Every Computer Scientist Should Know About Floating-Point Arithmetic|url=http://perso.ens-lyon.fr/jean-michel.muller/goldberg.pdf|journal=[[ACM Computing Surveys]]|volume=23|issue=1|pages=5–48|doi=10.1145/103162.103163|access-date=20 January 2016}} ([http://www.validlab.com/goldberg/paper.pdf], [http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html])&lt;/ref&gt;

=== Notation for non-associative operations ===
{{main|Operator associativity}}

In general, parentheses must be used to indicate the [[order of operations|order of evaluation]] if a non-associative operation appears more than once in an expression (unless the notation specifies the order in another way, like &lt;math&gt;\dfrac{2}{3/4}&lt;/math&gt;). However, [[mathematician]]s agree on a particular order of evaluation for several common non-associative operations. This is simply a notational convention to avoid parentheses.

A '''left-associative''' operation is a non-associative operation that is conventionally evaluated from left to right, i.e.,
:&lt;math&gt;
\left.
\begin{matrix}
x*y*z=(x*y)*z\qquad\qquad\quad\,
\\
w*x*y*z=((w*x)*y)*z\quad
\\
\mbox{etc.}\qquad\qquad\qquad\qquad\qquad\qquad\ \ \,
\end{matrix}
\right\}
\mbox{for all }w,x,y,z\in S
&lt;/math&gt;
while a '''right-associative''' operation is conventionally evaluated from right to left:
:&lt;math&gt;
\left.
\begin{matrix}
x*y*z=x*(y*z)\qquad\qquad\quad\,
\\
w*x*y*z=w*(x*(y*z))\quad
\\
\mbox{etc.}\qquad\qquad\qquad\qquad\qquad\qquad\ \ \,
\end{matrix}
\right\}
\mbox{for all }w,x,y,z\in S
&lt;/math&gt;
Both left-associative and right-associative operations occur. Left-associative operations include the following:
* Subtraction and division of real numbers:&lt;ref&gt;George Mark Bergman: [https://math.berkeley.edu/~gbergman/misc/numbers/ord_ops.html Order of arithmetic operations]&lt;/ref&gt;&lt;ref&gt;Education Place: [http://eduplace.com/math/mathsteps/4/a/index.html The Order of Operations]&lt;/ref&gt;&lt;ref&gt;[[Khan Academy]]: [https://www.khanacademy.org/math/pre-algebra/pre-algebra-arith-prop/pre-algebra-order-of-operations/v/introduction-to-order-of-operations The Order of Operations], timestamp [https://www.youtube.com/watch?v=ClYdw4d4OmA&amp;t=5m40s 5m40s]&lt;/ref&gt;&lt;ref&gt;Virginia Department of Education: [http://www.doe.virginia.gov/instruction/mathematics/middle/algebra_readiness/curriculum_companion/order-operations.pdf#page=3 Using Order of Operations and Exploring Properties], section 9&lt;/ref&gt;&lt;ref name=&quot;Bronstein_1987&quot;&gt;Bronstein: [[:de:Taschenbuch der Mathematik]], pages 115-120, chapter: 2.4.1.1, {{ISBN|978-3-8085-5673-3}}&lt;/ref&gt;
::&lt;math&gt;x-y-z=(x-y)-z&lt;/math&gt;
::&lt;math&gt;x/y/z=(x/y)/z&lt;/math&gt;
* Function application:
::&lt;math&gt;(f \, x \, y) = ((f \, x) \, y)&lt;/math&gt;
:This notation can be motivated by the [[currying]] isomorphism.

Right-associative operations include the following:
* [[Exponentiation]] of real numbers in superscript notation:
::&lt;math&gt;x^{y^z}=x^{(y^z)}&lt;/math&gt;

:Exponentiation is commonly used with brackets or right-associatively because a repeated left-associative exponentiation operation is of little use. Repeated powers would mostly be rewritten with multiplication:

::&lt;math&gt;(x^y)^z=x^{(yz)}&lt;/math&gt;

:Formatted correctly, the superscript inherently behaves as a set of parentheses; e.g. in the expression &lt;math&gt;2^{x+3}&lt;/math&gt; the addition is performed [[order of operations|before]] the exponentiation despite there being no explicit parentheses &lt;math&gt;2^{(x+3)}&lt;/math&gt; wrapped around it. Thus given an expression such as &lt;math&gt;x^{y^z}&lt;/math&gt;, the full exponent &lt;math&gt;y^z&lt;/math&gt; of the base &lt;math&gt;x&lt;/math&gt; is evaluated first. However, in some contexts, especially in handwriting, the difference between &lt;math&gt;{x^y}^z=(x^y)^z&lt;/math&gt;, &lt;math&gt;x^{yz}=x^{(yz)}&lt;/math&gt; and &lt;math&gt;x^{y^z}=x^{(y^z)}&lt;/math&gt; can be hard to see. In such a case, right-associativity is usually implied.

* [[Function (mathematics)|Function definition]]
::&lt;math&gt;\mathbb{Z} \rarr \mathbb{Z} \rarr \mathbb{Z} = \mathbb{Z} \rarr (\mathbb{Z} \rarr \mathbb{Z})&lt;/math&gt;
::&lt;math&gt;x \mapsto y \mapsto x - y = x \mapsto (y \mapsto x - y)&lt;/math&gt;

:Using right-associative notation for these operations can be motivated by the [[Curry–Howard correspondence]] and by the [[currying]] isomorphism.

Non-associative operations for which no conventional evaluation order is defined include the following.
* Exponentiation of real numbers in infix notation:&lt;ref name=&quot;Codeplea_2016&quot;&gt;[https://codeplea.com/exponentiation-associativity-options Exponentiation Associativity and Standard Math Notation] Codeplea. 23 August 2016. Retrieved 20 September 2016.&lt;/ref&gt;
::&lt;math&gt;(x^\wedge y)^\wedge z\ne x^\wedge(y^\wedge z)&lt;/math&gt;
* [[Knuth's up-arrow notation|Knuth's up-arrow operators]]:
::&lt;math&gt; a \uparrow \uparrow (b \uparrow \uparrow c) \ne (a \uparrow \uparrow b) \uparrow \uparrow c&lt;/math&gt;
::&lt;math&gt; a \uparrow \uparrow \uparrow (b \uparrow \uparrow \uparrow c) \ne (a \uparrow \uparrow \uparrow b) \uparrow \uparrow \uparrow c&lt;/math&gt;
:usw.
* Taking the [[cross product]] of three vectors:
::&lt;math&gt;\vec a \times (\vec b \times \vec c) \neq (\vec a \times \vec b ) \times \vec c \qquad \mbox{ for some } \vec a,\vec b,\vec c \in \mathbb{R}^3&lt;/math&gt;
* Taking the pairwise [[average]] of real numbers:
::&lt;math&gt;{(x+y)/2+z\over2}\ne{x+(y+z)/2\over2} \qquad \mbox{for all }x,y,z\in\mathbb{R} \mbox{ with }x\ne z.&lt;/math&gt;
* Taking the [[complement (set theory)|relative complement]] of sets &lt;math&gt;(A\backslash B)\backslash C&lt;/math&gt; is not the same as &lt;math&gt;A\backslash (B\backslash C)&lt;/math&gt;. (Compare [[material nonimplication]] in logic.)

==Antiassociativity==
A binary operation ∘ on S is an '''antiassociative operation''' if and only if:

:∀x,y,z∈S:(x∘y)∘z≠x∘(y∘z)&lt;ref&gt;[https://proofwiki.org/wiki/Definition:Antiassociative_Operation Definition:Antiassociative Operation]&lt;/ref&gt;

Let (S,∘) be an algebraic structure.

Then (S,∘) is an '''antiassociative structure''' if and only if ∘ is an antiassociative operation.

That is, if and only if:

:∀x,y,z∈S:(x∘y)∘z≠x∘(y∘z)&lt;ref&gt;[https://proofwiki.org/wiki/Definition:Antiassociative_Structure Definition:Antiassociative_Structure]&lt;/ref&gt;

==See also==
{{Wiktionary}}
* [[Light's associativity test]]
* [[Telescoping series]], the use of addition associativity for cancelling terms in an infinite [[series (mathematics)|series]]
* A [[semigroup]] is a set with an associative binary operation.
* [[Commutativity]] and [[distributivity]] are two other frequently discussed properties of binary operations.
* [[Power associativity]], [[alternativity]], [[flexible algebra|flexibility]] and [[N-ary associativity]] are weak forms of associativity.
* [[Moufang loop|Moufang identities]] also provide a weak form of associativity.

==References==
{{reflist}}

[[Category:Abstract algebra]]
[[Category:Binary operations|*Associativity]]
[[Category:Elementary algebra]]
[[Category:Functional analysis]]
[[Category:Rules of inference]]</text>
      <sha1>0vtlo2z70hxo0230bdg1fnrj7pmnmc4</sha1>
    </revision>
  </page>
