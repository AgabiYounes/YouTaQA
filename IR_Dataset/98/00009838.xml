  <page>
    <title>Eiffel (programming language)</title>
    <ns>0</ns>
    <id>9838</id>
    <revision>
      <id>933091299</id>
      <parentid>915057879</parentid>
      <timestamp>2019-12-29T22:59:43Z</timestamp>
      <contributor>
        <ip>109.217.119.236</ip>
      </contributor>
      <comment>Remove the defunct lisaac language from influenced category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{refimprove|date=January 2015}}
{{Infobox programming language
| name = Eiffel
| logo = [[File:Eiffel logo.svg|frameless|Eiffel logo]]
| paradigm = [[Object-oriented programming|Object-oriented]], [[Class-based programming|Class-based]], [[Generic programming|Generic]], [[Concurrent object-oriented programming|Concurrent]]
| year = 1986&lt;ref&gt;{{cite web|title=Eiffel in a Nutshell|url=https://archive.eiffel.com/eiffel/nutshell.html|website=archive.eiffel.com|accessdate=24 August 2017|language=en}}&lt;/ref&gt;
| designer = [[Bertrand Meyer]]
| developer = Eiffel Software
| latest release version = [[EiffelStudio|EiffelStudio 19.05]]&lt;ref&gt;{{cite web|title=Release notes for EiffelStudio 19.05|url=https://www.eiffel.org/doc/eiffelstudio/Release_notes_for_EiffelStudio_19.05|website=Eiffel.org|accessdate=2 August 2019}}&lt;/ref&gt;
| latest release date = {{start date and age|2019|05|21|df=y}}
| typing = [[static typing|static]]
| implementations = [[EiffelStudio]], [[LibertyEiffel]], [[SmartEiffel]], [[Visual Eiffel]], Gobo Eiffel, &quot;The Eiffel Compiler&quot; tecomp
| dialects = 
| influenced_by = [[Ada (programming language)|Ada]], [[Simula]], [[Z notation|Z]]
| influenced = [[Ada (programming language)|Ada 2012]], [[Albatross (programming language)|Albatross]], [[C Sharp (programming language)|C#]], [[D (programming language)|D]], [[Java (programming language)|Java]], [[Racket (programming language)|Racket]], [[Ruby (programming language)|Ruby]],&lt;ref name=&quot;nov2pro&quot;&gt;{{cite book|last=Cooper|first=Peter|title=Beginning Ruby: From Novice to Professional|edition=2nd|series=Beginning from Novice to Professional|year=2009|publisher=APress|location=Berkeley|isbn=978-1-4302-2363-4|page=101|quote=To a lesser extent, Python, LISP, Eiffel, Ada, and C++ have also influenced Ruby.}}&lt;/ref&gt; [[Sather]], [[Scala (programming language)|Scala]]
| programming language = Eiffel
| platform = [[Cross-platform]]
| operating_system = [[FreeBSD]], [[Linux]], [[Mac OS X]], [[OpenBSD]], [[Solaris (operating system)|Solaris]], [[Windows]]
| license = dual and enterprise
| file_ext = &lt;code&gt;.e&lt;/code&gt;
| website = {{URL|https://www.eiffel.org/}}
| caption = 
}}

'''Eiffel''' is an [[Object-oriented programming|object-oriented]] [[programming language]] designed by [[Bertrand Meyer]] (an object-orientation proponent and author of ''[[Object-Oriented Software Construction]]'') and [[Eiffel Software]]. Meyer conceived the language in 1985 with the goal of increasing the reliability of commercial software development;&lt;ref&gt;{{cite web|url=http://www.berenddeboer.net/eiffel/archive/halstenbach_eiffel_history.html|title=Eiffel — the Language|last1= |first1= |date= |website= |publisher= |accessdate=6 July 2016}}&lt;/ref&gt; the first version becoming available in 1986. In 2005, Eiffel became an [[International Organization for Standardization|ISO]]-standardized language.

The design of the language is closely connected with the Eiffel programming method. Both are based on a set of principles, including [[design by contract]], [[command–query separation]], the [[Uniform access principle|uniform-access principle]], the [[Single choice principle|single-choice principle]], the [[Open/closed principle|open–closed principle]], and [[option–operand separation]].

Many concepts initially introduced by Eiffel later found their way into [[Java (programming language)|Java]], [[C Sharp (programming language)|C#]], and other languages.&lt;ref&gt;Formal Specification Languages: Eiffel, Denotational Semantics, Vienna Development Method, Abstract Machine Notation, Petri Net, General Books, 2010&lt;/ref&gt; New language design ideas, particularly through the [[Ecma International|Ecma]]/[[International Organisation for Standardisation|ISO]] standardization process, continue to be incorporated into the Eiffel language.

==Characteristics==
{{Unreferenced section|date=June 2013}}
The key characteristics of the Eiffel language include:

* An object-oriented program structure in which a class serves as the basic unit of decomposition.
* [[Design by contract]] tightly integrated with other language constructs.
* Automatic memory management, typically implemented by [[Garbage collection (computer science)|garbage collection]].
* [[Inheritance (computer science)|Inheritance]], including [[multiple inheritance]], [[wikt:renaming|renaming]], [[Method overriding|redefinition]], &quot;select&quot;, [http://docs.eiffel.com/book/method/et-inheritance#Non-conforming_inheritance non-conforming inheritance], and other mechanisms intended to make inheritance safe.
* Constrained and unconstrained [[generic programming]]
* A uniform [[type system]] handling both value and reference semantics in which all types, including basic types such as INTEGER, are class-based.
* [[Static typing]]
* [[Void safety]], or static protection against calls on null references, through the attached-types mechanism.
* Agents, or objects that wrap computations, closely connected with [[Closure (computer science)|closure]]s and [[lambda calculus]].
* ''Once'' routines, or routines evaluated only once, for object sharing and decentralized initialization.
* Keyword-based syntax in the [[ALGOL]]/[[Pascal (programming language)|Pascal]] tradition but separator-free, insofar as semicolons are optional, with operator syntax available for routines.
* Case insensitivity
* Simple Concurrent Object-Oriented Programming ([[SCOOP (software)|SCOOP]]) facilitates creation of multiple, concurrently active execution vehicles at a level of abstraction above the specific details of these vehicles (e.g. multiple threads without specific mutex management).

==Design goals==
Eiffel emphasizes declarative statements over procedural code and attempts to eliminate the need for bookkeeping instructions.

Eiffel shuns coding tricks or coding techniques intended as [[Optimization (computer science)|optimization]] hints to the compiler. The aim is not only to make the code more readable, but also to allow programmers to concentrate on the important aspects of a program without getting bogged down in implementation details. Eiffel's simplicity is intended to promote simple, extensible, reusable, and reliable answers to computing problems. Compilers for computer programs written in Eiffel provide extensive optimization techniques, such as automatic in-lining, that relieve the programmer of part of the optimization burden.

===Background===
Eiffel was originally developed by [[Eiffel Software]], a company founded by [[Bertrand Meyer]]. ''[[Object-Oriented Software Construction]]'' contains a detailed treatment of the concepts and theory of the object technology that led to Eiffel's design.&lt;ref&gt;''Object-Oriented Software Construction'', Second Edition, by [[Bertrand Meyer]], Prentice Hall, 1997, {{ISBN|0-13-629155-4}}&lt;/ref&gt;

The design goal behind the Eiffel language, libraries, and programming methods is to enable programmers to create reliable, reusable software modules. Eiffel supports [[multiple inheritance]], [[genericity]], [[polymorphism (computer science)|polymorphism]], [[encapsulation (computer science)|encapsulation]], type-safe conversions, and [[parameter covariance]]. Eiffel's most important contribution to [[software engineering]] is [[design by contract]] (DbC), in which [[assertion (computing)|assertions]], [[precondition]]s, [[postcondition]]s, and [[class invariant]]s are employed to help ensure program correctness without sacrificing efficiency.

Eiffel's design is based on object-oriented programming theory, with only minor influence of other paradigms or concern for support of legacy code. Eiffel formally supports [[abstract data type]]s. Under Eiffel's design, a software text should be able to reproduce its design documentation from the text itself, using a formalized implementation of the &quot;Abstract Data Type&quot;.

===Implementations and environments===
[[EiffelStudio]] is an [[integrated development environment]] available under either an [[Open-source license|open source]] or a commercial license. It offers an object-oriented environment for [[software engineering]]. EiffelEnvision is a plug-in for [[Microsoft Visual Studio]] that allows users to edit, compile, and debug Eiffel projects from within the Microsoft Visual Studio IDE. Five other [[Open-source software|open source]] implementations are available: &quot;The Eiffel Compiler&quot; tecomp; Gobo Eiffel; [[SmartEiffel]], the GNU implementation, based on an older version of the language; [[LibertyEiffel]], based on the SmartEiffel compiler; and [[Visual Eiffel]].

Several other programming languages incorporate elements first introduced in Eiffel. [[Sather]], for example, was originally based on Eiffel but has since diverged, and now includes several [[functional programming]] features. The interactive-teaching language Blue, forerunner of [[BlueJ]], is also Eiffel-based. The [[Apple Media Tool]] includes an Eiffel-based Apple Media Language.

===Specifications and standards===
The Eiffel language definition is an international standard of the [[International Organization for Standardization|ISO]]. The standard was developed by [[European Computer Manufacturers Association|ECMA International]], which first approved the standard on 21 June 2005 as Standard ECMA-367, &lt;cite&gt;Eiffel: Analysis, Design and Programming Language&lt;/cite&gt;. In June 2006, ECMA and ISO adopted the second version. In November 2006, ISO first published that version. The standard can be found and used free of charge on the ECMA site.&lt;ref&gt;ECMA International: &lt;cite&gt;Standard ECMA-367 —Eiffel: Analysis, Design and Programming Language 2nd edition (June 2006)&lt;/cite&gt;; available online at [http://www.ecma-international.org/publications/standards/Ecma-367.htm www.ecma-international.org/publications/standards/Ecma-367.htm]&lt;/ref&gt; The ISO version&lt;ref&gt;International Organisation for Standardisation: &lt;cite&gt;Standard ISO/IEC DIS 25436&lt;/cite&gt;, available online at [http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=42924&amp;ICS1=35&amp;ICS2=60&amp;ICS3=]&lt;/ref&gt; is identical in all respects except formatting.

Eiffel Software, &quot;The Eiffel Compiler&quot; tecomp and Eiffel-library-developer Gobo have committed to implementing the standard; Eiffel Software's EiffelStudio 6.1 and &quot;The Eiffel Compiler&quot; tecomp implement some of the major new mechanisms—in particular, inline agents, assigner commands, bracket notation, non-conforming inheritance, and attached types. The [[SmartEiffel]] team has turned away from this standard to create its own version of the language, which they believe to be closer to the original style of Eiffel. Object Tools has not disclosed whether future versions of its Eiffel compiler will comply with the standard. [[LibertyEiffel]] implements a dialect somewhere in between the [[SmartEiffel]] language and the standard.

The standard cites the following, predecessor Eiffel-language specifications:

* Bertrand Meyer: &lt;cite&gt;Eiffel: The Language&lt;/cite&gt;, Prentice Hall, second printing, 1992 (first printing: 1991)
* Bertrand Meyer: &lt;cite&gt;Standard Eiffel&lt;/cite&gt; (revision of preceding entry), ongoing, 1997–present, at Bertrand Meyer's ETL3 page, and
* Bertrand Meyer: &lt;cite&gt;Object-Oriented Software Construction&lt;/cite&gt;, Prentice Hall: first edition, 1988; second edition, 1997.
* Bertrand Meyer: &lt;cite&gt;Touch of Class: Learning to Program Well with Objects and Contracts&lt;/cite&gt;, Springer-Verlag, 2009 {{ISBN|978-3-540-92144-8}} lxiv + 876 pages Full-color printing, numerous color photographs

The current version of the standard from June 2006 contains some inconsistencies (e.g. covariant redefinitions){{Citation needed|date=October 2010}}. The ECMA committee has not yet announced any timeline and direction on how to resolve the inconsistencies.

==Syntax and semantics==

===Overall structure===
An Eiffel &quot;system&quot; or &quot;program&quot; is a collection of ''classes''. Above the level of classes, Eiffel defines ''cluster'', which is essentially a group of classes, and possibly of ''subclusters'' (nested clusters). Clusters are not a syntactic [[language construct]], but rather a standard organizational convention. Typically an Eiffel program will be organized with each class in a separate file, and each cluster in a directory containing class files. In this organization, subclusters are subdirectories. For example, under standard organizational and casing conventions, &lt;code&gt;x.e&lt;/code&gt; might be the name of a file that defines a class called X.

A class contains ''features'', which are similar to &quot;routines&quot;, &quot;members&quot;, &quot;attributes&quot; or &quot;methods&quot; in other object-oriented programming languages. A class also defines its invariants, and contains other properties, such as a &quot;notes&quot; section for documentation and metadata. Eiffel's standard data types, such as &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;STRING&lt;/code&gt; and &lt;code&gt;ARRAY&lt;/code&gt;, are all themselves classes.

Every system must have a class designated as &quot;root&quot;, with one of its creation procedures designated as &quot;root procedure&quot;. Executing a system consists of creating an instance of the root class and executing its root procedure. Generally, doing so creates new objects, calls new features, and so on.

Eiffel has five basic executable instructions: assignment, object creation, routine call, condition, and iteration. Eiffel's control structures are strict in enforcing structured programming: every block has exactly one entry and exactly one exit.

====Scoping====
Unlike many object-oriented languages, but like [[Smalltalk]], Eiffel does not permit any assignment into attributes of objects, except within the features of an object, which is the practical application of the principle of [[information hiding]] or data abstraction, requiring formal interfaces for data mutation. To put it in the language of other object-oriented programming languages, all Eiffel attributes are &quot;protected&quot;, and &quot;setters&quot; are needed for client objects to modify values. An upshot of this is that &quot;setters&quot; can, and normally do, implement the invariants for which Eiffel provides syntax.

While Eiffel does not allow direct access to the features of a class by a client of the class, it does allow for the definition of an &quot;assigner command&quot;, such as:

&lt;syntaxhighlight lang=eiffel&gt; 
   some_attribute: SOME_TYPE assign set_some_attribute
    
   set_some_attribute (v: VALUE_TYPE)
                -- Set value of some_attribute to `v'.
            do
                some_attribute := v
            end
&lt;/syntaxhighlight&gt;

While a slight bow to the overall developer community to allow something looking like direct access (e.g. thereby breaking the Information Hiding Principle), the practice is dangerous as it hides or obfuscates the reality of a &quot;setter&quot; being used. In practice, it is better to redirect the call to a setter rather than implying a direct access to a feature like &lt;code&gt;some_attribute&lt;/code&gt; as in the example code above.

Unlike other languages, having notions of &quot;public&quot;, &quot;protected&quot;, &quot;private&quot; and so on, Eiffel uses an exporting technology to more precisely control the scoping between client and supplier classes. Feature visibility is checked statically at compile-time. For example, (below), the &quot;{NONE}&quot; is similar to &quot;protected&quot; in other languages. Scope applied this way to a &quot;feature set&quot; (e.g. everything below the 'feature' keyword to either the next feature set keyword or the end of the class) can be changed in descendant classes using the &quot;export&quot; keyword.

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
feature {NONE} -- Initialization
	default_create
			-- Initialize a new `zero' decimal instance.
		do
			make_zero
		end
&lt;/syntaxhighlight&gt;

Alternatively, the lack of a {x} export declaration implies {ANY} and is similar to the &quot;public&quot; scoping of other languages.

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
feature -- Constants
&lt;/syntaxhighlight&gt;

Finally, scoping can be selectively and precisely controlled to any class in the Eiffel project universe, such as:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
feature {DECIMAL, DCM_MA_DECIMAL_PARSER, DCM_MA_DECIMAL_HANDLER} -- Access
&lt;/syntaxhighlight&gt;

Here, the compiler will allow only the classes listed between the curly braces to access the features within the feature group (e.g. &lt;tt&gt;DECIMAL, DCM_MA_DECIMAL_PARSER, DCM_MA_DECIMAL_HANDLER&lt;/tt&gt;).

====&quot;Hello, world!&quot;====
A programming language's look and feel is often conveyed using a [[Hello world program|&quot;Hello, world!&quot;]] program. Such a program written in Eiffel might be:
&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
class
    HELLO_WORLD
create
    make
feature
    make
        do
            print (&quot;Hello, world!%N&quot;)
        end
end 
&lt;/syntaxhighlight&gt;

This program contains the class &lt;code&gt;HELLO_WORLD&lt;/code&gt;. The constructor (create routine) for the class, named &lt;code&gt;make&lt;/code&gt;, invokes the &lt;code&gt;print&lt;/code&gt; system library routine to write a &lt;code&gt;&quot;Hello,&lt;/code&gt;&amp;nbsp;&lt;code&gt;world!&quot;&lt;/code&gt; message to the output.

===Design by contract===
{{Main article|Design by contract}}
The concept of Design by Contract is central to Eiffel. The contracts assert what must be true before a routine is executed (precondition) and what must hold to be true after the routine finishes (post-condition). Class Invariant contracts define what assertions must hold true both before and after any feature of a class is accessed (both routines and attributes). Moreover, contracts codify into executable code developer and designers assumptions about the operating environment of the features of a class or the class as a whole by means of the invariant.

The Eiffel compiler is designed to include the feature and class contracts in various levels. EiffelStudio, for example, executes all feature and class contracts during execution in the &quot;Workbench mode.&quot; When an executable is created, the compiler is instructed by way of the project settings file (e.g. ECF file) to either include or exclude any set of contracts. Thus, an executable file can be compiled to either include or exclude any level of contract, thereby bringing along continuous levels of unit and integration testing. Moreover, contracts can be continually and methodically exercised by way of the Auto-Test feature found in EiffelStudio.

The Design by Contract mechanisms are tightly integrated with the language and guide redefinition of features in inheritance:

* Routine precondition: The precondition may only be weakened by inheritance; any call that meets the requirements of the ancestor meets those of the descendant.
* Routine postcondition: The postcondition can only be strengthened by inheritance; any result guaranteed by the ancestor is still provided by the descendant.
* Class invariant: Conditions that must hold true after the object's creation and after any call to an exported class routine. Because the invariant is checked so often, it makes it simultaneously the most expensive and most powerful form of condition or contract.

In addition, the language supports a &quot;check instruction&quot; (a kind of &quot;assert&quot;), loop invariants, and loop variants (which guarantee loop termination).

===Void-safety===
{{Main article|Void safety}}

Void-safety, like static typing, is another facility for improving software quality. Void-safe software is protected from run time errors caused by calls to [[null reference|void references]], and therefore will be more reliable than software in which calls to void targets can occur. The analogy to static typing is a useful one. In fact, void-safe capability could be seen as an extension to the type system, or a step beyond static typing, because the mechanism for ensuring void-safety is integrated into the type system.

The guard against void target calls can be seen by way of the notion of attachment and (by extension) detachment (e.g. detachable keyword). The void-safe facility can be seen in a short re-work of the example code used above:

&lt;syntaxhighlight lang=eiffel&gt;
   some_attribute: detachable SOME_TYPE
    
   use_some_attribute
                -- Set value of some_attribute to `v'.
            do
                if attached some_attribute as l_attribute then
                    do_something (l_attribute)
                end
            end
    
    do_something (a_value: SOME_TYPE)
                -- Do something with `a_value'.
            do
               ... doing something with `a_value' ...
            end
&lt;/syntaxhighlight&gt;

The code example above shows how the compiler can statically address the reliability of whether &lt;code&gt;some_attribute&lt;/code&gt; will be attached or detached at the point it is used. Notably, the &lt;code&gt;attached&lt;/code&gt; keyword allows for an &quot;attachment local&quot; (e.g. &lt;code&gt;l_attribute&lt;/code&gt;), which is scoped to only the block of code enclosed by the if-statement construct. Thus, within this small block of code, the local variable (e.g. &lt;code&gt;l_attribute&lt;/code&gt;) can be statically guaranteed to be non-void (i.e. void-safe).

===Features: commands and queries===
The primary characteristic of a class is that it defines a set of features: as a class represents a set of run-time objects, or &quot;instances&quot;, a feature is an operation on these objects. There are two kinds of features: queries and commands. A query provides information about an instance. A command modifies an instance.

The command-query distinction is important to the Eiffel method. In particular:

* [[Uniform-Access Principle]]: from the point of view of a software client making a call to a class feature, whether a query is an attribute (field value) or a function (computed value) should not make any difference. For example, &lt;code&gt;a_vehicle.speed&lt;/code&gt; could be an attribute accessed on the object &lt;code&gt;a_vehicle&lt;/code&gt;, or it could be computed by a function that divides distance by time. The notation is the same in both cases, so that it is easy to change the class's implementation without affecting client software.
* [[Command-Query Separation|Command-Query Separation Principle]]: Queries must not modify the instance. This is not a language rule but a methodological principle. So in good Eiffel style, one does not find &quot;get&quot; functions that change something and return a result; instead there are commands (procedures) to change objects, and queries to obtain information about the object, resulting from preceding changes.

===Overloading===
Eiffel does not allow argument [[Method overloading|overloading]]. Each feature name within a class always maps to a specific feature within the class. One name, within one class, means one thing. This design choice helps the readability of classes, by avoiding a cause of ambiguity about which routine will be invoked by a call. It also simplifies the language mechanism; in particular, this is what makes Eiffel's multiple inheritance mechanism possible.&lt;ref&gt;Bertrand Meyer: Overloading vs Object Technology, in Journal of Object-Oriented Programming (JOOP), vol. 14, no. 4, October–November 2001, available [http://se.ethz.ch/~meyer/publications/joop/overloading.pdf online]&lt;/ref&gt;

Names can, of course, be reused in different classes. For example, the feature &lt;tt&gt;plus&lt;/tt&gt; (along with its infix [[#Operator and bracket syntax, assigner commands|alias]] &lt;tt&gt;&quot;+&quot;&lt;/tt&gt;) is defined in several classes: &lt;tt&gt;INTEGER&lt;/tt&gt;, &lt;tt&gt;REAL&lt;/tt&gt;, &lt;tt&gt;STRING&lt;/tt&gt;, etc.

===Genericity===
{{See also|Generic programming#Genericity in Eiffel}}

A generic class is a class that varies by type (e.g. LIST [PHONE], a list of phone numbers; ACCOUNT [G-&gt;ACCOUNT_TYPE], allowing for ACCOUNT [SAVINGS] and ACCOUNT [CHECKING], etc.). Classes can be generic, to express that they are parameterized by types. Generic parameters appear in square brackets:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
class LIST [G] ...
&lt;/syntaxhighlight&gt;

G is known as a &quot;formal generic parameter&quot;. (Eiffel reserves &quot;argument&quot; for routines, and uses &quot;parameter&quot; only for generic classes.) With such a declaration G represents within the class an arbitrary type; so a function can return a value of type G, and a routine can take an argument of that type:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
item: G do ... end
put (x: G) do ... end
&lt;/syntaxhighlight&gt;

The &lt;code&gt;LIST [INTEGER]&lt;/code&gt; and &lt;code&gt;LIST [WORD]&lt;/code&gt; are &quot;generic derivations&quot; of this class. Permitted combinations (with &lt;code&gt;n: INTEGER&lt;/code&gt;, &lt;code&gt;w: WORD&lt;/code&gt;, &lt;code&gt;il: LIST [INTEGER]&lt;/code&gt;, &lt;code&gt;wl: LIST [WORD]&lt;/code&gt;) are:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
n := il.item
wl.put (w)
&lt;/syntaxhighlight&gt;

&lt;code&gt;INTEGER&lt;/code&gt; and &lt;code&gt;WORD&lt;/code&gt; are the &quot;actual generic parameters&quot; in these generic derivations.

It is also possible to have 'constrained' formal parameters, for which the actual parameter must inherit from a given class, the &quot;constraint&quot;. For example, in

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   class HASH_TABLE [G, KEY -&gt; HASHABLE]
&lt;/syntaxhighlight&gt;

a derivation &lt;code&gt;HASH_TABLE [INTEGER, STRING]&lt;/code&gt; is valid only if &lt;code&gt;STRING&lt;/code&gt; inherits from &lt;code&gt;HASHABLE&lt;/code&gt; (as it indeed does in typical Eiffel libraries). Within the class, having &lt;code&gt;KEY&lt;/code&gt; constrained by &lt;code&gt;HASHABLE&lt;/code&gt; means that for &lt;code&gt;x: KEY&lt;/code&gt; it is possible to apply to &lt;code&gt;x&lt;/code&gt; all the features of &lt;code&gt;HASHABLE&lt;/code&gt;, as in &lt;code&gt;x.hash_code&lt;/code&gt;.

===Inheritance basics===
To inherit from one or more others, a class will include an &lt;code&gt;inherit&lt;/code&gt; clause at the beginning:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
class C inherit
   A
   B

-- ... Rest of class declaration ...
&lt;/syntaxhighlight&gt;

The class may redefine (override) some or all of the inherited features. This must be explicitly announced at the beginning of the class through a &lt;code&gt;redefine&lt;/code&gt; subclause of the inheritance clause, as in

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
class C inherit
    A
        redefine f, g, h end
    B
        redefine u, v end
&lt;/syntaxhighlight&gt;

See&lt;ref&gt;{{cite web|url=http://archive.eiffel.com/doc/online/eiffel50/intro/language/tutorial-10.html |title=9 INHERITANCE |publisher=Archive.eiffel.com |date=1997-03-23 |accessdate=2013-07-08}}&lt;/ref&gt; for a complete discussion of Eiffel inheritance.

===Deferred classes and features===
Classes may be defined with &lt;code&gt;deferred class&lt;/code&gt; rather than with &lt;code&gt;class&lt;/code&gt; to indicate that the class may not be directly instantiated. Non-instantiatable classes are called [[abstract class]]es in some other object-oriented programming languages. In Eiffel parlance, only an &quot;effective&quot; class can be instantiated (it may be a descendant of a deferred class). A feature can also be deferred by using the &lt;code&gt;deferred&lt;/code&gt; keyword in place of a &lt;code&gt;do&lt;/code&gt; clause. If a class has any deferred features it must be declared as deferred; however, a class with no deferred features may nonetheless itself be deferred.

Deferred classes play some of the same role as interfaces in languages such as Java, though many object-oriented programming theorists believe interfaces are themselves largely an answer to Java's lack of multiple inheritance (which Eiffel has).&lt;ref&gt;{{cite web|url=http://www.artima.com/intv/abcs.html |title=Multiple Inheritance and Interfaces |publisher=Artima.com |date=2002-12-16 |accessdate=2013-07-08}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=https://c2.com/cgi/wiki?MultipleInheritanceIsNotEvil |title=Multiple Inheritance Is Not Evil |publisher=C2.com |date=2007-04-28 |accessdate=2013-07-08}}&lt;/ref&gt;

===Renaming===
A class that inherits from one or more others gets all its features, by default under their original names. It may, however, change their names through &lt;code&gt;rename&lt;/code&gt; clauses. This is required in the case of multiple inheritance if there are name clashes between inherited features; without renaming, the resulting class would violate the no-overloading principle noted above and hence would be invalid.

===Tuples===
Tuples types may be viewed as a simple form of class, providing only attributes and the corresponding &quot;setter&quot; procedure. A typical tuple type reads

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   TUPLE [name: STRING; weight: REAL; date: DATE]
&lt;/syntaxhighlight&gt;

and could be used to describe a simple notion of birth record if a class is not needed. An instance of such a tuple is simply a sequence of values with the given types, given in brackets, such as

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   [&quot;Brigitte&quot;, 3.5, Last_night]
&lt;/syntaxhighlight&gt;

Components of such a tuple can be accessed as if the tuple tags were attributes of a class, for example if &lt;code&gt;t&lt;/code&gt; has been assigned the above tuple then &lt;code&gt;t.weight&lt;/code&gt; has value 3.5.

Thanks to the notion of assigner command (see below), dot notation can also be used to assign components of such a tuple, as in
&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   t.weight := t.weight + 0.5
&lt;/syntaxhighlight&gt;
The tuple tags are optional, so that it is also possible to write a tuple type as &lt;code&gt;TUPLE [STRING, REAL, DATE]&lt;/code&gt;. (In some compilers this is the only form of tuple, as tags were introduced with the ECMA standard.)

The precise specification of e.g. &lt;code&gt;TUPLE [A, B, C]&lt;/code&gt; is that it describes sequences of ''at least'' three elements, the first three being of types &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt; respectively. As a result, &lt;code&gt;TUPLE [A, B, C]&lt;/code&gt; conforms to (may be assigned to) &lt;code&gt;TUPLE [A, B]&lt;/code&gt;, to &lt;code&gt;TUPLE [A]&lt;/code&gt; and to &lt;code&gt;TUPLE&lt;/code&gt; (without parameters), the topmost tuple type to which all tuple types conform.

===Agents===
Eiffel's &quot;agent&quot; mechanism wraps operations into objects. This mechanism can be used for iteration, [[event-driven programming]], and other contexts in which it is useful to pass operations around the program structure. Other programming languages, especially ones that emphasize [[functional programming]], allow a similar pattern using [[continuations]], [[closure (computer science)|closures]], or [[generator (computer science)|generators]]; Eiffel's agents emphasize the language's object-oriented paradigm, and use a syntax and semantics similar to code blocks in [[Smalltalk]] and [[Ruby (programming language)|Ruby]].

For example, to execute the &lt;code&gt;my_action&lt;/code&gt; block for each element of &lt;code&gt;my_list&lt;/code&gt;, one would write:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   my_list.do_all (agent my_action)
&lt;/syntaxhighlight&gt;

To execute &lt;code&gt;my_action&lt;/code&gt; only on elements satisfying &lt;code&gt;my_condition&lt;/code&gt;, a limitation/filter can be added:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   my_list.do_if (agent my_action, agent my_condition)
&lt;/syntaxhighlight&gt;

In these examples, &lt;code&gt;my_action&lt;/code&gt; and &lt;code&gt;my_condition&lt;/code&gt; are routines. Prefixing them with &lt;code&gt;agent&lt;/code&gt; yields an object that represents the corresponding routine with all its properties, in particular the ability to be called with the appropriate arguments. So if &lt;code&gt;a&lt;/code&gt; represents that object (for example because &lt;code&gt;a&lt;/code&gt; is the argument to &lt;code&gt;do_all&lt;/code&gt;), the instruction

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   a.call ([x])
&lt;/syntaxhighlight&gt;

will call the original routine with the argument &lt;code&gt;x&lt;/code&gt;, as if we had directly called the original routine: &lt;code&gt;my_action (x)&lt;/code&gt;. Arguments to &lt;code&gt;call&lt;/code&gt; are passed as a tuple, here &lt;code&gt;[x]&lt;/code&gt;.

It is possible to keep some arguments to an agent '''open''' and make others '''closed'''. The open arguments are passed as arguments to &lt;code&gt;call&lt;/code&gt;: they are provided at the time of ''agent use''. The closed arguments are provided at the time of agent ''definition''. For example, if &lt;code&gt;action2&lt;/code&gt; has two arguments, the iteration

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   my_list.do_all (agent action2 (?, y))
&lt;/syntaxhighlight&gt;

iterates &lt;code&gt;action2 (x, y)&lt;/code&gt; for successive values of &lt;code&gt;x&lt;/code&gt;, where the second argument remains set to &lt;code&gt;y&lt;/code&gt;. The question mark &lt;code&gt;?&lt;/code&gt; indicates an open argument; &lt;code&gt;y&lt;/code&gt; is a closed argument of the agent. Note that the basic syntax &lt;code&gt;agent f&lt;/code&gt; is a shorthand for &lt;code&gt;agent f (?, ?, ...)&lt;/code&gt; with all arguments open. It is also possible to make the ''target'' of an agent open through the notation &lt;code&gt;{T}?&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is the type of the target.

The distinction between open and closed operands (operands = arguments + target) corresponds to the distinction between bound and free variables in [[lambda calculus]]. An agent expression such as &lt;code&gt;action2 (?, y)&lt;/code&gt; with some operands closed and some open corresponds to a version of the original operation ''[[currying|curried]]'' on the closed operands.

The agent mechanism also allows defining an agent without reference to an existing routine (such as &lt;code&gt;my_action&lt;/code&gt;, &lt;code&gt;my_condition&lt;/code&gt;, &lt;code&gt;action2&lt;/code&gt;), through inline agents as in

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
my_list.do_all (agent (s: STRING)
     require
         not_void: s /= Void
     do
         s.append_character (',')
     ensure
         appended: s.count = old s.count + 1
     end)
&lt;/syntaxhighlight&gt;

The inline agent passed here can have all the trappings of a normal routine, including precondition, postcondition, rescue clause (not used here), and a full signature. This avoids defining routines when all that's needed is a computation to be wrapped in an agent. This is useful in particular for contracts, as in an invariant clause that expresses that all elements of a list are positive:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   my_list.for_all (agent (x: INTEGER): BOOLEAN do Result := (x &gt; 0) end)
&lt;/syntaxhighlight&gt;

The current agent mechanism leaves a possibility of run-time type error (if a routine with ''n'' arguments is passed to an agent expecting ''m'' arguments with ''m'' &lt; ''n''). This can be avoided by a run-time check through the precondition &lt;code&gt;valid_arguments&lt;/code&gt; of &lt;code&gt;call&lt;/code&gt;. Several proposals for a purely static correction of this problem are available, including a language change proposal by Ribet et al.&lt;ref&gt;Philippe Ribet, Cyril Adrian, Olivier Zendra, Dominique Colnet: ''Conformance of agents in the Eiffel language'', in ''[[JOT: Journal of Object Technology|Journal of Object Technology]]'', vol. 3, no. 4, April 2004, Special issue: TOOLS USA 2003, pp. 125-143. Available on line from the [http://www.jot.fm/issues/issue_2004_04/article7 JOT article page]&lt;/ref&gt;

===Once routines===
A routine's result can be cached using the &lt;code&gt;once&lt;/code&gt; keyword in place of &lt;code&gt;do&lt;/code&gt;. Non-first calls to a routine require no additional computation or resource allocation, but simply return a previously computed result. A common pattern for &quot;once functions&quot; is to provide shared objects; the first call will create the object, subsequent ones will return the reference to that object. The typical scheme is:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
shared_object: SOME_TYPE
    once
        create Result.make (args)
             -- This creates the object and returns a reference to it through `Result'.
    end
&lt;/syntaxhighlight&gt;

The returned object—&lt;code&gt;Result&lt;/code&gt; in the example—can itself be mutable, but its reference remains the same.

Often &quot;once routines&quot; perform a required initialization: multiple calls to a library can include a call to the initialization procedure, but only the first such call will perform the required actions. Using this pattern initialization can be decentralized, avoiding the need for a special initialization module. &quot;Once routines&quot; are similar in purpose and effect to the [[singleton pattern]] in many programming languages, and to the [[b:Computer Science Design Patterns/Singleton#Python|Borg pattern]] used in Python.

By default, a &quot;once routine&quot; is called ''once per thread''. The semantics can be adjusted to ''once per process'' or ''once per object'' by qualifying it with a &quot;once key&quot;, e.g. &lt;code&gt;once (&quot;PROCESS&quot;)&lt;/code&gt;.

===Conversions===
Eiffel provides a mechanism to allow conversions between various types. The mechanisms coexists with inheritance and complements it. To avoid any confusion between the two mechanisms, the design enforces the following principle:

: '''(Conversion principle) A type may not both conform and convert to another.'''

For example, &lt;code&gt;NEWSPAPER&lt;/code&gt; may conform to &lt;code&gt;PUBLICATION&lt;/code&gt;, but &lt;code&gt;INTEGER&lt;/code&gt; converts to &lt;code&gt;REAL&lt;/code&gt; (and does not inherit from it).

The conversion mechanism simply generalizes the ad hoc conversion rules (such as indeed between &lt;code&gt;INTEGER&lt;/code&gt; and &lt;code&gt;REAL&lt;/code&gt;) that exist in most programming languages, making them applicable to any type as long as the above principle is observed. For example, a &lt;code&gt;DATE&lt;/code&gt; class may be declared to convert to &lt;code&gt;STRING&lt;/code&gt;; this makes it possible to create a string from a date simply through
&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   my_string := my_date
&lt;/syntaxhighlight&gt;
as a shortcut for using an explicit object creation with a conversion procedure:
&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   create my_string.make_from_date (my_date)
&lt;/syntaxhighlight&gt;
To make the first form possible as a synonym for the second, it suffices to list the creation procedure (constructor) &lt;code&gt;make_from_date&lt;/code&gt; in a &lt;code&gt;convert&lt;/code&gt; clause at the beginning of the class.

As another example, if there is such a conversion procedure listed from &lt;code&gt;TUPLE [day: INTEGER; month: STRING; year: INTEGER]&lt;/code&gt;, then one can directly assign a tuple to a date, causing the appropriate conversion, as in
&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
      Bastille_day := [14, &quot;July&quot;, 1789]
&lt;/syntaxhighlight&gt;

===Exception handling===
[[Exception handling]] in Eiffel is based on the principles of design by contract. For example, an exception occurs when a routine's caller fails to satisfy a precondition, or when a routine cannot ensure a promised postcondition. In Eiffel, exception handling is not used for [[control flow]] or to correct data-input mistakes.

An Eiffel exception handler is defined using the &lt;tt&gt;rescue&lt;/tt&gt; keyword. Within the &lt;tt&gt;rescue&lt;/tt&gt; section, the &lt;tt&gt;retry&lt;/tt&gt; keyword executes the routine again. For example, the following routine tracks the number of attempts at executing the routine, and only retries a certain number of times:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
connect_to_server (server: SOCKET)
      -- Connect to a server or give up after 10 attempts.
    require
        server /= Void and then server.address /= Void
    local
        attempts: INTEGER
    do
        server.connect
    ensure
      connected: server.is_connected
    rescue
        if attempts &lt; 10 then
            attempts := attempts + 1
            retry
        end
    end
&lt;/syntaxhighlight&gt;

This example is arguably flawed for anything but the simplest programs, however, because connection failure is to be expected. For most programs a routine name like &lt;tt&gt;attempt_connecting_to_server&lt;/tt&gt; would be better, and the postcondition would not promise a connection, leaving it up to the caller to take appropriate steps if the connection was not opened.

===Concurrency===
A number of networking and threading libraries are available, such as EiffelNet and EiffelThreads. A concurrency model for Eiffel, based on the concepts of design by contract, is [[SCOOP (software)|SCOOP]], or ''Simple Concurrent Object-Oriented Programming'', not yet part of the official language definition but available in [[EiffelStudio]].
CAMEO&lt;ref&gt;{{cite journal|last=Brooke|first=Phillip|author2=Richard Paige|title=Cameo: An Alternative Model of Concurrency for Eiffel|journal=Formal Aspects of Computing|publisher=Springer|year=2008|doi=10.1007/s00165-008-0096-1|volume=21|issue=4|pages=363–391|url=https://hal.archives-ouvertes.fr/hal-00534917/file/PEER_stage2_10.1007%252Fs00165-008-0096-1.pdf}}&lt;/ref&gt; is an (unimplemented) variation of SCOOP for Eiffel.
Concurrency also interacts with exceptions. Asynchronous exceptions can be troublesome (where a routine raises an exception after its caller has itself finished).&lt;ref&gt;{{cite journal|last=Brooke|first=Phillip|author2=Richard Paige|title=Exceptions in Concurrent Eiffel|journal=Journal of Object Technology|volume=6|issue=10|year=2007|url=http://www.jot.fm/issues/issue_2007_11/article4/|pages=111–126|doi=10.5381/jot.2007.6.10.a4}}&lt;/ref&gt;

===Operator and bracket syntax, assigner commands===
Eiffel's view of computation is completely object-oriented in the sense that every operation is relative to an object, the &quot;target&quot;. So for example an addition such as

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
a + b
&lt;/syntaxhighlight&gt;

is conceptually understood as if it were the method call

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
a.plus (b)
&lt;/syntaxhighlight&gt;

with target &lt;code&gt;a&lt;/code&gt;, feature &lt;code&gt;plus&lt;/code&gt; and argument &lt;code&gt;b&lt;/code&gt;.

Of course, the former is the conventional syntax and usually preferred. Operator syntax makes it possible to use either form by declaring the feature (for example in &lt;code&gt;INTEGER&lt;/code&gt;, but this applies to other basic classes and can be used in any other for which such an operator is appropriate):

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
plus alias &quot;+&quot; (other: INTEGER): INTEGER
        -- ... Normal function declaration...
    end
&lt;/syntaxhighlight&gt;

The range of operators that can be used as &quot;alias&quot; is quite broad; they include predefined operators such as &quot;+&quot; but also &quot;free operators&quot; made of non-alphanumeric symbols. This makes it possible to design special infix and prefix notations, for example in mathematics and physics applications.

Every class may in addition have ''one'' function aliased to &quot;[]&quot;, the &quot;bracket&quot; operator, allowing the notation &lt;code&gt;a [i, ...]&lt;/code&gt; as a synonym for &lt;code&gt;a.f (i, ...)&lt;/code&gt; where &lt;code&gt;f&lt;/code&gt; is the chosen function. This is particularly useful for container structures such as arrays, hash tables, lists etc. For example, access to an element of a hash table with string keys can be written

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   number := phone_book [&quot;JILL SMITH&quot;]
&lt;/syntaxhighlight&gt;

&quot;Assigner commands&quot; are a companion mechanism designed in the same spirit of allowing well-established, convenient notation reinterpreted in the framework of object-oriented programming. Assigner commands allow assignment-like syntax to call &quot;setter&quot; procedures. An assignment proper can never be of the form &lt;code&gt;a.x := v&lt;/code&gt; as this violates information hiding; you have to go for a setter command (procedure). For example, the hash table class can have the function and the procedure

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
item alias &quot;[]&quot; (key: STRING): ELEMENT         [3]
      -- The element of key `key'.
      -- (&quot;Getter&quot; query)
    do
        ...
    end

put (e: ELEMENT; key: STRING)
      -- Insert the element `e', associating it with the key `key'.
      -- (&quot;Setter&quot; command)
    do
        ...
    end
&lt;/syntaxhighlight&gt;

Then to insert an element you have to use an explicit call to the setter command:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   [4] phone_book.put (New_person, &quot;JILL SMITH&quot;)
&lt;/syntaxhighlight&gt;

It is possible to write this equivalently as

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   [5] phone_book [&quot;JILL SMITH&quot;] := New_person
&lt;/syntaxhighlight&gt;

(in the same way that &lt;code&gt;phone_book [&quot;JILL SMITH&quot;]&lt;/code&gt; is a synonym for &lt;code&gt;number := phone_book.item (&quot;JILL SMITH&quot;)&lt;/code&gt;), provided the declaration of &lt;code&gt;item&lt;/code&gt; now starts (replacement for [3]) with

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
   item alias &quot;[]&quot; (key: STRING): ELEMENT assign put
&lt;/syntaxhighlight&gt;

This declares &lt;code&gt;put&lt;/code&gt; as the assigner command associated with &lt;code&gt;item&lt;/code&gt; and, combined with the bracket alias, makes [5] legal and equivalent to [4]. (It could also be written, without taking advantage of the bracket, as &lt;code&gt;phone_book.item (&quot;JILL SMITH&quot;) := New_person&lt;/code&gt;.

note: The argument list of a's assigner is constrained to be: (a's return type;all of a's argument list...)

===Lexical and syntax properties===
Eiffel is not case-sensitive. The tokens &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;maKe&lt;/code&gt; and &lt;code&gt;MAKE&lt;/code&gt; all denote the same identifier. See, however, the &quot;style rules&quot; below.

Comments are introduced by &lt;code&gt;--&lt;/code&gt; (two consecutive dashes) and extend to the end of the line.

The semicolon, as instruction separator, is optional. Most of the time the semicolon is just omitted, except to separate multiple instructions on a line. This results in less clutter on the program page.

There is no nesting of feature and class declarations. As a result, the structure of an Eiffel class is simple: some class-level clauses (inheritance, invariant) and a succession of feature declarations, all at the same level.

It is customary to group features into separate &quot;feature clauses&quot; for more readability, with a standard set of basic feature tags appearing in a standard order, for example:

&lt;syntaxhighlight lang=&quot;eiffel&quot;&gt;
class HASH_TABLE [ELEMENT, KEY -&gt; HASHABLE] inherit TABLE [ELEMENT]

    feature -- Initialization
         -- ... Declarations of initialization commands (creation procedures/constructors) ...

    feature -- Access
         -- ... Declarations of non-boolean queries on the object state, e.g. item ...

    feature -- Status report
         -- ... Declarations of boolean queries on the object state, e.g. is_empty ...

    feature -- Element change
         -- ... Declarations of commands that change the structure, e.g. put ...

    -- etc.
end
&lt;/syntaxhighlight&gt;

In contrast to most [[curly bracket programming language]]s, Eiffel makes a clear distinction between expressions and instructions. This is in line with the [[Command-Query Separation]] principle of the Eiffel method.

===Style conventions===
Much of the documentation of Eiffel uses distinctive style conventions, designed to enforce a consistent look-and-feel. Some of these conventions apply to the code format itself, and others to the standard typographic rendering of Eiffel code in formats and publications where these conventions are possible.

While the language is case-insensitive, the style standards prescribe the use of all-capitals for class names (&lt;code&gt;LIST&lt;/code&gt;), all-lower-case for feature names (&lt;code&gt;make&lt;/code&gt;), and initial capitals for constants (&lt;code&gt;Avogadro&lt;/code&gt;). The recommended style also suggests underscore to separate components of a multi-word identifier, as in &lt;code&gt;average_temperature&lt;/code&gt;.

The specification of Eiffel includes guidelines for displaying software texts in typeset formats: keywords in bold, user-defined identifiers and constants are shown in ''&lt;code&gt;italics&lt;/code&gt;'', comments, operators, and punctuation marks in &lt;code&gt;Roman&lt;/code&gt;, with program text in &lt;code&gt;blue&lt;/code&gt; as in the present article to distinguish it from explanatory text. For example, the &quot;Hello, world!&quot; program given above would be rendered as below in Eiffel documentation:

&lt;syntaxhighlight lang=eiffel&gt;
class
    HELLO_WORLD
create
    make
feature
    make
       do
          print (&quot;Hello, world!&quot;)
       end
end
&lt;/syntaxhighlight&gt;

===Interfaces to other tools and languages===
Eiffel is a purely object-oriented language but provides an [[open architecture]] for interfacing with &quot;external&quot; software in any other programming language.

It is possible for example to program machine- and operating-system level operations in [[C (programming language)|C]]. Eiffel provides a straightforward interface to C routines, including support for &quot;inline C&quot; (writing the body of an Eiffel routine in C, typically for short machine-level operations).

Although there is no direct connection between Eiffel and C, many Eiffel [[compiler]]s ([[Visual Eiffel]] is one exception) output C [[source code]] as an [[intermediate language]], to submit to a C compiler, for [[Optimization (computer science)|optimizing]] and [[Porting|portability]]. As such, they are examples of [[transcompiler]]s. The Eiffel Compiler tecomp can execute Eiffel code directly (like an interpreter) without going via an intermediate C code or emit C code which will be passed to a C compiler in order to obtain optimized native code. On .NET, the [[EiffelStudio]] compiler directly generates [[Common Intermediate Language|CIL]] (Common Intermediate Language) code. The [[SmartEiffel]] compiler can also output [[Java bytecode]].

==References==
{{Reflist}}

==External links==
*[http://www.eiffel.com/ Eiffel Software] web site of the company that introduced Eiffel, was Interactive Software Engineering (ISE).

{{Ecma International Standards}}

{{DEFAULTSORT:Eiffel (Programming Language)}}
[[Category:Object-oriented programming languages]]
[[Category:Class-based programming languages]]
[[Category:Object-oriented programming]]
[[Category:Formal specification languages]]
[[Category:High Integrity Programming Language]]
[[Category:Programming languages created in 1986]]</text>
      <sha1>8qh5noln4grhvrzwjgto266y04idypi</sha1>
    </revision>
  </page>
