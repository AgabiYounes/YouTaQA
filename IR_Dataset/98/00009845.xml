  <page>
    <title>JavaScript</title>
    <ns>0</ns>
    <id>9845</id>
    <revision>
      <id>942960474</id>
      <parentid>942583679</parentid>
      <timestamp>2020-02-27T23:20:35Z</timestamp>
      <contributor>
        <ip>2001:44B8:31E5:7F00:CC79:BB16:D115:B3A0</ip>
      </contributor>
      <comment>add Spectre attack</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{distinguish|Java (programming language)|Java (software platform)|JScript|Javanese script}}
{{selfref|For the uses of JavaScript on Wikipedia, see [[Wikipedia:Javascript]].}}
{{pp-pc1|small=yes}}
{{short description|programming language}}
{{Infobox programming language
| name = JavaScript
| logo = &lt;!-- Do not add the unofficial logo, per [[Talk:JavaScript/Archive 5#Why is the unofficial logo present?]] --&gt;
| logo alt = 
| paradigm = [[event-driven programming|event-driven]], [[functional programming|functional]], [[imperative programming|imperative]]
| designer = [[Brendan Eich]] initially, plus other key contributors to the [[ECMAScript]] specification
| typing = [[Dynamic typing|Dynamic]], [[Duck typing|duck]]
| implementations = [[V8 (JavaScript engine)|V8]], [[JavaScriptCore]], [[SpiderMonkey (JavaScript engine)|SpiderMonkey]], [[Chakra (JScript engine)|Chakra]]
| influenced = [[ActionScript]], [[AtScript]], [[CoffeeScript]], [[Dart (programming language)|Dart]], [[JScript .NET]], [[LiveScript]], [[Objective-J]], [[Opa (programming language)|Opa]], [[QML]], [[Raku (programming language)|Raku]], [[TypeScript]]
| license = 
| File extensions = {{flatlist|
* &lt;code&gt;.js&lt;/code&gt;
* &lt;code&gt;.mjs&lt;/code&gt;&lt;ref name=&quot;node.js ECMAScript Modules Specification&quot;&gt;{{cite web|url=https://github.com/nodejs/node-eps/blob/master/002-es-modules.md|title=nodejs/node-eps|website=GitHub}}&lt;/ref&gt;
}}
| File format = 
| website = 
| wikibooks = JavaScript
| year = {{start date and age|1995|12|04}}&lt;ref name=&quot;press_release&quot;&gt;[https://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html Press release announcing JavaScript], &quot;Netscape and Sun announce JavaScript&quot;, PR Newswire, December 4, 1995&lt;/ref&gt;
| latest_release_version = ECMAScript 2019&lt;ref name=&quot;auto&quot;&gt;{{cite web|url=https://www.ecma-international.org/publications/standards/Ecma-262.htm|title=Standard ECMA-262|publisher=Ecma International|date=2017-07-03}}&lt;/ref&gt;
| latest_release_date = {{start date and age|2019|6}}
| latest_preview_version = ECMAScript 2020
| latest_preview_date = 
| influenced_by = [[AWK]]&lt;ref&gt;{{cite web|title=Brendan Eich: An Introduction to JavaScript, JSConf 2010|quote=&quot;Eich: &quot;function&quot;, eight letters, I was influenced by AWK.&quot;|url=https://www.youtube.com/watch?v=1EyRscXrehw|accessdate=November 25, 2019|p=22m}}&lt;/ref&gt;, [[C (programming language)|C]], [[HyperTalk]], [[Java (programming language)|Java]]&lt;ref&gt;{{cite web|title=&quot;Coders at Work: Reflections on the Craft of Programming&quot;|quote=&quot;Eich: The immediate concern at Netscape was it must look like Java.&quot;|url=https://books.google.com/books?id=nneBa6-mWfgC&amp;pg=PA141&amp;lpg=PA141&amp;dq=The+immediate+concern+at+Netscape+was+it+must+look+like+Java.&amp;source=bl&amp;ots=gGvuIcRU5u&amp;sig=OGPam0PUoNHEn9DA3OYrbWpQXX8&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwi53LL6nbvfAhUK7YMKHUX3CgIQ6AEwAHoECAUQAQ#v=onepage&amp;q=The%20immediate%20concern%20at%20Netscape%20was%20it%20must%20look%20like%20Java.&amp;f=false|accessdate=December 25, 2018}}&lt;/ref&gt;, [[Lua (programming language)|Lua]], [[Perl]], [[Python (programming language)|Python]], [[Scheme (programming language)|Scheme]], [[Self (programming language)|Self]] &lt;!--True for first JavaScript? Or only ECMAScript – later JavaScript versions--&gt;
}}
{{JavaScriptSidebar}}

'''JavaScript''' ({{IPAc-en|ˈ|dʒ|ɑː|v|ə|ˌ|s|k|r|ɪ|p|t}}),&lt;ref&gt;{{cite web | url= http://dictionary.reference.com/browse/javascript | title= JavaScript | publisher= William Collins Sons &amp; Co | work= Collins English Dictionary – Complete &amp; Unabridged 2012 Digital Edition | date= 2012 | accessdate= 21 August 2015}}&lt;/ref&gt; often abbreviated as '''JS''', is a [[programming language]] that conforms to the [[ECMAScript]] specification.&lt;ref name=tc39&gt;{{Cite web|url=https://tc39.es/ecma262/#sec-overview|title=ECMAScript® 2020 Language Specification}}&lt;/ref&gt; JavaScript is [[High-level programming language|high-level]], often [[Just-in-time compilation|just-in-time compiled]], and [[Programming paradigm|multi-paradigm]]. It has [[List of programming languages by type#Curly-bracket languages|curly-bracket syntax]], [[dynamic typing]], [[prototype-based programming|prototype-based]] [[object-oriented programming|object-orientation]], and [[first-class function]]s.

Alongside [[HTML]] and [[CSS]], JavaScript is one of the core technologies of the [[World Wide Web]].&lt;ref&gt;{{cite book|last1=Flanagan|first1=David|title=JavaScript - The definitive guide|page=1|edition=6|quote=JavaScript is part of the triad of technologies that all Web developers must learn: HTML to specify the content of web pages, CSS to specify the presentation of web pages and JavaScript to specify the behaviour of web pages.}}&lt;/ref&gt; JavaScript enables interactive [[web page]]s and is an essential part of [[web application]]s. The vast majority of [[website]]s use it for [[client-side]] page behavior,&lt;ref name=deployedstats/&gt; and all major [[web browser]]s have a dedicated [[JavaScript engine]] to execute it.

As a multi-paradigm language, JavaScript supports [[Event-driven programming|event-driven]], [[functional programming|functional]], and [[imperative programming|imperative]] [[programming paradigm|programming style]]s. It has [[application programming interface]]s (APIs) for working with text, dates, [[regular expression]]s, standard [[data structure]]s, and the [[Document Object Model]] (DOM). However, the language itself does not include any [[input/output]] (I/O), such as [[computer network|networking]], [[data storage|storage]], or [[computer graphics|graphics]] facilities, as the host environment (usually a web browser) provides those APIs.

Originally used only in web browsers, JavaScript engines are also now embedded in [[server-side]] website deployments and non-browser applications.

Although there are similarities between JavaScript and [[Java (programming language)|Java]], including language name, [[Syntax (programming languages)|syntax]], and respective [[standard library|standard libraries]], the two languages are distinct and differ greatly in design.

== History ==
=== Creation at Netscape ===
The [[Mosaic (web browser)|Mosaic]] [[web browser]] was released in 1993. As the first browser with a [[graphical user interface]] accessible to non-technical people, it played a prominent role in the rapid growth of the nascent [[World Wide Web]].&lt;ref&gt;{{cite news|url=https://www.bloomberg.com/video/67758394 |title=Bloomberg Game Changers: Marc Andreessen |publisher=Bloomberg |date=17 March 2011 |accessdate=2011-12-07}}&lt;/ref&gt; The lead developers of Mosaic then founded the [[Netscape]] corporation, which released a more polished browser, [[Netscape Navigator]], in 1994. Navigator quickly became the most used browser.&lt;ref&gt;{{Cite web|url=https://www.mwdwebsites.com/nj-web-design-web-browsers.html|title=The Evolution of the Web Browsers|last=Enzer|first=Larry|date=31 August 2018|website=Monmouth Web Developers|access-date=31 August 2018}}&lt;/ref&gt;

During these formative years of the Web, [[web page]]s could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the burgeoning web development scene to remove this limitation, so in 1995, Netscape decided to add a [[scripting language]] to Navigator. They pursued two routes to achieve this: collaborating with [[Sun Microsystems]] to embed the [[Java (programming language)|Java]] [[programming language]], while also hiring [[Brendan Eich]] to embed the [[Scheme (programming language)|Scheme]] language.&lt;ref name=&quot;origin&quot;&gt;{{Cite web|url=http://speakingjs.com/es5/ch04.html|title=Chapter 4. How JavaScript Was Created|website=speakingjs.com}}&lt;/ref&gt;

Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like Scheme or other extant scripting languages.&lt;ref name=&quot;origin&quot;/&gt; Although the new language and its [[Interpreter (computing)|interpreter]] implementation were officially called LiveScript when first shipped as part of a Navigator release in September 1995, the name was changed to JavaScript three months later.&lt;ref name=&quot;origin&quot;/&gt;&lt;ref name=&quot;press_release&quot; /&gt;&lt;ref name=&quot;techvision&quot;&gt;{{cite web | archiveurl=https://web.archive.org/web/20080208124612/http://wp.netscape.com/comprod/columns/techvision/innovators_be.html | archivedate=2008-02-08 | title=TechVision: Innovators of the Net: Brendan Eich and JavaScript | publisher=web.archive.org | url=http://wp.netscape.com/comprod/columns/techvision/innovators_be.html }}&lt;/ref&gt;

The choice of the JavaScript name has caused confusion, sometimes giving the impression that it is a spin-off of Java. Since Java was the hot new programming language at the time, this has been characterized as a marketing ploy by Netscape to give its own new language cachet.&lt;ref&gt;{{Citation|last=Fin JS|title=Brendan Eich - CEO of Brave|date=2016-06-17|url=https://www.youtube.com/watch?v=XOmhtfTrRxc&amp;t=2m5s|accessdate=2018-02-07}}&lt;/ref&gt;

=== Adoption by Microsoft ===

[[Microsoft]] debuted [[Internet Explorer]] in 1995, leading to a [[browser war]] with Netscape. On the JavaScript front, Microsoft [[Reverse engineering#Reverse engineering of software|reverse-engineered]] the Navigator [[Interpreter (computing)|interpreter]] to create its own, called [[JScript]].

JScript was first released in 1996, alongside initial support for [[CSS]] and extensions to [[HTML]]. Each of these implementations was noticeably different from their counterparts in Navigator.&lt;ref name=&quot;O'Reilly-2001&quot;&gt;{{cite web |url=http://archive.oreilly.com/pub/a/javascript/2001/04/06/js_history.html |title=JavaScript, How Did We Get Here? |last=Champeon |first=Steve |date=6 April 2001 |website=oreilly.com |access-date=16 July 2016 |archive-url=https://web.archive.org/web/20160719020828/http://archive.oreilly.com/pub/a/javascript/2001/04/06/js_history.html |archive-date=2016-07-19 |url-status=dead}}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=http://news.microsoft.com/1996/05/29/microsoft-internet-explorer-3-0-beta-now-available/ |title=Microsoft Internet Explorer 3.0 Beta Now Available |publisher=Microsoft |date=29 May 1996 |website=microsoft.com |access-date=16 July 2016}}&lt;/ref&gt; These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of &quot;best viewed in Netscape&quot; and &quot;best viewed in Internet Explorer&quot; logos for several years.&lt;ref name=&quot;O'Reilly-2001&quot; /&gt;&lt;ref&gt;{{cite web |url=http://www.technologizer.com/2010/09/16/the-unwelcome-return-of-best-viewed-with-internet-explorer/ |title=The Unwelcome Return of &quot;Best Viewed with Internet Explorer&quot; |last=McCracken |first=Harry |date=16 September 2010 |website=technologizer.com |access-date=16 July 2016}}&lt;/ref&gt;

=== The rise of JScript ===

In November 1996, [[Netscape]] submitted JavaScript to [[Ecma International|ECMA International]], as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first [[ECMAScript]] language specification in June 1997.

The standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000.

Meanwhile, [[Microsoft]] gained an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer's market share reached 95%.&lt;ref name=&quot;searchenginejournal.com&quot;&gt;{{cite web|url=http://www.searchenginejournal.com/mozilla-firefox-internet-browser-market-share-gains-to-74/1082/ |title=Mozilla Firefox Internet Browser Market Share Gains to 7.4% |publisher=Search Engine Journal |date=24 November 2004 |accessdate=2011-12-07}}&lt;/ref&gt; This meant that [[JScript]] became the de facto standard for [[client-side scripting]] on the Web.

Microsoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on ECMA work. Thus ECMAScript 4 was mothballed.

=== Growth and standardization ===

During the period of [[Internet Explorer]] dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, [[Mozilla]], released the [[Firefox]] browser. Firefox was well-received by many, taking significant market share from Internet Explorer.&lt;ref&gt;{{cite web|url=http://news.bbc.co.uk/1/hi/business/4508897.stm|title=The assault on software giant Microsoft|last=Weber|first=Tim|date=May 9, 2005|publisher=[[BBC News]]|archive-url=https://web.archive.org/web/20170925233936/http://news.bbc.co.uk/2/hi/business/4508897.stm|archive-date=September 25, 2017}}&lt;/ref&gt;

In 2005, Mozilla joined ECMA International, and work started on the [[ECMAScript for XML]] (E4X) standard. This led to Mozilla working jointly with [[Macromedia]] (later acquired by [[Adobe Systems]]), who were implementing E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the [[Tamarin (software)|Tamarin]] implementation as an [[Open-source model|open source]] project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from [[Microsoft]], ECMAScript 4 never reached fruition.

Meanwhile, very important developments were occurring in open source communities not affiliated with ECMA work. In 2005, [[Jesse James Garrett]] released a white paper in which he coined the term [[Ajax (programming)|Ajax]] and described a set of technologies, of which JavaScript was the backbone, to create [[web application]]s where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded by open source libraries and the communities that formed around them. Many new libraries were created, including [[jQuery]], [[Prototype JavaScript Framework|Prototype]], [[Dojo Toolkit]], and [[MooTools]].

[[Google]] debuted its [[Google Chrome|Chrome]] browser in 2008, with the [[V8 (JavaScript engine)|V8]] JavaScript engine that was the first to use [[just-in-time compilation]], significantly improving execution times.&lt;ref&gt;{{cite web|url=http://www.pcgameshardware.com/aid,687738/Big-browser-comparison-test-Internet-Explorer-vs-Firefox-Opera-Safari-and-Chrome-Update-Firefox-35-Final/Practice/|title=Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome|work=PC Games Hardware|publisher=Computec Media AG|accessdate=2010-06-28}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://lifehacker.com/5286869/lifehacker-speed-tests-safari-4-chrome-2-and-more|title=Lifehacker Speed Tests: Safari 4, Chrome 2|publisher=[[Lifehacker]]|accessdate=2010-06-28}}&lt;/ref&gt; Other browser vendors needed to overhaul their engines to compete.&lt;ref&gt;{{cite web |title=Mozilla asks, 'Are we fast yet?' |url=https://www.wired.com/2010/09/mozilla-asks-are-we-fast-yet/ |website=Wired |accessdate=18 January 2019}}&lt;/ref&gt;

In July 2008, these disparate parties came together for a conference in [[Oslo]]. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in December 2009.

===Reaching maturity===

Ambitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of [[ECMAScript]] 6 in 2015.&lt;ref&gt;{{Cite web|url=http://es6-features.org/|title=ECMAScript 6: New Features: Overview and Comparison|website=es6-features.org|access-date=2018-03-19}}&lt;/ref&gt;

From 2016 to 2019, a new version of the ECMAScript standard was published each year, but the scope of changes was much smaller than the 5th or 6th editions. Thus JavaScript can now be considered a mature language that has largely settled down.

The current JavaScript ecosystem has many [[List of JavaScript libraries|libraries and frameworks]], established programming practices, and increased usage of JavaScript outside of web browsers. Plus, with the rise of [[single-page application]]s and other JavaScript-heavy websites, a number of [[source-to-source compiler|transpilers]] have been created to aid the development process.&lt;ref name=&quot;transpilers&quot;/&gt;

== Trademark ==
&quot;JavaScript&quot; is a [[trademark]] of [[Oracle Corporation]] in the United States.&lt;ref&gt;{{cite web | title=USPTO Copyright entry #75026640|url=http://tarr.uspto.gov/servlet/tarr?regser=serial&amp;entry=75026640|publisher=USPTO}}&lt;/ref&gt; It is used under license for technology invented and implemented by Netscape Communications and other parties.&lt;ref&gt;{{cite web | title=Sun Trademarks|url=http://www.sun.com/suntrademarks/|publisher=Sun Microsystems|accessdate=2007-11-08|archiveurl=https://web.archive.org/web/20100528154600/http://www.sun.com/suntrademarks/|archivedate=28 May 2010}}&lt;/ref&gt;

== Website client-side usage ==

JavaScript is the dominant [[client-side]] scripting language of the Web, with 95% of [[website]]s using it for this purpose.&lt;ref name=deployedstats&gt;{{cite web|url=https://w3techs.com/technologies/details/cp-javascript/|title=Usage statistics of JavaScript as client-side programming language on websites|website=w3techs.com}}&lt;/ref&gt; Scripts are embedded in or included from [[HTML]] documents and interact with the DOM. All major [[web browser]]s have a built-in [[JavaScript engine]] that executes the code on the user's device.

=== Examples of scripted behavior ===
{{See also|Dynamic HTML|Ajax (programming)}}

* Loading new page content without reloading the page. For example, [[social media]] websites use Ajax so that users can post new messages without leaving the page.
* Animation of page elements, such as fading them in and out, resizing, and moving them.
* Interactive content, such as games and video.
* [[Data validation|Validating]] input values of a [[Form (HTML)|web form]] to make sure that they are acceptable before being submitted to the server.
* Transmitting information about the user's behavior for [[Web analytics|analytics]], [[ad tracking]], and [[personalization]].

=== Libraries and frameworks ===

The majority of websites use a third-party [[JavaScript library]] or [[web application framework]] as part of their client-side page scripting.&lt;ref name=&quot;lib_usage&quot;&gt;{{cite web|url=https://w3techs.com/technologies/overview/javascript_library|title=Usage statistics of JavaScript libraries for websites|website=w3techs.com}}&lt;/ref&gt;

[[jQuery]] is the most popular library, used by over 70% of websites.&lt;ref name=&quot;lib_usage&quot;/&gt;

The [[Angular (web framework)|Angular]] framework was created by [[Google]] for its web services; it is now [[Open-source software|open source]] and used by other websites. Likewise, [[Facebook]] created the [[React (web framework)|React]] framework for its website and later released it as open source; other sites, including [[Twitter]], now use it.

== Other usage ==

The use of JavaScript has expanded beyond its [[web browser]] roots. [[JavaScript engine]]s are now embedded in a variety of other software systems, both for [[server-side]] website deployments and non-browser [[application software|applications]].

Initial attempts at promoting server-side JavaScript usage were [[Netscape Enterprise Server]] and [[Microsoft]]'s [[Internet Information Services]],&lt;ref&gt;{{cite web |url=http://docs.oracle.com/cd/E19957-01/816-6411-10/contents.htm |title=Server-Side JavaScript Guide |publisher=Netscape Communications Corporation |date=11 December 1998 |website=oracle.com |accessdate=2016-07-16|author=Netscape Communications Corporation}}&lt;/ref&gt;&lt;ref&gt;{{cite web|last1=Clinick|first1=Andrew|title=Introducing JScript .NET|url=https://msdn.microsoft.com/en-us/library/ms974588.aspx|website=Microsoft Developer Network|publisher=Microsoft|accessdate=10 April 2018|date=July 14, 2000|quote=[S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the server—particularly in Active Server Pages (ASP)}}&lt;/ref&gt; but they were small niches.&lt;ref name=&quot;2009server&quot;/&gt; Server-side usage eventually started to grow in the late-2000s, with the creation of [[Node.js]] and [[List of server-side JavaScript implementations|other approaches]].&lt;ref name=&quot;2009server&quot;&gt;{{cite web |url=http://readwrite.com/2009/12/17/server-side_javascript_back_with_a_vengeance/ |title=Server-Side JavaScript, Back with a Vengeance |date=17 December 2009 |website=readwrite.com |accessdate=2016-07-16|author=Mahemoff, Michael}}&lt;/ref&gt;

[[Electron (software framework)|Electron]], [[Apache Cordova|Cordova]], and other [[software framework]]s have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include [[Adobe Acrobat]] support for scripting [[PDF]] documents&lt;ref&gt;{{cite web | url=https://www.adobe.com/devnet/acrobat/javascript.html | accessdate=2009-08-18 | title= JavaScript for Acrobat}}&lt;/ref&gt; and [[GNOME Shell]] extensions written in JavaScript.&lt;ref&gt;{{cite web| url = http://treitter.livejournal.com/14871.html| title = Answering the question: &quot;How do I develop an app for GNOME?&quot;}}&lt;/ref&gt;

== Features ==
The following features are common to all conforming ECMAScript implementations, unless explicitly specified otherwise.

=== Imperative and structured ===
JavaScript supports much of the [[structured programming]] syntax from [[C (computer language)|C]] (e.g., &lt;code&gt;if&lt;/code&gt; statements, &lt;code&gt;while&lt;/code&gt; loops, &lt;code&gt;switch&lt;/code&gt; statements, &lt;code&gt;do while&lt;/code&gt; loops, etc.). One partial exception is [[scope (computer science)|scoping]]: JavaScript originally had only [[function scoping]] with &lt;code&gt;var&lt;/code&gt;. ECMAScript 2015 added keywords &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; for block scoping, meaning JavaScript now has both function and block scoping. Like C, JavaScript makes a distinction between [[Expression (computer science)|expressions]] and [[Statement (computer science)|statements]]. One syntactic difference from C is [[Defensive semicolon|automatic semicolon insertion]], which allows the semicolons that would normally terminate statements to be omitted.&lt;ref name=&quot;Flanagan2006&quot;&gt;{{cite book|last=Flanagan|first=David |title=JavaScript: The Definitive Guide: The Definitive Guide|url=https://books.google.com/books?id=2weL0iAfrEMC|date=17 August 2006|publisher=&quot;O'Reilly Media, Inc.&quot;|isbn=978-0-596-55447-7|page=16|ref=harv}}&lt;/ref&gt;

=== Weakly typed ===
JavaScript is [[Strong and weak typing|weakly typed]], which means certain types are implicitly cast depending on the operation used. JavaScript has received criticism for the way it implements these conversions as well as the inconsistency between them. For example, when adding a number to a string, the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction.
{| class=&quot;wikitable&quot;
|+JavaScript includes many other type quirks that have been subject to criticism:&lt;ref&gt;{{Cite web|url=https://www.destroyallsoftware.com/talks/wat|title=Wat|website=www.destroyallsoftware.com|access-date=2019-10-28}}&lt;/ref&gt;&lt;ref&gt;{{Cite web|url=https://dev.to/mkrl/javascript-quirks-in-one-image-from-the-internet-52m7|title=JavaScript quirks in one image from the Internet|website=The DEV Community|language=en|access-date=2019-10-28}}&lt;/ref&gt;
!left operand
!operator
!right operand
!result
|-
|&lt;code&gt;[]&lt;/code&gt;(empty array)
|&lt;code&gt;+&lt;/code&gt;
|&lt;code&gt;[]&lt;/code&gt;(empty array)
|&lt;code&gt;&quot;&quot;&lt;/code&gt;(empty string)
|-
|&lt;code&gt;{}&lt;/code&gt; (empty object)
|&lt;code&gt;+&lt;/code&gt;
|&lt;code&gt;[]&lt;/code&gt; (empty array)
|&lt;code&gt;0&lt;/code&gt; (number)
|-
|&lt;code&gt;[]&lt;/code&gt; (empty array)
|&lt;code&gt;+&lt;/code&gt;
|&lt;code&gt;{}&lt;/code&gt; (empty object)
|&lt;code&gt;{}&lt;/code&gt; (empty object)
|-
|&lt;code&gt;false&lt;/code&gt; (boolean)
|&lt;code&gt;+&lt;/code&gt;
|&lt;code&gt;[]&lt;/code&gt; (empty array)
|&lt;code&gt;&quot;false&quot;&lt;/code&gt; (string)
|-
|&lt;code&gt;&quot;123&quot;&lt;/code&gt;(string)
|&lt;code&gt;+&lt;/code&gt;
|&lt;code&gt;1&lt;/code&gt; (number)
|&lt;code&gt;&quot;1231&quot;&lt;/code&gt; (string)
|-
|&lt;code&gt;&quot;123&quot;&lt;/code&gt; (string)
|&lt;code&gt;-&lt;/code&gt;
|&lt;code&gt;1&lt;/code&gt; (number)
|&lt;code&gt;122&lt;/code&gt; (number)
|}

=== Dynamic ===
; Typing:JavaScript is [[dynamic typing|dynamically typed]] like most other [[scripting language]]s. A [[type system|type]] is associated with a [[value (computer science)|value]] rather than an expression. For example, a [[Variable (programming)|variable]] initially bound to a number may be reassigned to a [[string (computer science)|string]].&lt;ref&gt;{{cite web|url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures|title=JavaScript data types and data structures - JavaScript &amp;#124; MDN|date=2017-02-16|website=Developer.mozilla.org|accessdate=2017-02-24}}&lt;/ref&gt;  JavaScript supports various ways to test the type of objects, including [[duck typing]].{{Sfn|Flanagan|2006|pp=176–178}}
; Run-time evaluation: JavaScript includes an &lt;code&gt;[[eval]]&lt;/code&gt; function that can execute statements provided as strings at run-time.

=== Object-orientation (prototype-based) ===
Prototypal inheritance in JavaScript is described by [[Douglas Crockford]] as: 
{{Quote
|You make prototype objects, and then … make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don't need classes to make lots of similar objects… Objects inherit from objects. What could be more object oriented than that?&lt;ref&gt;{{cite web|last=Crockford|first=Douglas|title=Prototypal Inheritance in JavaScript|url=http://javascript.crockford.com/prototypal.html|accessdate=20 August 2013}}&lt;/ref&gt;
}}

In JavaScript, an [[Object (computer science)|object]] is an [[associative array]], augmented with a prototype (see below); each string key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (&lt;code&gt;obj.x&amp;nbsp;=&amp;nbsp;10&lt;/code&gt;) and bracket notation (&lt;code&gt;obj['x']&amp;nbsp;=&amp;nbsp;10&lt;/code&gt;). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a &lt;code&gt;for...in&lt;/code&gt; loop.

JavaScript has a small number of built-in objects, including &lt;code&gt;Function&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt;.

; Prototypes: JavaScript uses [[prototype-based programming|prototypes]] where many other object-oriented languages use [[Class (computer science)|classes]] for [[Inheritance (computer science)|inheritance]].&lt;ref&gt;{{cite web | title=Inheritance and the prototype chain|url=https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Inheritance_and_the_prototype_chain|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}&lt;/ref&gt; It is possible to simulate many class-based features with prototypes in JavaScript.&lt;ref&gt;{{cite book|last=Herman|first=David|title=Effective JavaScript|year=2013|publisher=Addison-Wesley|isbn=978-0-321-81218-6|page=83}}&lt;/ref&gt;
; Functions as object constructors: Functions double as object constructors, along with their typical role. Prefixing a function call with ''new'' will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the &lt;code&gt;Object&lt;/code&gt; prototype).&lt;ref&gt;{{cite book|last=Haverbeke|first=Marijn|title=Eloquent JavaScript|year=2011|publisher=No Starch Press|isbn=978-1-59327-282-1|pages=95–97}}&lt;/ref&gt; ECMAScript 5 offers the &lt;code&gt;Object.create&lt;/code&gt; method, allowing explicit creation of an instance without automatically inheriting from the &lt;code&gt;Object&lt;/code&gt; prototype (older environments can assign the prototype to &lt;code&gt;null&lt;/code&gt;).&lt;ref&gt;{{cite web | last=Katz|first=Yehuda|title=Understanding &quot;Prototypes&quot; in JavaScript|url=http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/|accessdate=6 April 2013}}&lt;/ref&gt; The constructor's &lt;code&gt;prototype&lt;/code&gt; property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Object&lt;/code&gt;, also have prototypes that can be modified. While it is possible to modify the &lt;code&gt;Object&lt;/code&gt; prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the &lt;code&gt;Object&lt;/code&gt; prototype, and they may not expect the prototype to be modified.&lt;ref&gt;{{cite book|last=Herman|first=David|title=Effective JavaScript|year=2013|publisher=Addison-Wesley|isbn=978-0-321-81218-6|pages=125–127}}&lt;/ref&gt;
; Functions as methods&lt;!--not sure where to classify this under--&gt;: Unlike many object-oriented languages, there is no distinction between a function definition and a [[method (computer science)|method]] definition. Rather, the distinction occurs during function calling; when a function is called as a method of an object, the function's local ''this'' keyword is bound to that object for that invocation.

=== Functional ===
A [[Subroutine|function]] is [[first-class function|first-class]]; a function is considered to be an object. As such, a function may have properties and methods, such as &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.bind()&lt;/code&gt;.&lt;ref&gt;{{cite web | url=https://es5.github.com/#x15.3.4-toc | title=Properties of the Function Object | publisher=Es5.github.com | accessdate=2013-05-26}}&lt;/ref&gt; A ''nested'' function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a [[Closure (computer programming)|lexical closure]]: The [[Scope (programming)#Lexical scoping vs. dynamic scoping|lexical scope]] of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.{{Sfn|Flanagan|2006|p=141}} JavaScript also supports [[anonymous function]]s.

=== Delegative ===
JavaScript supports implicit and explicit [[Delegation (object-oriented programming)|delegation]].

; Functions as roles (Traits and Mixins): JavaScript natively supports various function-based implementations of [[Role-oriented programming|Role]]&lt;ref&gt;[http://peterseliger.blogspot.de/2014/04/the-many-talents-of-javascript.html#the-many-talents-of-javascript-for-generalizing-role-oriented-programming-approaches-like-traits-and-mixins The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins], Peterseliger.blogpsot.de, April 11, 2014.&lt;/ref&gt; patterns like [[Traits (computer science)|Traits]]&lt;ref&gt;[http://soft.vub.ac.be/~tvcutsem/traitsjs/ Traits for JavaScript], 2010.&lt;/ref&gt;&lt;ref&gt;{{cite web|url=https://cocktailjs.github.io/ |title=Home &amp;#124; CocktailJS |website=Cocktailjs.github.io |date= |accessdate=2017-02-24}}&lt;/ref&gt; and [[Mixin]]s.&lt;ref&gt;Angus Croll, [http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/ A fresh look at JavaScript Mixins], published May 31, 2011.&lt;/ref&gt; Such a function defines additional behavior by at least one method bound to the &lt;code&gt;this&lt;/code&gt; keyword within its &lt;code&gt;function&lt;/code&gt; body. A Role then has to be delegated explicitly via &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; to objects that need to feature additional behavior that is not shared via the prototype chain.
; Object composition and inheritance: Whereas explicit function-based delegation does cover [[Object composition|composition]] in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus [[Inheritance (computer science)|inheritance]] in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions.

=== Miscellaneous ===
; Run-time environment:JavaScript typically relies on a run-time environment (e.g., a [[Web browser]]) to provide objects and methods by which scripts can interact with the environment (e.g., a webpage [[Document Object Model|DOM]]). It also relies on the run-time environment to provide the ability to include/import scripts (e.g., [[HTML]] &lt;code&gt;&lt;nowiki&gt;&lt;script&gt;&lt;/nowiki&gt;&lt;/code&gt; elements). This is not a language feature per se, but it is common in most JavaScript implementations. JavaScript processes [[Message (computer science)|messages]] from a [[Queue (abstract data type)|queue]] one at a time. JavaScript calls a [[Subroutine|function]] associated with each new message, creating a [[call stack]] frame with the function's [[Parameter (computer programming)|arguments]] and [[local variable]]s. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the [[event loop]], described as &quot;run to completion&quot; because each message is fully processed before the next message is considered. However, the language's [[Concurrency (computer science)|concurrency model]] describes the event loop as [[Asynchronous I/O|non-blocking]]: program [[input/output]] is performed using [[Event (computing)|events]] and [[Callback (computer programming)|callback functions]]. This means, for instance, that JavaScript can process a mouse click while waiting for a database query to return information.&lt;ref&gt;{{cite web|url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop|title=Concurrency model and Event Loop|website=Mozilla Developer Network|accessdate=2015-08-28}}&lt;/ref&gt;

; Variadic functions&lt;!--note: this is not a functional programming feature--&gt;: An indefinite number of parameters can be passed to a function. The function can access them through [[formal parameter]]s and also through the local &lt;code&gt;arguments&lt;/code&gt; object. [[Variadic functions]] can also be created by using the &lt;code&gt;[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind bind]&lt;/code&gt; method.

; Array and object literals: Like many scripting languages, arrays and objects ([[associative arrays]] in other languages) can each be created with a succinct shortcut syntax. In fact, these [[Object literal|literals]] form the basis of the [[JSON]] data format.

; Regular expressions: JavaScript also supports [[regular expression]]s in a manner similar to [[Perl]], which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.&lt;ref&gt;{{cite book | last=Haverbeke | first=Marijn | title=Eloquent JavaScript | year=2011 | publisher=No Starch Press|isbn=978-1-59327-282-1|pages=139–149}}&lt;/ref&gt;

; Promises: JavaScript also supports promises which is its way of handling asynchronous operations. There's a built-in Promise object that gives access to a lot of functionalities for handling promises and defines how they should be handled.  It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future. Recently, combinator methods were introduced in the JavaScript specification which allows developers to combine multiple JavaScript promises and do operations on the basis of different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any.

=== Vendor-specific extensions ===
Historically, some [[JavaScript engine]]s supported these non-standard features:
* conditional &lt;code&gt;catch&lt;/code&gt; clauses (like Java)
* [[List comprehension|array comprehensions]] and generator expressions (like Python)
* concise function expressions (&lt;code&gt;function(args) expr&lt;/code&gt;; this experimental syntax predated arrow functions)
* [[ECMAScript for XML]] (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21&lt;ref&gt;{{cite web | title=E4X – Archive of obsolete content &amp;#124; MDN|url=https://developer.mozilla.org/en-US/docs/Archive/Web/E4X|website=Mozilla Developer Network|publisher=Mozilla Foundation|date=Feb 14, 2014|accessdate=13 July 2014}}&lt;/ref&gt;)

== Syntax ==
{{Main|JavaScript syntax}}

=== Simple examples ===
[[Variable (computer science)|Variables]] in JavaScript can be defined using either the &lt;code&gt;var&lt;/code&gt;,&lt;ref&gt;{{cite web | url=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/var | title=var – JavaScript – MDN | publisher=The [[Mozilla Developer Network]] | accessdate=22 December 2012}}&lt;/ref&gt; &lt;code&gt;let&lt;/code&gt;&lt;ref name=&quot;moz_let&quot;&gt;{{cite web |title=let |url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let |website=MDN web docs |publisher=Mozilla |accessdate=27 June 2018 |ref=moz_let}}&lt;/ref&gt; or &lt;code&gt;const&lt;/code&gt;&lt;ref name=&quot;moz_const&quot;&gt;{{cite web |title=const |url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const |website=MDN web docs |publisher=Mozilla |accessdate=27 June 2018 |ref=moz_const}}&lt;/ref&gt; keywords.

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
// Declares a function-scoped variable named `x`, and implicitly assigns the
// special value `undefined` to it.
var x;

// More explicit version of the above.
var x2 = undefined;

// Declares a block-scoped variable named `y`, and implicitly sets it to
// `undefined`. The `let` keyword was introduced in ECMAScript 2015.
let y;

// More explicit version of the above.
let y2 = undefined;

// Declares a block-scoped, un-reassign-able variable named `z`, and sets it to
// `undefined`. The `const` keyword was also introduced in ECMAScript 2015, and
// must be explicitly assigned to.
const z = undefined;

// Declares a variable named `myNumber`, and assigns a number literal (the value
// `2`) to it.
let myNumber = 2;

// Reassigns `myNumber`, setting it to a string literal (the value `&quot;foo&quot;`).
// JavaScript is a dynamically-typed language, so this is legal.
myNumber = &quot;foo&quot;;
&lt;/syntaxhighlight&gt;

Note the [[Comment (computer programming)|comments]] in the example above, all of which were preceded with two [[Slash (punctuation)|forward slashes]].

There is no built-in [[Input/output]] functionality in JavaScript; the run-time environment provides that. The ECMAScript specification in edition 5.1 mentions:&lt;ref&gt;{{cite web | url=http://www.ecma-international.org/ecma-262/5.1/#sec-4 | title=ECMAScript Language Specification – ECMA-262 Edition 5.1|publisher=[[Ecma International]] | accessdate=22 December 2012}}&lt;/ref&gt;
&lt;blockquote&gt;indeed, there are no provisions in this specification for input of external data or output of computed results.&lt;/blockquote&gt;
However, most runtime environments have a &lt;code&gt;console&lt;/code&gt; object&lt;ref&gt;{{cite web | title=console|url=https://developer.mozilla.org/en-US/docs/DOM/console|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}&lt;/ref&gt; that can be used to print output. Here is a minimalist [[Hello World program]] in JavaScript:

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
console.log(&quot;Hello World!&quot;);
&lt;/syntaxhighlight&gt;

A simple [[Recursion (computer science)|recursive]] function:

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
function factorial(n) {
    if (n === 0)
        return 1; // 0! = 1

    return n * factorial(n - 1);
}

factorial(3); // returns 6
&lt;/syntaxhighlight&gt;

An [[anonymous function]] (or lambda):

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
function counter() {
    let count = 0;

    return function() {
        return ++count;
    };
}

let closure = counter();
closure(); // returns 1
closure(); // returns 2
closure(); // returns 3
&lt;/syntaxhighlight&gt;

This example shows that, in JavaScript, [[Closure (computer programming)|function closures]] capture their non-local variables by reference.

Arrow functions were first introduced in [[ECMAScript#6th Edition - ECMAScript 2015|6th Edition - ECMAScript 2015]] . They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous in nature; a variable is needed to refer to them in order to invoke them after their creation.

Example of arrow function:

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
// Arrow functions let us omit the `function` keyword. Here `long_example`
// points to an anonymous function value.
const long_example = (input1, input2) =&gt; {
    console.log(&quot;Hello, World!&quot;);
    const output = input1 + input2;

    return output;
};

// Arrow functions also let us automatically return the expression to the right
// of the arrow (here `input + 5`), omitting braces and the `return` keyword.
const short_example = input =&gt; input + 5;

long_example(2, 3); // Prints &quot;Hello, World!&quot; and returns 5.
short_example(2);  // Returns 7.
&lt;/syntaxhighlight&gt;

In JavaScript, [[Object (computer science)|objects]] are created in the same way as functions; this is known as a [[function object]].

Object example:
&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
function Ball(r) {
    this.radius = r; // the radius variable is local to the ball object
    this.area = pi * r ** 2;
    this.show = function(){ // objects can contain functions
        drawCircle(r); // references a circle drawing function
    }
}

let myBall = new Ball(5); // creates a new instance of the ball object with radius 5
myBall.show(); // this instance of the ball object has the show function performed on it
&lt;/syntaxhighlight&gt;

[[Variadic function]] demonstration (&lt;code&gt;arguments&lt;/code&gt; is a special [[variable (programming)|variable]]):&lt;ref&gt;{{cite web | title=arguments|url=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}&lt;/ref&gt;

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
function sum() {
    let x = 0;

    for (let i = 0; i &lt; arguments.length; ++i)
        x += arguments[i];

    return x;
}

sum(1, 2); // returns 3
sum(1, 2, 3); // returns 6
&lt;/syntaxhighlight&gt;

[[Immediately-invoked function expression]]s are often used to create modules; before ECMAScript 2015 there was no built-in module construct in the language. Modules allow gathering properties and methods in a namespace and making some of them private:

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
let counter = (function() {
    let i = 0; // private property

    return {   // public methods
        get: function() {
            alert(i);
        },
        set: function(value) {
            i = value;
        },
        increment: function() {
            alert(++i);
        }
    };
})(); // module

counter.get();      // shows 0
counter.set(6);
counter.increment(); // shows 7
counter.increment(); // shows 8
&lt;/syntaxhighlight&gt;

Exporting and Importing modules in javascript&lt;ref&gt;{{cite web |title=Import &amp; Export Modules in javascript |url=https://learnersbucket.com/tutorials/es6/es6-modules/ |website=Learnersbucket.com |accessdate=23 April 2019}}&lt;/ref&gt;

Export example:
&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
/* mymodule.js */
// This function remains private, as it is not exported
let sum = (a, b) =&gt; {
    return a + b;
}

// Export variables
export let name = 'Alice';
export let age = 23;

// Export named functions
export function add(num1, num2){
    return num1 + num2;
}

// Export class
export class Multiplication {
    constructor(num1, num2) {
        this.num1 = num1;
        this.num2 = num2;
    }

    add() {
        return sum(this.num1, this.num2);
    }
}
&lt;/syntaxhighlight&gt;

Import example:
&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
// Import one property
import { add } from './mymodule.js';

console.log(add(1, 2)); // 3

// Import multiple properties
import { name, age } from './mymodule.js';
console.log(name, age);
//&gt; &quot;Alice&quot;, 23

// Import all properties from a module
import * from './module.js'
console.log(name, age);
//&gt; &quot;Alice&quot;, 23
console.log(add(1,2));
//&gt; 3
&lt;/syntaxhighlight&gt;

=== More advanced example ===
This sample code displays various JavaScript features.
&lt;!-- Don't try to standardize any styling in this example—its purpose is to showcase language syntax, not provide some standard role model. --&gt;

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
/* Finds the lowest common multiple (LCM) of two numbers */
function LCMCalculator(x, y) { // constructor function
    let checkInt = function(x) { // inner function
        if (x % 1 !== 0)
            throw new TypeError(x + &quot;is not an integer&quot;); // var a =  mouseX

        return x;
    };
    
    this.a = checkInt(x)
    //   semicolons   ^^^^  are optional, a newline is enough
    this.b = checkInt(y);
}
// The prototype of object instances created by a constructor is
// that constructor's &quot;prototype&quot; property.
LCMCalculator.prototype = { // object literal
    constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately
    gcd: function() { // method that calculates the greatest common divisor
        // Euclidean algorithm:
        let a = Math.abs(this.a), b = Math.abs(this.b), t;

        if (a &lt; b) {
            // swap variables
            // t = b; b = a; a = t;
            [a, b] = [b, a]; // swap using destructuring assignment (ES6)
        }

        while (b !== 0) {
            t = b;
            b = a % b;
            a = t;
        }

        // Only need to calculate GCD once, so &quot;redefine&quot; this method.
        // (Actually not redefinition—it's defined on the instance itself,
        // so that this.gcd refers to this &quot;redefinition&quot; instead of LCMCalculator.prototype.gcd.
        // Note that this leads to a wrong result if the LCMCalculator object members &quot;a&quot; and/or &quot;b&quot; are altered afterwards.)
        // Also, 'gcd' === &quot;gcd&quot;, this['gcd'] === this.gcd
        this['gcd'] = function() {
            return a;
        };

        return a;
    },

    // Object property names can be specified by strings delimited by double (&quot;) or single (') quotes.
    lcm: function() {
        // Variable names do not collide with object properties, e.g., |lcm| is not |this.lcm|.
        // not using |this.a*this.b| to avoid FP precision issues
        let lcm = this.a / this.gcd() * this.b;
        
        // Only need to calculate lcm once, so &quot;redefine&quot; this method.
        this.lcm = function() {
            return lcm;
        };

        return lcm;
    },

    toString: function() {
        return &quot;LCMCalculator: a = &quot; + this.a + &quot;, b = &quot; + this.b;
    }
};

// Define generic output function; this implementation only works for Web browsers
function output(x) {
    document.body.appendChild(document.createTextNode(x));
    document.body.appendChild(document.createElement('br'));
}

// Note: Array's map() and forEach() are defined in JavaScript 1.6.
// They are used here to demonstrate JavaScript's inherent functional nature.
[
    [25, 55],
    [21, 56],
    [22, 58],
    [28, 56]
].map(function(pair) { // array literal + mapping function
    return new LCMCalculator(pair[0], pair[1]);
}).sort((a, b) =&gt; a.lcm() - b.lcm()) // sort with this comparative function; =&gt; is a shorthand form of a function, called &quot;arrow function&quot;
    .forEach(printResult);

function printResult(obj) {
    output(obj + &quot;, gcd = &quot; + obj.gcd() + &quot;, lcm = &quot; + obj.lcm());
}
&lt;/syntaxhighlight&gt;

The following output should be displayed in the browser window.
&lt;syntaxhighlight lang=&quot;html4strict&quot;&gt;
LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56
LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168
LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275
LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638
&lt;/syntaxhighlight&gt;

== Security ==
{{See also|Browser security}}

JavaScript and the [[Document Object Model|DOM]] provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a [[Sandbox (computer security)|sandbox]] in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the [[same-origin policy]]: scripts from one Web site do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.

There are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements).&lt;ref&gt;{{cite web | url=http://www.adsafe.org/ | title=Making JavaScript Safe for Advertising | publisher=ADsafe | accessdate=2013-05-26}}&lt;/ref&gt;&lt;ref&gt;{{cite web | url=https://code.google.com/p/es-lab/wiki/SecureEcmaScript | title=Secure ECMA Script (SES) | publisher=Code.google.com | accessdate=2013-05-26}}&lt;/ref&gt; [[Caja project|Caja]] is another project for safe embedding and isolation of third-party JavaScript and HTML.

[[Content Security Policy]] is the main intended method of ensuring that only trusted code is executed on a Web page.

{{See also|Content Security Policy}}

=== Cross-site vulnerabilities ===
{{Main|Cross-site scripting|Cross-site request forgery}}

A common JavaScript-related security problem is [[cross-site scripting]] (XSS), a violation of the [[same-origin policy]]. XSS vulnerabilities occur when an attacker is able to cause a target Web site, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. A solution to XSS vulnerabilities is to use ''HTML escaping'' whenever displaying untrusted data.

Some browsers include partial protection against ''reflected'' XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server side can fully prevent XSS.

XSS vulnerabilities can also occur because of implementation mistakes by browser authors.&lt;ref&gt;{{cite web|url=http://www.mozillazine.org/talkback.html?article=4392 |title=Mozilla Cross-Site Scripting Vulnerability Reported and Fixed - MozillaZine Talkback |website=Mozillazine.org |date= |accessdate=2017-02-24}}&lt;/ref&gt;

Another cross-site vulnerability is [[cross-site request forgery]] (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.

&quot;JavaScript hijacking&quot; is a type of CSRF attack in which a &lt;code&gt;&lt;nowiki&gt;&lt;script&gt;&lt;/nowiki&gt;&lt;/code&gt; tag on an attacker's site exploits a page on the victim's site that returns private information such as [[JSON]] or JavaScript. Possible solutions include:

* requiring an authentication token in the [[POST (HTTP)|POST]] and [[GET (HTTP)|GET]] parameters for any response that returns private information.

=== Misplaced trust in the client ===
Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:
* Web site authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be [[obfuscated code|obfuscated]], but obfuscation can be reverse-engineered.
* JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client.
* Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it.&lt;ref&gt;{{cite journal
 |title       = Right-click &quot;protection&quot;? Forget about it
 |date        = 2008-06-17
 |url         = http://blog.anta.net/2008/06/17/right-click-%e2%80%9cprotection%e2%80%9d-forget-about-it/
 |issn        = 1797-1993
 |accessdate  = 2008-06-17
 |url-status     = dead
 |archiveurl  = https://web.archive.org/web/20110809195359/http://blog.anta.net/2008/06/17/right-click-%E2%80%9Cprotection%E2%80%9D-forget-about-it/
 |archivedate = 2011-08-09
}}&lt;/ref&gt;
* It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.&lt;ref&gt;{{cite web |last1=Rehorik |first1=Jan |title=Why You Should Never Put Sensitive Data in Your JavaScript |url=https://www.serviceobjects.com/blog/why-you-should-never-put-sensitive-data-in-your-javascript/ |website=ServiceObjects Blog |publisher=ServiceObjects |accessdate=3 June 2019}}&lt;/ref&gt;

=== Misplaced trust in developers ===
Package management systems such as [[Npm (software)|npm]] and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developer's program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133k websites, researchers found 37% of the websites included a library with at least one known vulnerability.&lt;ref name=&quot;jslibs&quot;&gt;
{{cite journal
 | title = Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web
 | date = 2016-12-21
 | url = http://www.ccs.neu.edu/home/arshad/publications/ndss2017jslibs.pdf
 | accessdate = 2017-02-22
 | journal = 
 | archive-url = https://web.archive.org/web/20170329045344/http://www.ccs.neu.edu/home/arshad/publications/ndss2017jslibs.pdf
 | archive-date = 2017-03-29
 | url-status=dead
 | df = 
 }}
&lt;/ref&gt; &quot;The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago.&quot;&lt;ref name=&quot;jslibs&quot;/&gt; Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from [[Npm (software)|npm]]. This caused all tens of thousands of programs and websites depending upon his libraries to break.&lt;ref&gt;Quartz, [https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/ How one programmer broke the internet by deleting a tiny piece of code]&lt;/ref&gt;&lt;ref&gt;SC Magazine UK, [https://www.scmagazineuk.com/developers-11-lines-of-deleted-code-breaks-the-internet/article/532050/ Developer's 11 lines of deleted code 'breaks the internet']&lt;/ref&gt;

=== Browser and plugin coding errors ===
JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as [[buffer overflow]]s. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's [[API]] with superuser privileges.

These flaws have affected major browsers including Firefox,&lt;ref&gt;Mozilla Corporation, [https://www.mozilla.org/security/announce/2006/mfsa2006-38.html Buffer overflow in crypto.signText()]&lt;/ref&gt; Internet Explorer,&lt;ref&gt;{{cite web|last1=Festa |first1=Paul |title=Buffer-overflow bug in IE |url=http://news.com.com/2100-1001-214620.html |archive-url=https://web.archive.org/web/20021225190522/http://news.com.com/2100-1001-214620.html |url-status=dead |archive-date=December 25, 2002 |website=[[CNET]] |date=August 19, 1998 |accessdate=}}&lt;/ref&gt; and Safari.&lt;ref&gt;SecurityTracker.com, [http://securitytracker.com/alerts/2006/Mar/1015713.html Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files]&lt;/ref&gt;

Plugins, such as video players, [[Adobe Flash#Flash client security|Adobe Flash]], and the wide range of [[ActiveX]] controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).&lt;ref&gt;SecurityFocus, [http://www.securityfocus.com/bid/19030/info Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability]&lt;/ref&gt;&lt;ref&gt;Fusion Authority, [http://www.fusionauthority.com/security/3234-macromedia-flash-activex-buffer-overflow.htm Macromedia Flash ActiveX Buffer Overflow] {{webarchive|url=https://web.archive.org/web/20110813160055/http://www.fusionauthority.com/security/3234-macromedia-flash-activex-buffer-overflow.htm |date=2011-08-13 }}&lt;/ref&gt;

In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.&lt;ref&gt;{{cite web|author= |url=http://blogs.msdn.com/ie/archive/2006/02/09/528963.aspx |title=Protected Mode in Vista IE7 – IEBlog |website=Blogs.msdn.com |date=2006-02-09 |accessdate=2017-02-24}}&lt;/ref&gt; [[Google Chrome]] similarly confines its page renderers to their own &quot;sandbox&quot;.

=== Sandbox implementation errors ===
Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web.

Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer&lt;ref&gt;US CERT, [https://www.kb.cert.org/vuls/id/713878 Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame]&lt;/ref&gt; and Firefox.&lt;ref&gt;Mozilla Foundation, [https://www.mozilla.org/security/announce/2005/mfsa2005-41.html Mozilla Foundation Security Advisory 2005–41: Privilege escalation via DOM property overrides]&lt;/ref&gt; In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.&lt;ref&gt;Microsoft Corporation, [https://technet.microsoft.com/en-us/library/bb457150.aspx Changes to Functionality in Microsoft Windows XP Service Pack 2: Part 5: Enhanced Browsing Security]&lt;/ref&gt;

[[Microsoft Windows]] allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: [[Windows Script Host]]). This makes JavaScript (like [[VBScript]]) a theoretically viable vector for a [[Trojan horse (computing)|Trojan horse]], although JavaScript Trojan horses are uncommon in practice.&lt;ref&gt;For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, [http://www.symantec.com/security_response/writeup.jsp?docid=2003-100111-0931-99 JS.Seeker.K]&lt;/ref&gt;{{failed verification|date=March 2017}}

=== Hardware vulnerabilities ===
In 2015, a JavaScript-based proof-of-concept implementation of a [[rowhammer]] attack was described in a paper by security researchers.&lt;ref&gt;{{cite arxiv | eprint = 1507.06955 | title = Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript | date = 2015-07-24 | last1 = Gruss | first1 = Daniel | last2 = Maurice | first2 = Clémentine | last3 = Mangard | first3 = Stefan | class = cs.CR }}&lt;/ref&gt;&lt;ref&gt;{{cite news|publisher=Motherboard|title=Rowhammer.js Is the Most Ingenious Hack I've Ever Seen|first=Alix|last=Jean-Pharuns|date=2015-07-30|url=https://motherboard.vice.com/en_us/article/9akpwz/rowhammerjs-is-the-most-ingenious-hack-ive-ever-seen}}&lt;/ref&gt;&lt;ref&gt;{{cite web|website=Ars Technica|title=DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript|first=Dan|last=Goodin|date=2015-08-04|url=https://arstechnica.com/information-technology/2015/08/dram-bitflipping-exploit-for-attacking-pcs-just-add-javascript/}}&lt;/ref&gt;&lt;ref&gt;{{cite web
 | url = http://www.slate.com/articles/technology/bitwise/2015/07/rowhammer_security_exploit_why_a_new_security_attack_is_truly_terrifying.html
 | title = Rowhammer security exploit: Why a new security attack is truly terrifying
 | date = {{date|2015-07-28|mdy}} | accessdate = {{date|2015-07-29|mdy}}
 | author = David Auerbach | website = slate.com
}}&lt;/ref&gt;

In 2017, a JavaScript-based attack via browser was demonstrated that could bypass [[Address space layout randomization|ASLR]]. It's called &quot;ASLR⊕Cache&quot; or AnC.&lt;ref&gt;[https://www.vusec.net/projects/anc/ AnC] VUSec, 2017&lt;/ref&gt;&lt;ref&gt;[https://arstechnica.com/security/2017/02/new-aslr-busting-javascript-is-about-to-make-drive-by-exploits-much-nastier/ New ASLR-busting JavaScript is about to make drive-by exploits much nastier] Ars Technica, 2017&lt;/ref&gt;

In 2018, the paper that announced the [[Spectre (security_vulnerability)|Spectre]] attacks against Speculative Execution in Intel and other processors included a JavaScript implementation.&lt;ref&gt;[https://spectreattack.com/spectre.pdf Spectre Attack] Spectre Attack&lt;/ref&gt;

== Development tools ==

Important tools have evolved with the language.

* Every major web browser has built-in [[web development tools]], including a JavaScript [[debugger]].

* [[Static program analysis]] tools, such as [[ESLint]] and [[JSLint]], scan JavaScript code for conformance to a set of standards and guidelines.

* Some browsers have built-in [[Profiling (computer programming)|profilers]]. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench.&lt;ref&gt;{{cite web|url=https://benchmarkjs.com/|title=Benchmark.js|website=benchmarkjs.com}}&lt;/ref&gt;&lt;ref name=&quot;auto1&quot;&gt;{{cite web|url=http://jsben.ch|title=JSBEN.CH Performance Benchmarking Playground for JavaScript|last=JSBEN.CH|website=jsben.ch}}&lt;/ref&gt;

* Many [[text editor]]s have syntax highlighting support for JavaScript code.

== Related technologies ==

=== Java ===
A common misconception is that JavaScript is similar or closely related to [[Java (programming language)|Java]]. It is true that both have a C-like syntax (the C language being their most immediate common ancestor language). They also are both typically [[Sandbox (computer security)|sandboxed]] (when used inside a browser), and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's {{code|lang=javascript|code=Math}} and {{code|lang=javascript|code=Date}} objects are based on classes from Java 1.0,&lt;ref name=&quot;popularity&quot;&gt;{{cite web | url=http://brendaneich.com/2008/04/popularity/ | title=Popularity | author=Brendan Eich | date=3 April 2008 | accessdate=2012-01-19}}&lt;/ref&gt; but the similarities end there.

[[Java (programming language)|Java]] and JavaScript both first appeared in 1995, but Java was developed by [[James Gosling]] of Sun Microsystems, and JavaScript by [[Brendan Eich]] of Netscape Communications.

The differences between the two languages are more prominent than their similarities. Java has [[static typing]], while JavaScript's typing is [[Dynamic typing|dynamic]]. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are [[Class-based programming|class-based]], while JavaScript's are [[Prototype-based programming|prototype-based]]. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by [[Scheme (programming language)|Scheme]].

===JSON===
[[JSON]], or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript's object literal syntax.

===WebAssembly===

Since 2017, web browsers have supported [[WebAssembly]], a binary format that enables a [[JavaScript engine]] to execute performance-critical portions of [[web page]] scripts close to native speed.&lt;ref&gt;{{cite web|url=https://visualstudiomagazine.com/articles/2017/11/06/edge-webassembly.aspx|title=Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine|website=Visual Studio Magazine}}&lt;/ref&gt; WebAssembly code runs in the same [[Sandbox (computer security)|sandbox]] as regular JavaScript code.

[[asm.js]] is a subset of JavaScript that served as the forerunner of WebAssembly.&lt;ref&gt;{{cite web | url=http://asmjs.org/faq.html | title=frequently asked questions | publisher=asm.js | accessdate=2014-04-13}}&lt;/ref&gt;

{{anchor|transpilers}}

=== Transpilers ===
JavaScript is the dominant client-side language of the Web, and many websites are script-heavy. Thus [[transpiler]]s have been created to convert code written in other languages, which can aid the development process.&lt;ref name=&quot;transpilers&quot;&gt;{{cite web |title=List of languages that compile to JS |url=https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS |accessdate=6 February 2020}}&lt;/ref&gt;

== References ==
{{Reflist|30em}}

== External links ==
{{sisterlinks|commons=Category:JavaScript|n=no|v=Topic:JavaScript|q=no|s=no|m=no|voy=no|species=no|mw=JavaScript}}
{{Spoken Wikipedia|En-JavaScript.ogg|2013-08-20}}
* {{Curlie|Computers/Programming/Languages/JavaScript/}}
* [[Douglas Crockford]]'s [https://www.youtube.com/playlist?list=PL62E185BB8577B63D video lectures on JavaScript]

{{JavaScript}}
{{Programming languages}}
{{ECMAScript}}
{{Web browsers}}
{{NodeJs}}
{{Authority control}}

[[Category:JavaScript| ]]
[[Category:American inventions]]
[[Category:Articles with example JavaScript code]]
[[Category:Cross-platform software]]
[[Category:Dynamically typed programming languages]]
[[Category:Functional languages]]
[[Category:Object-based programming languages]]
[[Category:High-level programming languages]]
[[Category:Programming languages created in 1995]]
[[Category:Programming languages with an ISO standard]]
[[Category:Prototype-based programming languages]]
[[Category:Scripting languages]]
[[Category:Web programming]]</text>
      <sha1>szfxga1jxa3ciquvn6jd75t1tl7jkjc</sha1>
    </revision>
  </page>
