  <page>
    <title>Automated theorem proving</title>
    <ns>0</ns>
    <id>2546</id>
    <revision>
      <id>942965529</id>
      <parentid>931826775</parentid>
      <timestamp>2020-02-28T00:08:08Z</timestamp>
      <contributor>
        <username>Rhalah</username>
        <id>9514943</id>
      </contributor>
      <comment>Added prover9</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">'''Automated theorem proving''' (also known as '''ATP''' or '''automated deduction''') is a subfield of [[automated reasoning]] and [[mathematical logic]] dealing with proving [[mathematical theorem]]s by [[computer program]]s.  Automated reasoning over [[mathematical proof]] was a major impetus for the development of computer science.

== Logical foundations ==
While the roots of formalised [[Logicism|logic]] go back to [[Aristotelian logic|Aristotle]], the end of the 19th and early 20th centuries saw the development of modern logic and formalised mathematics. [[Gottlob Frege|Frege]]'s ''[[Begriffsschrift]]'' (1879) introduced both a complete [[propositional logic|propositional calculus]] and what is essentially modern [[predicate logic]].&lt;ref&gt;{{cite book|last=Frege|first=Gottlob|title=Begriffsschrift|year=1879|publisher=Verlag Louis Neuert|url=http://gallica.bnf.fr/ark:/12148/bpt6k65658c}}&lt;/ref&gt;  His ''[[The Foundations of Arithmetic|Foundations of Arithmetic]]'', published 1884,&lt;ref&gt;{{cite book|last=Frege|first=Gottlob|title=Die Grundlagen der Arithmetik|year=1884|publisher=Wilhelm Kobner|location=Breslau|url=http://www.ac-nancy-metz.fr/enseign/philo/textesph/Frege.pdf|access-date=2012-09-02|archive-url=https://web.archive.org/web/20070926172317/http://www.ac-nancy-metz.fr/enseign/philo/textesph/Frege.pdf|archive-date=2007-09-26|url-status=dead}}&lt;/ref&gt; expressed (parts of) mathematics in formal logic. This approach was continued by [[Bertrand Russell|Russell]] and [[Alfred North Whitehead|Whitehead]] in their influential ''[[Principia Mathematica]]'', first published 1910–1913,&lt;ref&gt;{{cite book|title=Principia Mathematica|url=https://archive.org/details/cu31924001575244|year=1910–1913|publisher=Cambridge University Press|author=Bertrand Russell|edition=1st|author2=Alfred North Whitehead}}&lt;/ref&gt; and with a revised second edition in 1927.&lt;ref&gt;{{cite book|title=Principia Mathematica|url=https://archive.org/details/in.ernet.dli.2015.221192|year=1927|publisher=Cambridge University Press|author=Bertrand Russell|edition=2nd|author2=Alfred North Whitehead}}&lt;/ref&gt; Russell and Whitehead thought they could derive all mathematical truth using axioms and inference rules of formal logic, in principle opening up the process to automatisation. In 1920, [[Thoralf Skolem]] simplified a previous result by [[Leopold Löwenheim]], leading to the [[Löwenheim–Skolem theorem]] and, in 1930, to the notion of a [[Herbrand universe]] and a [[Herbrand interpretation]] that allowed (un)satisfiability of first-order formulas (and hence the [[Validity (logic)|validity]] of a theorem) to be reduced to (potentially infinitely many) propositional satisfiability problems.&lt;ref&gt;{{cite book|last=Herbrand|first=Jaques|title=Recherches sur la théorie de la démonstration|year=1930}}&lt;/ref&gt;

In 1929, [[Mojżesz Presburger]] showed that the theory of [[natural numbers]] with addition and equality (now called [[Presburger arithmetic]] in his honor) is [[Decidability (logic)|decidable]] and gave an algorithm that could determine if a given sentence in the language was true or false.&lt;ref&gt;{{cite journal|last=Presburger|first=Mojżesz|title=Über die Vollständigkeit eines gewissen Systems der Arithmetik ganzer Zahlen, in welchem die Addition als einzige Operation hervortritt|journal=Comptes Rendus du I Congrès de Mathématiciens des Pays Slaves|year=1929|pages=92–101|location=Warszawa}}&lt;/ref&gt;&lt;ref name=Davis2001&gt;{{Citation
| last = Davis
| first = Martin
| author-link = Martin Davis (mathematician)
| chapter = The Early History of Automated Deduction
| year = 2001
| chapter-url = http://cs.nyu.edu/cs/faculty/davism/early.ps
| editor-last = Robinson
| editor-first = Alan
| editor-link = John Alan Robinson
| editor2-last = Voronkov
| editor2-first = Andrei
| editor2-link = Andrei Voronkov (scientist)
| title = Handbook of Automated Reasoning
| volume = 1
| publisher = [[Elsevier]]
| publication-date = 2001
| title-link = Handbook of Automated Reasoning
}})&lt;/ref&gt;
However, shortly after this positive result, [[Kurt Gödel]] published ''[[On Formally Undecidable Propositions of Principia Mathematica and Related Systems]]'' (1931), showing that in any sufficiently strong axiomatic system there are true statements which cannot be proved in the system. This topic was further developed in the 1930s by [[Alonzo Church]] and [[Alan Turing]], who on the one hand gave two independent but equivalent definitions of [[computability]], and on the other gave concrete examples for undecidable questions.

== First implementations ==

Shortly after [[World War II]], the first general purpose computers became available. In 1954, [[Martin Davis (mathematician)|Martin Davis]] programmed Presburger's algorithm for a [[JOHNNIAC]] vacuum tube computer at the [[Princeton Institute for Advanced Study]]. According to Davis, &quot;Its great triumph was to prove that the sum of two even numbers is even&quot;.&lt;ref name=Davis2001/&gt;&lt;ref name=Bibel2007&gt;{{cite journal|last=Bibel|first=Wolfgang|title=Early History and Perspectives of Automated Deduction|journal=Ki 2007|year=2007|series=LNAI|issue=4667|pages=2–18|url=http://www.intellektik.de/resources/OsnabrueckBuchfassung.pdf|accessdate=2 September 2012|publisher=Springer}}&lt;/ref&gt; More ambitious was the [[Logic Theory Machine]] in 1956, a deduction system for the [[propositional logic]] of the ''Principia Mathematica'', developed by [[Allen Newell]], [[Herbert A. Simon]] and [[Cliff Shaw|J. C. Shaw]]. Also running on a JOHNNIAC, the Logic Theory Machine constructed proofs from a small set of propositional axioms and three deduction rules: [[modus ponens]], (propositional) variable substitution, and the replacement of formulas by their definition. The system used heuristic guidance, and managed to prove 38 of the first 52 theorems of the ''Principia''.&lt;ref name=Davis2001/&gt;

The &quot;heuristic&quot; approach of the Logic Theory Machine tried to emulate human mathematicians, and could not guarantee that a proof could be found for every valid theorem even in principle.  In contrast, other, more systematic algorithms achieved, at least theoretically, [[completeness (logic)|completeness]] for first-order logic. Initial approaches relied on the results of Herbrand and Skolem to convert a first-order formula into successively larger sets of [[Propositional formula|propositional formulae]] by instantiating variables with terms from the [[Herbrand universe]]. The propositional formulas could then be checked for unsatisfiability using a number of methods. Gilmore's program used conversion to [[disjunctive normal form]], a form in which the satisfiability of a formula is obvious.&lt;ref name=Davis2001/&gt;&lt;ref&gt;{{cite journal|last=Gilmore|first=Paul|title=A proof procedure for quantification theory: its justification and realisation|journal=IBM Journal of Research and Development|year=1960|volume=4|pages=28–35|doi=10.1147/rd.41.0028}}&lt;/ref&gt;

== Decidability of the problem ==
{{Unreferenced section|date=April 2010}}
Depending on the underlying logic, the problem of deciding the validity of a formula varies from trivial to impossible. For the frequent case of [[propositional logic]], the problem is decidable but [[co-NP-complete]], and hence only exponential-time algorithms are believed to exist for general proof tasks. For a [[first-order logic|first order predicate calculus]], [[Gödel's completeness theorem]] states that the theorems (provable statements) are exactly the logically valid [[well-formed formula]]s, so identifying valid formulas is [[recursively enumerable]]: given unbounded resources, any valid formula can eventually be proven. However, ''invalid'' formulas (those that are ''not'' entailed by a given theory), cannot always be recognized.

The above applies to first order theories, such as [[Peano axioms|Peano arithmetic]]. However, for a specific model that may be described by a first order theory, some statements may be true but undecidable in the theory used to describe the model. For example, by [[Gödel's incompleteness theorem]], we know that any theory whose proper axioms are true for the natural numbers cannot prove all first order statements true for the natural numbers, even if the list of proper axioms is allowed to be infinite enumerable. It follows that an automated theorem prover will fail to terminate while searching for a proof precisely when the statement being investigated is undecidable in the theory being used, even if it is true in the model of interest. Despite this theoretical limit, in practice, theorem provers can solve many hard problems, even in models that are not fully described by any first order theory (such as the integers).

== Related problems ==

A simpler, but related, problem is ''[[proof verification]]'', where an existing proof for a theorem is certified valid. For this, it is generally required that each individual proof step can be verified by a [[primitive recursive function]] or program, and hence the problem is always decidable.

Since the proofs generated by automated theorem provers are typically very large, the problem of [[proof compression]] is crucial and various techniques aiming at making the prover's output smaller, and consequently more easily understandable and checkable, have been developed.

[[Proof assistant]]s require a human user to give hints to the system. Depending on the degree of automation, the prover can essentially be reduced to a proof checker, with the user providing the proof in a formal way, or significant proof tasks can be performed automatically. Interactive provers are used for a variety of tasks, but even fully automatic systems have proved a number of interesting and hard theorems, including at least one that has eluded human mathematicians for a long time, namely the [[Robbins conjecture]].&lt;ref&gt;{{cite journal|author=W.W. McCune|title=Solution of the Robbins Problem|journal=Journal of Automated Reasoning|year=1997|volume=19|issue=3|pages=263–276|doi=10.1023/A:1005843212881}}&lt;/ref&gt;&lt;ref&gt;{{cite news|title=Computer Math Proof Shows Reasoning Power|author=Gina Kolata|date=December 10, 1996|url=https://www.nytimes.com/library/cyber/week/1210math.html|newspaper=The New York Times|accessdate=2008-10-11}}&lt;/ref&gt; However, these successes are sporadic, and work on hard problems usually requires a proficient user.

Another distinction is sometimes drawn between theorem proving and other techniques, where a process is considered to be theorem proving if it consists of a traditional proof, starting with axioms and producing new inference steps using rules of inference.  Other techniques would include [[model checking]], which, in the simplest case, involves brute-force enumeration of many possible states (although the actual implementation of model checkers requires much cleverness, and does not simply reduce to brute force).

There are hybrid theorem proving systems which use model checking as an inference rule. There are also programs which were written to prove a particular theorem, with a (usually informal) proof that if the program finishes with a certain result, then the theorem is true. A good example of this was the machine-aided proof of the [[four color theorem]], which was very controversial as the first claimed mathematical proof which was essentially impossible to verify by humans due to the enormous size of the program's calculation (such proofs are called [[non-surveyable proofs]]).  Another example of a program-assisted proof is the one that shows that the game of [[Connect Four]] can always be won by first player.

== Industrial uses ==

Commercial use of automated theorem proving is mostly concentrated in [[integrated circuit design]] and verification.  Since the [[Pentium FDIV bug]], the complicated [[floating point unit]]s of modern microprocessors have been designed with extra scrutiny. [[AMD]], [[Intel]] and others use automated theorem proving to verify that division and other operations are correctly implemented in their processors.

==First-order theorem proving==
In the late 1960s agencies funding research in automated deduction began to emphasize the need for practical applications. One of the first fruitful areas was that of [[program verification]] whereby first-order theorem provers were applied to the problem of verifying the correctness of computer programs in languages such as Pascal, Ada, etc. Notable among early program verification systems was the Stanford Pascal Verifier developed by [[David Luckham]] at [[Stanford University]]. This was based on the Stanford Resolution Prover also developed at Stanford using [[John Alan Robinson]]'s [[Resolution (logic)|resolution]] principle. This was the first automated deduction system to demonstrate an ability to solve mathematical problems that were announced in the Notices of the American Mathematical Society before solutions were formally published.

[[First-order logic|First-order]] theorem proving is one of the most mature subfields of automated theorem proving. The logic is expressive enough to allow the specification of arbitrary problems, often in a reasonably natural and intuitive way. On the other hand, it is still semi-decidable, and a number of sound and complete calculi have been developed, enabling ''fully'' automated systems. More expressive logics, such as [[Higher-order logic]]s, allow the convenient expression of a wider range of problems than first order logic, but theorem proving for these logics is less well developed.

==Benchmarks, competitions, and sources ==
The quality of implemented systems has benefited from the existence of a large library of standard benchmark examples — the Thousands of Problems for Theorem Provers (TPTP) Problem Library&lt;ref&gt;{{cite web|last=Sutcliffe|first=Geoff|title=The TPTP Problem Library for Automated Theorem Proving|url=http://www.tptp.org/|accessdate=15 July 2019}}&lt;/ref&gt;  — as well as from the [[CADE ATP System Competition]] (CASC), a yearly competition of first-order systems for many important classes of first-order problems.

Some important systems (all have won at least one CASC competition division) are listed below.
* [[E theorem prover|E]] is a high-performance prover for full first-order logic, but built on a [[superposition calculus|purely equational calculus]], originally developed in the automated reasoning group of [[Technical University of Munich]] under direction of [[Wolfgang Bibel]], and now at [[Baden-Württemberg Cooperative State University]] in [[Stuttgart]].
* [[Otter (theorem prover)|Otter]], developed at the [[Argonne National Laboratory]], is based on [[first-order resolution]] and [[paramodulation]]. Otter has since been replaced by [[Prover9]], which is paired with [[Mace4]].
* [[SETHEO]] is a high-performance system based on the goal-directed [[model elimination]] calculus, originally developed by a team under direction of [[Wolfgang Bibel]]. E and SETHEO have been combined (with other systems) in the composite theorem prove&lt;nowiki/&gt;r E-SETHEO.
* [[Vampire theorem prover|Vampire]] is developed and implemented at [[University of Manchester|Manchester University]] by Andrei Voronkov and Krystof Hoder, formerly also by Alexandre Riazanov. It has won the CADE ATP System Competition in the most prestigious CNF (MIX) division for eleven years (1999, 2001–2010).
* Waldmeister is a specialized system for unit-equational first-order logic developed by Arnim Buch and Thomas Hillenbrand. It won the CASC UEQ division for fourteen consecutive years (1997–2010).
* [[SPASS]] is a first order logic theorem prover with equality. This is developed by the research group Automation of Logic, [[Max Planck Institute for Computer Science]].

The [https://theoremprover-museum.github.io/ Theorem Prover Museum] is an initiative to conserve the sources of theorem prover systems for future analysis, since they are important cultural/scientific artefacts. It has the sources of many of the systems mentioned above.

== Popular techniques ==

*[[First-order resolution]] with [[unification (computing)|unification]]
*[[Model elimination]]
*[[Method of analytic tableaux]]
*[[Superposition calculus|Superposition]] and term [[rewriting]]
*[[Model checking]]
*[[Mathematical induction]]&lt;ref&gt;Bundy, Alan. [https://www.era.lib.ed.ac.uk/bitstream/handle/1842/3394/0002.pdf?sequence=1 The automation of proof by mathematical induction]. 1999.&lt;/ref&gt;
*[[Binary decision diagram]]s
*[[DPLL algorithm|DPLL]]
*[[Unification (computing)#Higher-order unification|Higher-order unification]]

== Software systems{{anchor|Comparison}} ==
{{See also|Proof assistant#Comparison|Category:Theorem proving software systems}}
{| class=&quot;wikitable sortable mw-collapsible mw-collapsed&quot;
|+ Comparison
|-
! Name !! License type !! Web service !! Library !! Standalone !! Last update {{small|([[strftime|YYYY-mm-dd format]])}} 
|-
| [[ACL2]] || [[BSD Licenses|3-clause BSD]] || {{No}} || {{No}} || {{Yes}} || {{dts|2019-05}}
|-
| [[Prover9|Prover9/Otter]] || Public Domain || {{Yes|Via [[System on TPTP]]}} || {{Yes}} || {{No}} || {{dts|2009}} 
|-
| [http://www.gilith.com/software/metis/index.html Metis] || [[MIT License]] || {{No}} || {{Yes}} ||{{No}} || {{dts|2018-03-01}} 
|-
| [https://www.cl.cam.ac.uk/~lp15/papers/Arith/ MetiTarski] || MIT || {{Yes|Via [[System on TPTP]]}} || {{Yes}} ||{{Yes}} || {{dts|2014-10-21}} 
|-
| [[Jape (software)|Jape]] || [[GPL | GPLv2]] ||  {{Yes}} || {{Yes}} || {{No}} || {{dts|2015-05-15}} 
|-
| [[Prototype Verification System|PVS]] || [[GPL | GPLv2]] || {{No}} || {{Yes}} || {{No}} || {{dts|2013-01-14}} 
|-
| [http://arquivo.pt/wayback/20160515165107/http://www.leoprover.org/ Leo II] || [[BSD License]] || {{Yes|Via [[System on TPTP]]}} || {{Yes}} ||{{Yes}} || {{dts|2013}} 
|-
| [[EQP]] || {{dunno}} ||  {{No}} || {{Yes}} || {{No}} || {{dts|2009-05}} 
|-
| [http://nevidal.org/sad.en.html SAD] || [[GPL | GPLv3]] ||  {{Yes}} || {{Yes}} || {{No}} || {{dts|2008-08-27}} 
|-
| [[PhoX]] || {{dunno}} ||  {{No}} || {{Yes}} ||{{No}} || {{dts|2017-09-28}} 
|-
| [http://www.symbolaris.com/info/KeYmaera.html KeYmaera] || GPL || {{Yes| Via [[Java Webstart]]}} || {{Yes}} || {{Yes}} || {{dts|2015-03-11}} 
|-
| [[Gandalf (theorem prover)|Gandalf]] || {{dunno}} || {{No}} || {{Yes}} || {{No}} || {{dts|2009}} 
|-
| [[E theorem prover|E]] || [[GPL]] || {{Yes|Via [[System on TPTP]]}} ||{{No}} || {{Yes}}  || {{dts|2017-07-04}}
|-
| [[SNARK theorem prover|SNARK]] || [[Mozilla Public License | Mozilla Public License 1.1]] || {{No}} || {{Yes}} || {{No}} || {{dts|2012}} 
|-
| [[Vampire theorem prover|Vampire]] ||[https://vprover.github.io/licence.html Vampire License] ||  {{Yes|Via [[System on TPTP]]}} || {{Yes}} || {{Yes}} || {{dts|2017-12-14}} 
|-
| [[Theorem Proving System]] (TPS) || [http://gtps.math.cmu.edu/cgi-bin/tpsdist.pl TPS Distribution Agreement] || {{No}} || {{Yes}} || {{No}} || {{dts|2012-02-04}} 
|-
| [[SPASS]] || [[FreeBSD license]] ||  {{Yes}}|| {{Yes}} ||  {{Yes}} || {{dts|2005-11}} 
|-
| [[IsaPlanner]] || [[GPL]] ||  {{No}} || {{Yes}} ||  {{Yes}} || {{dts|2007}} 
|-
| [[KeY]] || [[GPL]] || {{Yes}}||  {{Yes}} || {{Yes}} || {{dts|2017-10-11}} 
|-
| [http://www.philipp.ruemmer.org/princess.shtml Princess] || [[LGPL|lgpl v2.1]] || {{Yes|Via [[Java Webstart]] and [[System on TPTP]]}} || {{Yes}} || {{Yes}} || {{dts|2018-01-27}} 
|-
| [http://www.cs.man.ac.uk/~korovink/iprover/ iProver] || [[GPL]] || {{Yes|Via [[System on TPTP]]}} ||{{No}} || {{Yes}}  || {{dts|2018}}
|-
| [http://www.mathapplets.net/Programs/Meta%20Theorem/Meta%20Theorem.jar Meta Theorem] || [[Freeware]] || {{No}} || {{No}} || {{Yes}} || {{dts|2019}}
|-
| [[Z3 Theorem Prover]] || [[MIT License]] || {{Yes}} || {{Yes}} || {{Yes}} || {{dts|2019|11|19}}
|-
|}

=== Free software ===
* [[Alt-Ergo]]
* [[Automath]]
* [[CVC (theorem prover)|CVC]]
* [[E theorem prover|E]] ([http://www.eprover.org/])
* [[Gödel machine]]
* [http://www.cs.man.ac.uk/~korovink/iprover/ iProver]
* [[IsaPlanner]]
* [[KED theorem prover]]&lt;ref&gt;Artosi, Alberto, Paola Cattabriga, and Guido Governatori. &quot;[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.19.554&amp;rep=rep1&amp;type=pdf Ked: A deontic theorem prover].&quot; Eleventh International Conference on Logic Programming (ICLP’94). 1994.&lt;/ref&gt;
* [[leanCoP]]&lt;ref&gt;{{cite journal|doi=10.1016/S0747-7171(03)00037-3|title=LeanCoP: Lean connection-based theorem proving|journal=Journal of Symbolic Computation|volume=36|issue=1–2|pages=139–161|year=2003|last1=Otten|first1=Jens|last2=Bibel|first2=Wolfgang}}&lt;/ref&gt;
* [[Leo II (theorem prover)|Leo II]] ([http://www.eprover.org/])
* [[LCF (theorem prover)|LCF]]
* [[LoTREC]]&lt;ref&gt;del Cerro, Luis Farinas, et al. &quot;[https://www.researchgate.net/profile/Dominique_Longin/publication/220806348_Lotrec_The_Generic_Tableau_Prover_for_Modal_and_Description_Logics/links/54b683310cf24eb34f6d27e8/Lotrec-The-Generic-Tableau-Prover-for-Modal-and-Description-Logics.pdf Lotrec: the generic tableau prover for modal and description logics].&quot; International Joint Conference on Automated Reasoning. Springer, Berlin, Heidelberg, 2001.&lt;/ref&gt;
* [[MetaPRL]]&lt;ref&gt;Hickey, Jason, et al. &quot;[http://www.cs.cornell.edu/info/people/kreitz/PDF/03tphols-metaprl.pdf MetaPRL–a modular logical environment].&quot; International Conference on Theorem Proving in Higher Order Logics. Springer, Berlin, Heidelberg, 2003.&lt;/ref&gt;
* [[Mizar system|Mizar]]
* [[NuPRL]]
* [[Paradox (theorem prover)|Paradox]]
* [[Prover9]]
* [[Simplify (software)|Simplify]] ([http://www.dwheeler.com/misc/simplify-hp-release.txt GPL'ed since 5/2011])
* [[SPARK (programming language)]]
* [[Twelf]]
* [[Z3 Theorem Prover]]

=== Proprietary software ===
* [[Acumen RuleManager]] (commercial product)
* [http://mcs.open.ac.uk/pp2464/ALLIGATOR ALLIGATOR (CC BY-NC-SA 2.0 UK)]
* [[CARINE]]
* [http://isse.de/kiv KIV] (freely available as a plugin for [[Eclipse (software)|Eclipse]])
* [[Prover Plug-In]] (commercial proof engine product)
* [[ProverBox]]
* [[Wolfram Mathematica]]&lt;ref&gt;[https://reference.wolfram.com/language/ref/FindEquationalProof.html] Mathematica documentation&lt;/ref&gt;
* [[ResearchCyc]]
* [[Spear modular arithmetic theorem prover]]

== See also ==
{{Div col}}
* [[Curry–Howard correspondence]]
* [[Symbolic computation]]
* [[Computer-aided proof]]
* [[Formal verification]]
* [[Logic programming]]
* [[Proof checking]]
* [[Model checking]]
* [[Proof complexity]]
* [[Computer algebra system]]
* [[Program analysis (computer science)]]
* [[General Problem Solver]]
* [[Metamath]] language for formalized mathematics
{{colend}}

== Notes ==
{{reflist}}

== References ==
* {{cite book | title = Symbolic Logic and Mechanical Theorem Proving
| author = Chin-Liang Chang
|author2=Richard Char-Tung Lee
| publisher = [[Academic Press]]
| year = 1973
}}
* {{cite book
| last = Loveland
| first = Donald W.
| title = Automated Theorem Proving: A Logical Basis. Fundamental Studies in Computer Science Volume 6
| publisher = [[North-Holland Publishing]]
| year = 1978
}}
*{{cite book
| last = Luckham
| first = David
| title = Programming with Specifications: An Introduction to Anna, A Language for Specifying Ada Programs
| publisher = Springer-Verlag Texts and Monographs in Computer Science, 421 pp.
| year = 1990
| isbn = 978-1461396871
}}

* {{cite book
| last = Gallier
| first = Jean H. | authorlink = Jean Gallier
| title = Logic for Computer Science: Foundations of Automatic Theorem Proving
| publisher = [[Harper &amp; Row Publishers]] (Available for free download)
| year = 1986
| url = http://www.cis.upenn.edu/~jean/gbooks/logic.html
}}
* {{cite book
| last = Duffy
| first = David A.
| title = Principles of Automated Theorem Proving
| year = 1991
| publisher = [[John Wiley &amp; Sons]]
}}
* {{cite book
| last = Wos
| first = Larry
|author2= Overbeek, Ross|author3= Lusk, Ewing|author4= Boyle, Jim
| title = Automated Reasoning: Introduction and Applications
| edition = 2nd
| publisher = [[McGraw–Hill]]
| year = 1992
}}
* {{cite book
| title = Handbook of Automated Reasoning Volume I &amp; II
| editor1 = Alan Robinson 
| editor2= Andrei Voronkov
| publisher = [[Elsevier]] and [[MIT Press]]
| year = 2001
}}
* {{cite book
| last = Fitting
| first = Melvin
| title = First-Order Logic and Automated Theorem Proving
| edition = 2nd
| publisher = [[Springer Science+Business Media|Springer]]
| year = 1996
| url = http://comet.lehman.cuny.edu/fitting/
}}

== External links ==
* [https://github.com/johnyf/tool_lists/blob/master/verification_synthesis.md#theorem-provers A list of theorem proving tools]

{{DEFAULTSORT:Automated Theorem Proving}}
[[Category:Formal methods]]
[[Category:Automated theorem proving| ]]</text>
      <sha1>140rifnyn9pz1suoi5j1c4rvx201z23</sha1>
    </revision>
  </page>
