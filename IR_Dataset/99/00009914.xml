  <page>
    <title>Executable and Linkable Format</title>
    <ns>0</ns>
    <id>9914</id>
    <revision>
      <id>942229958</id>
      <parentid>939530708</parentid>
      <timestamp>2020-02-23T12:30:51Z</timestamp>
      <contributor>
        <username>Dr.xBot</username>
        <id>38615931</id>
      </contributor>
      <comment>/* File layout */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{short description|Standard file format for executables, object code, shared libraries, and core dumps}}
{{Infobox file format
| name= ELF
| icon = 
| extension= none, {{Mono|.axf}}, {{Mono|.bin}}, {{Mono|.elf}}, {{Mono|.o}}, {{Mono|.prx}}, {{Mono|.puff}}, {{Mono|.ko}}, {{Mono|.mod}} and {{Mono|.so}}
| mime =
| magic= &lt;code&gt;0x7F 'E' 'L' 'F'&lt;/code&gt;
| url = 
| owner= [[Unix System Laboratories]]&lt;ref name=&quot;linuxbase-elf&quot; /&gt;{{rp|3}}
| genre= [[Binary file|Binary]], [[executable]], [[object code|object]], [[Library (computing)|shared library]], [[core dump]]
| container for= Many executable binary formats
}}

[[File:Elf-layout--en.svg|thumb|upright=1.2|An ELF file has two views: the program header shows the ''segments'' used at run time, whereas the section header lists the set of ''sections'' of the binary.]]

In [[computing]], the '''Executable and Linkable Format''' ('''ELF''', formerly named '''Extensible Linking Format'''), is a common standard [[file format]] for [[executable]] files, [[object code]], [[Library (computing)|shared libraries]], and [[core dump]]s. First published in the specification for the [[application binary interface]] (ABI) of the [[Unix]] operating system version named [[System V Release 4]] (SVR4),&lt;ref&gt;''[http://www.sco.com/developers/devspecs/gabi41.pdf System V Application Binary Interface]'' Edition 4.1 (1997-03-18)&lt;/ref&gt; and later in the Tool Interface Standard,&lt;ref name=&quot;linuxbase-elf&quot;&gt;Tool Interface Standard (TIS) ''[http://refspecs.linuxbase.org/elf/elf.pdf Executable and Linking Format (ELF) Specification] Version 1.2'' (May 1995)&lt;/ref&gt; it was quickly accepted among different vendors of [[Unix]] systems. In 1999, it was chosen as the standard binary file format for Unix and [[Unix-like]] systems on [[x86]] processors by the [[#86open|86open]] project.

By design, the ELF format is flexible, extensible, and [[cross-platform]]. For instance it supports different [[endiannesses]] and address sizes so it does not exclude any particular [[central processing unit]] (CPU) or [[instruction set architecture]]. This has allowed it to be adopted by many different [[operating system]]s on many different hardware [[Computing platform|platforms]].

== File layout ==

Each ELF file is made up of one ELF header, followed by file data. The data can include:
* Program header table, describing zero or more [[Memory segmentation|memory segments]]
* Section header table, describing zero or more sections
* Data referred to by entries in the program header table or section header table

[[File:ELF Executable and Linkable Format diagram by Ange Albertini.png|thumb|center|upright=2.0|Structure of an ELF file with key entries highlighted]]

The segments contain information that is needed for [[Run time (program lifecycle phase)|run time]] execution of the file, while sections contain important data for linking and relocation. Any [[byte]] in the entire file can be owned by one section at most, and orphan bytes can occur which are unowned by any section.

{{quote box |
&lt;syntaxhighlight lang=&quot;hexdump&quot; inline&gt;
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
&lt;/syntaxhighlight&gt;

&lt;syntaxhighlight lang=&quot;hexdump&quot; inline&gt;
00000010  02 00 3e 00 01 00 00 00  c5 48 40 00 00 00 00 00  |..&gt;......H@.....|
&lt;/syntaxhighlight&gt;
|align= none
|Example hexdump of ELF file header&lt;ref&gt;{{cite web|url=http://pygments.org/docs/lexers#lexers-for-hexadecimal-dumps|title=Available lexers â€” Pygments|website=pygments.org}}&lt;/ref&gt;
}}

=== File header ===

The ELF header defines whether to use [[32-bit|32-]] or [[64-bit computing|64-bit]] addresses. The header contains three fields that are affected by this setting and offset other fields that follow them. The ELF header is 52 or 64 bytes long for 32-bit and 64-bit binaries respectively.

{| class=&quot;wikitable&quot;
|+ ELF header&lt;ref&gt;{{cite web|url=http://www.sco.com/developers/gabi/2000-07-17/ch4.eheader.html |title=ELF Header |publisher=Sco.com |date=July 2000 |access-date=2014-02-07}}&lt;/ref&gt;
|-
! colspan=&quot;2&quot; | Offset!! colspan=&quot;2&quot; | Size (bytes) !! rowspan=&quot;2&quot; | Field !! rowspan=&quot;2&quot; | Purpose
|-
! 32-bit !! 64-bit !! 32-bit !! 64-bit
|-
| colspan=&quot;2&quot; | 0x00 || colspan=&quot;2&quot; | 4 || &lt;tt&gt;e_ident[EI_MAG0]&lt;/tt&gt; through &lt;tt&gt;e_ident[EI_MAG3]&lt;/tt&gt;
| &lt;code&gt;0x7F&lt;/code&gt; followed by &lt;code&gt;ELF&lt;/code&gt;({{code|45 4c 46}}) in [[ASCII]]; these four bytes constitute the [[magic number (programming)|magic number]].
|-
| colspan=&quot;2&quot; | 0x04 || colspan=&quot;2&quot; | 1 || &lt;tt&gt;e_ident[EI_CLASS]&lt;/tt&gt;
|This byte is set to either &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; to signify 32- or 64-bit format, respectively.
|-
| colspan=&quot;2&quot; | 0x05 || colspan=&quot;2&quot; | 1 || &lt;tt&gt;e_ident[EI_DATA]&lt;/tt&gt;
|This byte is set to either &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; to signify little or big [[endianness]], respectively. This affects interpretation of multi-byte fields starting with offset &lt;code&gt;0x10&lt;/code&gt;.
|-
| colspan=&quot;2&quot; | 0x06 || colspan=&quot;2&quot; | 1 || &lt;tt&gt;e_ident[EI_VERSION]&lt;/tt&gt;
|Set to &lt;code&gt;1&lt;/code&gt; for the original and current version of ELF.
|-
| colspan=&quot;2&quot; | 0x07 || colspan=&quot;2&quot; | 1 || &lt;tt&gt;e_ident[EI_OSABI]&lt;/tt&gt;
|Identifies the target operating system [[application binary interface|ABI]].
{| class=&quot;wikitable&quot;
|-
!Value!!ABI
|-
|0x00||[[System V]]
|-
|0x01||[[HP-UX]]
|-
|0x02||[[NetBSD]]
|-
|0x03||[[Linux]]
|-
|0x04||[[GNU Hurd]]
|-
|0x06||[[Solaris (operating system)|Solaris]]
|-
|0x07||[[IBM AIX|AIX]]
|-
|0x08||[[IRIX]]
|-
|0x09||[[FreeBSD]]
|-
|0x0A||[[Tru64]]
|-
|0x0B||Novell Modesto
|-
|0x0C||[[OpenBSD]]
|-
|0x0D||[[OpenVMS]]
|-
|0x0E||[[NonStop (server computers)|NonStop Kernel]]
|-
|0x0F||[[AROS Research Operating System|AROS]]
|-
|0x10||Fenix OS
|-
|0x11||[[CloudABI]]
|}
It is often set to &lt;code&gt;0&lt;/code&gt; regardless of the target platform.{{citation needed|date=January 2020}}
|-
| colspan=&quot;2&quot; | 0x08 || colspan=&quot;2&quot; | 1 || &lt;tt&gt;e_ident[EI_ABIVERSION]&lt;/tt&gt;
|Further specifies the ABI version. Its interpretation depends on the target ABI. Linux kernel (after at least 2.6) has no definition of it&lt;ref&gt;{{cite web|url=http://lxr.linux.no/linux+v2.6.11/include/linux/elf.h#L380|title=LXR linux/include/linux/elf.h|website=linux.no|access-date=27 April 2015}}&lt;/ref&gt;, so it is ignored for statically-linked executables. In that case, offset and size of EI_PAD are &lt;code&gt;8&lt;/code&gt;.
glibc 2.12+ in case &lt;tt&gt;e_ident[EI_OSABI] == 3&lt;/tt&gt; treats this field as ABI version of the [[dynamic linker]]&lt;ref&gt;{{cite web|url=https://sourceware.org/ml/libc-alpha/2010-05/msg00000.html|title=glibc 2.12 announce}}&lt;/ref&gt;: it defines a list of dynamic linker's features&lt;ref&gt;{{cite web|url=https://sourceware.org/git/?p=glibc.git;a=blob;f=libc-abis;h=e702f6ae245c1528f5a608df8cfae4f037809de2;hb=HEAD|title=sourceware.org Git - glibc.git/blob - libc-abis}}&lt;/ref&gt;, treats &lt;tt&gt;e_ident[EI_ABIVERSION]&lt;/tt&gt; as a feature level requested by the shared object (executable or dynamic library) and refuses to load it if an unknown feature is requested, i.e. &lt;tt&gt;e_ident[EI_ABIVERSION]&lt;/tt&gt; is greater than the largest known feature&lt;ref&gt;{{cite web|url=https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/gnu/ldsodefs.h;h=253b4d934c5ca457ab5580a2a6398205e4f961ba;hb=HEAD#l32|title=sourceware.org Git - glibc.git/blob - sysdeps/gnu/ldsodefs.h}}&lt;/ref&gt;.
|-
| colspan=&quot;2&quot; | 0x09 || colspan=&quot;2&quot; | 7 || &lt;tt&gt;e_ident[EI_PAD]&lt;/tt&gt;
|currently unused
|-
| colspan=&quot;2&quot; | 0x10 || colspan=&quot;2&quot; | 2 || &lt;tt&gt;e_type&lt;/tt&gt;
| Identifies object file type.
{| class=&quot;wikitable&quot;
|-
!Value!!Type
|-
|0x00||ET_NONE
|-
|0x01||ET_REL
|-
|0x02||ET_EXEC
|-
|0x03||ET_DYN
|-
|0x04||ET_CORE
|-
|0xfe00||ET_LOOS
|-
|0xfeff||ET_HIOS
|-
|0xff00||ET_LOPROC
|-
|0xffff||ET_HIPROC
|} 
|-
| colspan=&quot;2&quot; | 0x12 || colspan=&quot;2&quot; | 2 || &lt;tt&gt;e_machine&lt;/tt&gt;
|Specifies target [[instruction set architecture]]. Some examples are:
{| class=&quot;wikitable&quot;
|-
!Value!!ISA
|-
|0x00|| No specific instruction set
|-
|0x02||[[SPARC]]
|-
|0x03||[[x86]]
|-
|0x08||[[MIPS architecture|MIPS]]
|-
|0x14||[[PowerPC]]
|-
|0x16
|[[Z/Architecture|S390]]
|-
|0x28||[[ARM architecture|ARM]]
|-
|0x2A||[[SuperH]]
|-
|0x32||[[IA-64]]
|-
|0x3E||[[amd64]]
|-
|0xB7||[[AArch64]]
|-
|0xF3||[[RISC-V]]
|}
|-
| colspan=&quot;2&quot; | 0x14 || colspan=&quot;2&quot; | 4 || &lt;tt&gt;e_version&lt;/tt&gt;
|Set to &lt;code&gt;1&lt;/code&gt; for the original version of ELF.
|-
| colspan=&quot;2&quot; | 0x18 || 4 || 8 || &lt;tt&gt;e_entry&lt;/tt&gt;
|This is the memory address of the [[entry point]] from where the process starts executing. This field is either 32 or 64 bits long depending on the format defined earlier.
|-
| 0x1C || 0x20 || 4 || 8 || &lt;tt&gt;e_phoff&lt;/tt&gt;
|Points to the start of the program header table. It usually follows the file header immediately, making the offset &lt;code&gt;0x34&lt;/code&gt; or &lt;code&gt;0x40&lt;/code&gt; for 32- and 64-bit ELF executables, respectively.
|-
| 0x20 || 0x28 || 4 || 8 || &lt;tt&gt;e_shoff&lt;/tt&gt;
|Points to the start of the section header table.
|-
| 0x24 || 0x30 || colspan=&quot;2&quot; | 4 || &lt;tt&gt;e_flags&lt;/tt&gt;
|Interpretation of this field depends on the target architecture.
|-
| 0x28 || 0x34 || colspan=&quot;2&quot; | 2 || &lt;tt&gt;e_ehsize&lt;/tt&gt;
|Contains the size of this header, normally 64 Bytes for 64-bit and 52 Bytes for 32-bit format.
|-
| 0x2A || 0x36 || colspan=&quot;2&quot; | 2 || &lt;tt&gt;e_phentsize&lt;/tt&gt;
|Contains the size of a program header table entry. &lt;!-- 0x38/0x20? --&gt;
|-
| 0x2C || 0x38|| colspan=&quot;2&quot; | 2 || &lt;tt&gt;e_phnum&lt;/tt&gt;
|Contains the number of entries in the program header table.
|-
| 0x2E || 0x3A || colspan=&quot;2&quot; | 2 || &lt;tt&gt;e_shentsize&lt;/tt&gt;
|Contains the size of a section header table entry.
|-
| 0x30 || 0x3C || colspan=&quot;2&quot; | 2 || &lt;tt&gt;e_shnum&lt;/tt&gt;
|Contains the number of entries in the section header table.
|-
| 0x32 || 0x3E || colspan=&quot;2&quot; | 2 || &lt;tt&gt;e_shstrndx&lt;/tt&gt;
|Contains index of the section header table entry that contains the section names.
|-
|0x34
|0x40
| colspan=&quot;3&quot; |
|End of ELF Header (size)
|}

=== Program header ===

The program header table tells the system how to create a process image.  It is found at file offset &lt;tt&gt;e_phoff&lt;/tt&gt;, and consists of &lt;tt&gt;e_phnum&lt;/tt&gt; entries, each with size &lt;tt&gt;e_phentsize&lt;/tt&gt;.  The layout is slightly different in [[32-bit]] ELF vs [[64-bit]] ELF, because the &lt;tt&gt;p_flags&lt;/tt&gt; are in a different structure location for alignment reasons.  Each entry is structured as:

{| class=&quot;wikitable&quot;
|+ Program header&lt;ref&gt;{{cite web|url=http://www.sco.com/developers/gabi/2000-07-17/ch5.pheader.html |title=Program Header |publisher=Sco.com |date=July 2000 |access-date=2017-04-05}}&lt;/ref&gt;
|-
! colspan=&quot;2&quot; | Offset!! colspan=&quot;2&quot; | Size (bytes) !! rowspan=&quot;2&quot; | Field !! rowspan=&quot;2&quot; | Purpose
|-
! 32-bit !! 64-bit !! 32-bit !! 64-bit
|-
| colspan=&quot;2&quot; | 0x00 || colspan=&quot;2&quot; | 4 ||&lt;tt&gt;p_type&lt;/tt&gt;||Identifies the type of the segment.
{| class=&quot;wikitable&quot;
|-
!Value!!Name!!Meaning
|-
|0x00000000||&lt;tt&gt;PT_NULL&lt;/tt&gt;
| Program header table entry unused
|-
|0x00000001||&lt;tt&gt;PT_LOAD&lt;/tt&gt;
| Loadable segment
|-
|0x00000002||&lt;tt&gt;PT_DYNAMIC&lt;/tt&gt;
| Dynamic linking information
|-
|0x00000003||&lt;tt&gt;PT_INTERP&lt;/tt&gt;
| Interpreter information
|-
|0x00000004||&lt;tt&gt;PT_NOTE&lt;/tt&gt;
| Auxiliary information 
|-
|0x00000005||&lt;tt&gt;PT_SHLIB&lt;/tt&gt;
| reserved
|-
|0x00000006||&lt;tt&gt;PT_PHDR&lt;/tt&gt;
| segment containing program header table itself
|-
|0x00000007||&lt;tt&gt;PT_TLS&lt;/tt&gt;
| Thread-Local Storage template
|-
|0x60000000||&lt;tt&gt;PT_LOOS&lt;/tt&gt;
| rowspan=&quot;4&quot; | see below
|-
|0x6FFFFFFF||&lt;tt&gt;PT_HIOS&lt;/tt&gt;
|-
|0x70000000||&lt;tt&gt;PT_LOPROC&lt;/tt&gt;
|-
|0x7FFFFFFF||&lt;tt&gt;PT_HIPROC&lt;/tt&gt;
|}
&lt;tt&gt;PT_LOOS&lt;/tt&gt; to &lt;tt&gt;PT_HIOS&lt;/tt&gt; (&lt;tt&gt;PT_LOPROC&lt;/tt&gt; to &lt;tt&gt;PT_HIPROC&lt;/tt&gt;) is an inclusive reserved ranges for operating system (processor) specific semantics.
|-
|  || 0x04 ||  || 4 ||&lt;tt&gt;p_flags&lt;/tt&gt;||Segment-dependent flags (position for 64-bit structure).
|-
| 0x04 || 0x08 || 4 || 8||&lt;tt&gt;p_offset&lt;/tt&gt;||Offset of the segment in the file image.
|-
| 0x08 || 0x10 || 4 || 8 ||&lt;tt&gt;p_vaddr&lt;/tt&gt;||Virtual address of the segment in memory.
|-
| 0x0C || 0x18 || 4 || 8 ||&lt;tt&gt;p_paddr&lt;/tt&gt;||On systems where physical address is relevant, reserved for segment's physical address.
|-
| 0x10 || 0x20 || 4 || 8 ||&lt;tt&gt;p_filesz&lt;/tt&gt;||Size in bytes of the segment in the file image. May be 0.
|-
| 0x14 || 0x28 || 4 || 8 ||&lt;tt&gt;p_memsz&lt;/tt&gt;||Size in bytes of the segment in memory. May be 0.
|-
| 0x18 ||  || 4 ||  ||&lt;tt&gt;p_flags&lt;/tt&gt;||Segment-dependent flags (position for 32-bit structure).
|-
| 0x1C || 0x30 || 4 || 8 ||&lt;tt&gt;p_align&lt;/tt&gt;||&lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; specify no alignment. Otherwise should be a positive, integral power of 2, with &lt;tt&gt;p_vaddr&lt;/tt&gt; equating &lt;tt&gt;p_offset&lt;/tt&gt; modulus &lt;tt&gt;p_align&lt;/tt&gt;.
|-
|0x20
|0x38
| colspan=&quot;3&quot; |
|End of Program Header (size)
|}

=== Section header ===
{| class=&quot;wikitable&quot;
! colspan=&quot;2&quot; |Offset
! colspan=&quot;2&quot; |Size (bytes)
! rowspan=&quot;2&quot; |Field
! rowspan=&quot;2&quot; |Purpose
|-
!32-bit
!64-bit
!32-bit
!64-bit
|-
| colspan=&quot;2&quot; |0x00
| colspan=&quot;2&quot; |4
|sh_name
|An offset to a string in the '''.shstrtab''' section that represents the name of this section
|-
| colspan=&quot;2&quot; |0x04
| colspan=&quot;2&quot; |4
|sh_type
|Identifies the type of this header.
{| class=&quot;wikitable&quot;
!Value
!Name
!Meaning
|-
|0x0
|SHT_NULL
|Section header table entry unused
|-
|0x1
|SHT_PROGBITS
|Program data
|-
|0x2
|SHT_SYMTAB
|Symbol table
|-
|0x3
|SHT_STRTAB
|String table
|-
|0x4
|SHT_RELA
|Relocation entries with addends
|-
|0x5
|SHT_HASH
|Symbol hash table
|-
|0x6
|SHT_DYNAMIC
|Dynamic linking information
|-
|0x7
|SHT_NOTE
|Notes
|-
|0x8
|SHT_NOBITS
|Program space with no data (bss)
|-
|0x9
|SHT_REL
|Relocation entries, no addends
|-
|0x0A
|SHT_SHLIB
|Reserved
|-
|0x0B
|SHT_DYNSYM
|Dynamic linker symbol table
|-
|0x0E
|SHT_INIT_ARRAY
|Array of constructors
|-
|0x0F
|SHT_FINI_ARRAY
|Array of destructors
|-
|0x10
|SHT_PREINIT_ARRAY
|Array of pre-constructors
|-
|0x11
|SHT_GROUP
|Section group
|-
|0x12
|SHT_SYMTAB_SHNDX
|Extended section indices
|-
|0x13
|SHT_NUM
|Number of defined types.
|-
|0x60000000
|SHT_LOOS
|Start OS-specific.
|-
|...
|...
|...
|}
|-
| colspan=&quot;2&quot; |0x08
|4
|8
|sh_flags
|Identifies the attributes of the section.
{| class=&quot;wikitable&quot;
!Value
!Name
!Meaning
|-
|0x1
|SHF_WRITE
|Writable
|-
|0x2
|SHF_ALLOC
|Occupies memory during execution
|-
|0x4
|SHF_EXECINSTR
|Executable
|-
|0x10
|SHF_MERGE
|Might be merged
|-
|0x20
|SHF_STRINGS
|Contains nul-terminated strings
|-
|0x40
|SHF_INFO_LINK
|'sh_info' contains SHT index
|-
|0x80
|SHF_LINK_ORDER
|Preserve order after combining
|-
|0x100
|SHF_OS_NONCONFORMING
|Non-standard OS specific handling required
|-
|0x200
|SHF_GROUP
|Section is member of a group
|-
|0x400
|SHF_TLS
|Section hold thread-local data
|-
|0x0ff00000
|SHF_MASKOS
|OS-specific
|-
|0xf0000000
|SHF_MASKPROC
|Processor-specific
|-
|0x4000000
|SHF_ORDERED
|Special ordering requirement (Solaris)
|-
|0x8000000
|SHF_EXCLUDE
|Section is excluded unless referenced or allocated (Solaris)
|}
|-
|0x0C
|0x10
|4
|8
|sh_addr
|Virtual address of the section in memory, for sections that are loaded.
|-
|0x10
|0x18
|4
|8
|sh_offset
|Offset of the section in the file image.
|-
|0x14
|0x20
|4
|8
|sh_size
|Size in bytes of the section in the file image. May be 0.
|-
|0x18
|0x28
| colspan=&quot;2&quot; |4
|sh_link
|Contains the section index of an associated section. This field is used for several purposes, depending on the type of section.
|-
|0x1C
|0x2C
| colspan=&quot;2&quot; |4
|sh_info
|Contains extra information about the section. This field is used for several purposes, depending on the type of section.
|-
|0x20
|0x30
|4
|8
|sh_addralign
|Contains the required alignment of the section. This field must be a power of two.
|-
|0x24
|0x38
|4
|8
|sh_entsize
|Contains the size, in bytes, of each entry, for sections that contain fixed-size entries. Otherwise, this field contains zero.
|-
|0x28
|0x40
| colspan=&quot;3&quot; |
|End of Section Header (size)
|}

== Tools ==
* &lt;code&gt;[[readelf]]&lt;/code&gt; is a Unix binary utility that displays information about one or more ELF files. A [[free software]] implementation is provided by [[GNU Binutils]].
* &lt;code&gt;elfutils&lt;/code&gt; provides alternative tools to [[GNU Binutils]] purely for Linux.&lt;ref&gt;{{cite web|url=https://sourceware.org/elfutils/|title=elfutils|website=sourceware.org|access-date=30 April 2017}}&lt;/ref&gt;
* &lt;code&gt;elfdump&lt;/code&gt; is a command for viewing ELF information in an ELF file, available under Solaris and [[FreeBSD]].
* &lt;code&gt;[[objdump]]&lt;/code&gt; provides a wide range of information about ELF files and other object formats. &lt;code&gt;objdump&lt;/code&gt; uses the [[Binary File Descriptor library]] as a back-end to structure the ELF data.
* The Unix &lt;code&gt;[[file (command)|file]]&lt;/code&gt; utility can display some information about ELF files, including the [[instruction set architecture]] for which the code in a relocatable, executable, or shared object file is intended, or on which an ELF [[core dump]] was produced.

== Applications ==

=== Unix-like systems ===
{{list|date=November 2016}}
The ELF format has replaced older executable formats in various environments.
It has replaced [[a.out]] and [[COFF]] formats in [[Unix-like]] operating systems:
* [[Linux]]
* [[Solaris (operating system)|Solaris]] / [[Illumos]]
* [[IRIX]]
* [[FreeBSD]]&lt;ref&gt;{{Cite web | url=https://docs.freebsd.org/doc/4.9-RELEASE/usr/share/doc/handbook/binary-formats.html |title = Binary Formats}}&lt;/ref&gt;
* [[NetBSD]]
* [[OpenBSD]]
* [[Redox (operating system)|Redox]]
* [[DragonFly BSD]]
* [[Syllable Desktop (operating system)|Syllable]]
* [[HP-UX]] (except for 32-bit PA-RISC programs which continue to use [[System Object Model (file format)|SOM]])
* [[QNX]] Neutrino
* [[MINIX]]&lt;ref&gt;{{cite web |url=http://wiki.minix3.org/en/MinixReleases |title=MinixReleases â€“ Minix Wiki |publisher=Wiki.minix3.org |access-date=2014-01-19 |url-status=dead |archiveurl=https://web.archive.org/web/20130330150621/http://wiki.minix3.org/en/MinixReleases |archivedate=2013-03-30 }}&lt;/ref&gt;

=== Non-Unix adoption ===

ELF has also seen some adoption in non-Unix operating systems, such as:
* [[OpenVMS]], in its [[Itanium]] and [[amd64]] versions&lt;ref&gt;https://vmssoftware.com/pdfs/State_of_Port_20160906.pdf&lt;/ref&gt;
* [[BeOS]] Revision 4 and later for [[x86]] based computers (where it replaced the [[Portable Executable]] format; the [[PowerPC]] version stayed with [[Preferred Executable Format]])
* [[Haiku (operating system)|Haiku]], an open source reimplementation of BeOS
* [[RISC OS]]&lt;ref&gt;{{cite web|url=http://www.riscos.info/index.php/GCCSDK |title=GCCSDK â€“ RISC OS |publisher=Riscos.info |date=2012-04-22 |access-date=2014-01-19}}&lt;/ref&gt;
* [[Stratus VOS]], in PA-RISC and x86 versions
* [[Windows 10 Anniversary Update]] using the [[Windows Subsystem for Linux]].&lt;ref&gt;{{Cite web|url=https://blogs.windows.com/windowsexperience/2016/04/06/announcing-windows-10-insider-preview-build-14316/|title=Announcing Windows 10 Insider Preview Build 14316|website=Windows Experience Blog|language=en-US|access-date=2016-04-10|date=2016-04-06}}&lt;/ref&gt;&lt;ref&gt;{{Cite web|url=http://www.zdnet.com/article/under-the-hood-of-microsofts-windows-subsystem-for-linux/|title=Under the hood of Microsoft's Windows Subsystem for Linux {{!}} ZDNet|last=Foley|first=Mary Jo|website=ZDNet|access-date=2016-08-19}}&lt;/ref&gt;
* [[SkyOS]]
* [[Fuchsia OS]]
* [[Z/TPF]]
* [[NonStop (server computers)|HPE NonStop OS]]&lt;ref&gt;{{cite web|url=http://h20628.www2.hp.com/km-ext/kmcsdirect/emr_na-c02543407-12.pdf |archive-url=https://web.archive.org/web/20180530042640/http://h20628.www2.hp.com/km-ext/kmcsdirect/emr_na-c02543407-12.pdf |url-status=dead |archive-date=2018-05-30 |title=Guardian Programmer's Guide |publisher=Hewlett Packard Enterprise |access-date=2018-05-30}} p. 44 archived from [http://h20628.www2.hp.com/km-ext/kmcsdirect/emr_na-c02543407-12.pdf the original] on 2018-5-30&lt;/ref&gt;
* [[DDC-I | Deos]]

=== Game consoles ===

Some game consoles also use ELF:
* [[PlayStation Portable]],&lt;ref&gt;PlayStation Portable use encrypted &amp; relocated ELF : PSP&lt;/ref&gt; [[PlayStation Vita]], [[PlayStation 2]], [[PlayStation 3]], [[PlayStation 4]]
* [[GP2X]]
* [[Dreamcast]]
* [[Wii]]

=== PowerPC ===

Other (operating) systems running on [[PowerPC]] that use ELF:
* [[AmigaOS 4]], the ELF executable has replaced the prior [[Extended Hunk Format]] (EHF) which was used on Amigas equipped with PPC processor expansion cards.
* [[MorphOS]]
* [[AROS Research Operating System|AROS]]

=== Mobile phones ===

Some operating systems for mobile phones and mobile devices use ELF:
* [[Symbian]] OS v9 uses E32Image&lt;ref&gt;''[https://web.archive.org/web/20091213034509/http://wiki.forum.nokia.com/index.php/E32Image Symbian OS executable file format]''&lt;/ref&gt; format that is based on the ELF file format;
* [[Sony Ericsson]], for example, the [[Sony Ericsson W800|W800i]], [[Sony Ericsson W610i|W610]], [[Sony Ericsson W300|W300]], etc.
* [[Siemens]], the SGOLD and SGOLD2 platforms: from [[Siemens C65]] to S75 and BenQ-Siemens E71/[[BenQ-Siemens EL71|EL71]];
* [[Motorola]], for example, the E398, [[Motorola SLVR L7|SLVR L7]], v360, [[Motorola RAZR V3#V3i|v3i]] (and all phone LTE2 which has the patch applied).
* [[Bada]], for example, the [[Samsung Wave S8500]].
* [[Nokia]] phones or tablets running the Maemo or the Meego OS, for example, the [[Nokia N900]].
* [[Android (operating system)|Android]] uses ELF &lt;tt&gt;.so&lt;/tt&gt; (shared object&lt;ref&gt;
{{cite book
| last1 = Rosen
| first1 = Kenneth
| last2 = Host
| first2 = Douglas
| last3 = Klee
| first3 = Rachel
| last4 = Rosinski
| first4 = Richard
| title = UNIX: The Complete Reference
| url = https://books.google.com/books?id=2Et--84HIkwC
| edition = 2
| publisher = McGraw Hill Professional
| date = 2007
| page = 707
| isbn = 9780071706988
| access-date = 2017-06-08
| quote = Dynamically linked libraries are also called shared objects (.so).
}}
&lt;/ref&gt;) libraries for the [[Java Native Interface]]. With [[Android Runtime]] (ART), the default since [[Lollipop (operating system)|Android 5.0 &quot;Lollipop&quot;]], all applications are compiled into native ELF binaries on installation.

{{Anchor|ELFPACK}}
Some phones can run ELF files through the use of a [[Patch (computing)|patch]] that adds [[Assembly Language|assembly code]] to the main [[firmware]], which is a feature known as ''ELFPack'' in the underground [[modding]] culture. The ELF file format is also used with the [[Atmel AVR]] (8-bit), [[AVR32]]&lt;ref&gt;
{{citation
| chapter-url=http://www.sco.com/developers/gabi/2009-10-26/ch4.eheader.html#e_machine
| title=System V Application Binary Interface
| chapter=Chapter 4: Object Files
| at=e_machine
| date=2009-10-26
}}
&lt;/ref&gt;
and with [[Texas Instruments]] [[MSP430]] microcontroller architectures. Some implementations of [[Open Firmware]] can also load ELF files, most notably [[Apple Inc.|Apple]]'s implementation used in almost all [[PowerPC]] machines the company produced.

== Specifications ==
&lt;!--This would probably be better presented as a table--&gt;
{{Div col|colwidth=30em}}
* Generic:
** ''[http://www.sco.com/developers/devspecs/gabi41.pdf System V Application Binary Interface]'' Edition 4.1 (1997-03-18)
** ''[http://www.sco.com/developers/gabi/latest/contents.html System V ABI Update]'' (October 2009)
* [[AMD64]]:
** ''[http://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf System V ABI, AMD64 Supplement]''
* [[ARM architecture|ARM]]:
** ''[http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044b/IHI0044B_aaelf.pdf ELF for the ARM Architecture]''
* [[IA-32]]:
** ''[http://www.sco.com/developers/devspecs/abi386-4.pdf System V ABI, Intel386 Architecture Processor Supplement]''
* [[IA-64]]:
** ''[http://refspecs.linux-foundation.org/IA64conventions.pdf Itanium Software Conventions and Runtime Guide]'' (September 2000)
* [[M32R]]:
** ''[http://www.linux-m32r.org/cmn/m32r/M32R-elf-abi.pdf M32R ELF ABI Supplement]'' Version 1.2 (2004-08-26)
* [[MIPS architecture|MIPS]]:
** ''[http://www.sco.com/developers/devspecs/mipsabi.pdf System V ABI, MIPS RISC Processor Supplement]''
** ''[http://sources.redhat.com/ml/binutils/2003-06/msg00436.html MIPS EABI documentation]'' (2003-06-11)
* [[Motorola 6800]]:
** ''[http://uclibc.org/docs/psABI-m8-16.pdf Motorola 8- and 16- bit Embedded ABI]''
* [[PA-RISC]]:
** ''[https://web.archive.org/web/20110317045038/http://refspecs.freestandards.org/elf/elf-pa.pdf ELF Supplement for PA-RISC]'' Version 1.43 (October 6, 1997)
* [[PowerPC]]:
** ''[https://web.archive.org/web/20070630123210/http://refspecs.freestandards.org/elf/elfspec_ppc.pdf System V ABI, PPC Supplement]
** ''[https://web.archive.org/web/20110723003758/http://sources-redhat.mirrors.airband.net/binutils/ppc-docs/ppc-eabi-1995-01.pdf PowerPC Embedded Application Binary Interface] 32-Bit Implementation'' (1995-10-01)
** ''[http://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi-1.9.html 64-bit PowerPC ELF Application Binary Interface Supplement]'' Version 1.9 (2004)
* [[SPARC]]:
** ''[https://web.archive.org/web/20080517110249/http://www.sparc.org/standards/psABI3rd.pdf System V ABI, SPARC Supplement]''
* [[S/390]]:
** ''[http://refspecs.linuxbase.org/ELF/zSeries/lzsabi0_s390.html S/390 32bit ELF ABI Supplement]''
* [[zSeries]]:
** ''[http://refspecs.linuxbase.org/ELF/zSeries/lzsabi0_zSeries.html zSeries 64bit ELF ABI Supplement]''
* [[Symbian]] OS 9:
** ''[https://web.archive.org/web/20080518002831/http://wiki.forum.nokia.com/index.php/E32Image_file_format_on_Symbian_OS_9 E32Image file format on Symbian OS 9]''
{{div col end}}

The [[Linux Standard Base]] (LSB) supplements some of the above specifications for architectures in which it is specified.&lt;ref&gt;{{cite web|url=http://refspecs.linuxfoundation.org/lsb.shtml|title=LSB Referenced Specifications|website=linuxfoundation.org|access-date=27 April 2015}}&lt;/ref&gt; For example, that is the case for the System V ABI, AMD64 Supplement.&lt;ref&gt;{{cite web|url=http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-AMD64/LSB-Core-AMD64/elf-amd64.html|title=Executable and Linking Format (ELF)|website=linuxfoundation.org|access-date=27 April 2015}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-AMD64/LSB-Core-AMD64/elfintro.html|title=Introduction|website=linuxfoundation.org|access-date=27 April 2015}}&lt;/ref&gt;

== 86open ==
'''86open''' was a project to form consensus on a common [[binary file]] format for [[Unix]] and [[Unix-like]] [[operating system]]s on the common [[PC compatible]] [[x86]] architecture, to encourage software developers to port to the architecture.&lt;ref&gt;{{cite web
 |url= http://www.telly.org/86open-faq
 |title= 86Open Frequently-Asked Questions
 |access-date= 2007-06-06
 |last= Leibovitch
 |first= Evan
 |authorlink =
 |date= 1997-12-23
|archiveurl= https://web.archive.org/web/20070311032337/http://www.telly.org/86open-faq &lt;!-- Bot retrieved archive --&gt; |archive-date= 2007-03-11}}&lt;/ref&gt; The initial idea was to standardize on a small subset of Spec 1170, a predecessor of the [[Single UNIX Specification]], and the GNU C Library (glibc) to enable unmodified binaries to run on the x86 Unix-like operating systems. The project was originally designated &quot;Spec 150&quot;.

The format eventually chosen was ELF, specifically the Linux implementation of ELF, after it had turned out to be a [[De facto standard|''de facto'' standard]] supported by all involved vendors and operating systems.

The group began email discussions in 1997 and first met together at the [[Santa Cruz Operation]] offices on August 22, 1997.

The steering committee was [[Marc Ewing]], Dion Johnson, Evan Leibovitch, [[Bruce Perens]], Andrew Roach, [[Bryan Wayne Sparks]] and [[Linus Torvalds]]. Other people on the project were [[Keith Bostic]], Chuck Cranor, Michael Davidson,&lt;!--At least three other Michael Davidsons in WP as of 04.2007--&gt; Chris G. Demetriou, Ulrich Drepper, Don Dugger, Steve Ginzburg, [[Jon &quot;maddog&quot; Hall]], Ron Holt, [[Jordan Hubbard]], Dave Jensen, Kean Johnston, Andrew Josey, Robert Lipe, Bela Lubkin, Tim Marsland, Greg Page,&lt;!--Three other people by that name in WP as of 04.2007--&gt; Ronald Joe Record, Tim Ruckle, Joel Silverstein, Chia-pi Tien, and Erik Troan. Operating systems and companies represented were [[BeOS]], [[BSDI]], [[FreeBSD]], [[Intel]], [[Linux]], [[NetBSD]], [[Santa Cruz Operation|SCO]] and [[Sun Microsystems|SunSoft]].

The project progressed and in mid-1998, SCO began developing [[lxrun]], an open-source [[compatibility layer]] able to run Linux binaries on [[OpenServer]], [[UnixWare]], and [[Solaris (operating system)|Solaris]]. SCO announced official support of lxrun at [[LinuxWorld Conference and Expo|LinuxWorld]] in March 1999. [[Sun Microsystems]] began officially supporting lxrun for Solaris in early 1999,&lt;ref&gt;{{cite web
 |url         = http://www.mavetju.org/mail/view_message.php?list=freebsd-emulation&amp;id=361608
 |title       = Bulletin on status of 86open at SCO
 |access-date = 2008-05-06
 |last        = Record
 |first       = Ronald
 |date        = 1998-05-21
 |url-status     = dead
 |archiveurl  = https://web.archive.org/web/20081208013909/http://www.mavetju.org/mail/view_message.php?list=freebsd-emulation&amp;id=361608
 |archivedate = 2008-12-08
}}&lt;/ref&gt; and later moved to integrated support of the Linux binary format via [[Solaris Containers for Linux Applications]].

With the BSDs having long supported Linux binaries (through a [[compatibility layer]]) and the main x86 Unix vendors having added support for the format, the project decided that Linux ELF was the format chosen by the industry and &quot;declare[d] itself dissolved&quot; on July 25, 1999.&lt;ref&gt;{{cite web
 |url= http://www.telly.org/86open/
 |title= The86open Project â€“ Final Update
 |access-date= 2007-05-06
 |last= Leibovitch
 |first= Evan
 |date= 1999-07-25
|archiveurl= https://web.archive.org/web/20070227214032/http://www.telly.org/86open/ &lt;!-- Bot retrieved archive --&gt; |archive-date= 2007-02-27}}&lt;/ref&gt;

== FatELF: universal binaries for Linux ==
FatELF is an ELF binary-format extension that adds [[fat binary]] capabilities.&lt;ref name=&quot;fatelfspec&quot;&gt;{{cite web|publisher=icculus.org| title=fatelf-specification v1| url=http://hg.icculus.org/icculus/fatelf/raw-file/tip/docs/fatelf-specification.txt| date=| access-date=2010-07-25|last=Gordon| first=Ryan}}&lt;/ref&gt; It is aimed for [[Linux]] and other [[Unix-like]] operating systems. Additionally to the CPU architecture abstraction ([[byte order]], [[word size]], [[CPU]] [[instruction set]] etc.), there is the potential advantage of software-platform abstraction e.g., binaries which support multiple kernel [[Application binary interface|ABI]] versions. As of 2014, support for FatELF is not integrated in the Linux kernel mainline.&lt;ref name=&quot;kernel1&quot;&gt;{{cite web|publisher=icculus.org| title=FatELF: Turns out I liked the uncertainty better| url=http://icculus.org/cgi-bin/finger/finger.pl?user=icculus&amp;date=2009-11-03&amp;time=19-08-04|date=|access-date=2010-07-13|last=Gordon|first=Ryan}}&lt;/ref&gt;&lt;ref name=&quot;kernel2&quot;&gt;{{cite web|publisher=osnews.com| title=Ryan Gordon Halts FatELF Project| url=http://www.osnews.com/comments/22446|date=2009-11-03|access-date=2010-07-05|last=Holwerda|first=Thom}}&lt;/ref&gt;&lt;ref name=selfanatomy&gt;{{cite web|url=https://lwn.net/Articles/392862/ |title=SELF: Anatomy of an (alleged) failure|publisher= Linux Weekly News|date= June 23, 2010|first=Joe|last=Brockmeier|access-date=2011-02-06}}&lt;/ref&gt;

== See also ==
{{Portal|Computer programming}}
* [[Application binary interface]]
* [[Comparison of executable file formats]]
* [[DWARF]]{{snd}} a format for debugging data
* [[Intel Binary Compatibility Standard]]
* [[Portable Executable]]{{snd}} format used by Windows
* [[vDSO]]{{snd}} virtual DSO
* [[Position-independent code]]

== References ==
{{Reflist|30em}}

== Further reading ==
{{Div col|colwidth=30em}}
* {{cite book |author-last=Levine |author-first=John R. |author-link=John R. Levine |title=Linkers and Loaders |date=2000 |orig-year=October 1999 |edition=1 |publisher=[[Morgan Kaufmann]] |series=The Morgan Kaufmann Series in Software Engineering and Programming |location=San Francisco, USA |isbn=1-55860-496-0 |id={{ISBN|978-1-55860-496-4}} |oclc=42413382 |url=https://www.iecc.com/linker/ |access-date=2020-01-12 |url-status=live |archive-url=http://archive.today/dqZj |archive-date=2012-12-05}} Code: [http://archive.today/0C9xT][ftp://ftp.iecc.com/pub/linker/] Errata: [https://linker.iecc.com/&lt;!-- http://archive.today/ZTdBy 2020-01-14 --&gt;]
* {{cite journal
 |title= How To Write Shared Libraries
 |last=Drepper |first=Ulrich |authorlink=Ulrich Drepper
 |version= 4.0
 |date= 2006-08-20
 |url= http://people.redhat.com/drepper/dsohowto.pdf
 |access-date= 2007-06-20
 }}
* ''[https://web.archive.org/web/20070224140341/http://www-128.ibm.com/developerworks/power/library/pa-spec12/ An unsung hero: The hardworking ELF]'' by Peter Seebach, December 20, 2005, archived from the original on February 24, 2007
* {{webarchive|url=https://web.archive.org/web/20040225174057/http://developers.sun.com/solaris/articles/elf.html |title=LibElf and GElf - A Library to Manipulate ELf Files  |date=February 25, 2004}}
* ''[https://www.linuxjournal.com/article/1060 The ELF Object File Format by Dissection]'' by Eric Youngdale (1995-05-01)
* ''[http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux]'' by Brian Raiter
* [http://www.phrack.org/issues.html?issue=61&amp;id=8#article ELF relocation into non-relocatable objects] by Julien Vanegue (2003-08-13)
* [http://www.phrack.org/issues.html?issue=63&amp;id=9#article Embedded ELF debugging without ptrace] by the ELFsh team (2005-08-01)
* ''[http://netwinder.osuosl.org/users/p/patb/public_html/elf_relocs.html Study of ELF loading and relocs]'' by Pat Beirne (1999-08-03)
{{div col end}}

== External links ==
{{Div col|colwidth=30em}}
* [https://web.archive.org/web/20130403001804/http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/binary-formats.html FreeBSD Handbook: Binary formats] (archived version)
* [http://www.freebsd.org/cgi/man.cgi?query=elf&amp;sektion=5 FreeBSD &lt;tt&gt;elf(5)&lt;/tt&gt; manual page]
* [http://www.netbsd.org/Documentation/elf.html NetBSD ELF FAQ]
* [https://manpages.debian.org/stretch/manpages/elf.5.en.html Linux &lt;tt&gt;elf(5)&lt;/tt&gt; manual page]
* [http://www.oracle.com/pls/topic/lookup?ctx=solaris11&amp;id=OSLLG Oracle Solaris Linker and Libraries Guide]
* [http://www.eresi-project.org/ The ERESI project : reverse engineering on ELF-based operating systems]
* [http://www.linuxtoday.com/developer/1999072600605PS Linux Today article on 86open] July 26, 1999
* [http://lists.debian.org/debian-announce/1997/msg00028.html Announcement of 86open on Debian Announce mailing list] October 10, 1997, [[Bruce Perens]]
* [http://www.groklaw.net/pdf/IBM-835-Exhibit_184.pdf Declaration of Ulrich Drepper (PDF)] in [[The SCO Group]] vs [[IBM]], September 19, 2006
* [http://www.groklaw.net/articlebasic.php?story=20060813114048520 86open and ELF discussion] on [[Groklaw]], August 13, 2006
{{div col end}}

{{Executables}}

[[Category:Executable file formats]]</text>
      <sha1>5ajarg9czge3632t0x69is3c53xn8f0</sha1>
    </revision>
  </page>
