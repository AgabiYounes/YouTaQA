  <page>
    <title>Elliptic-curve cryptography</title>
    <ns>0</ns>
    <id>9966</id>
    <revision>
      <id>934813177</id>
      <parentid>931920012</parentid>
      <timestamp>2020-01-08T17:04:37Z</timestamp>
      <contributor>
        <username>HoboMcJoe</username>
        <id>19059977</id>
      </contributor>
      <comment>removed duplicate NSA suite B link and replaced with the current location and archive; other minor link changes</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">'''Elliptic-curve cryptography''' ('''ECC''') is an approach to [[public-key cryptography]] based on the [[algebraic structure]] of [[elliptic curve]]s over [[finite field]]s. ECC requires smaller keys compared to non-EC cryptography (based on plain [[Finite field|Galois fields]]) to provide equivalent security.&lt;ref name=nsaQCfaq&gt;[https://cryptome.org/2016/01/CNSA-Suite-and-Quantum-Computing-FAQ.pdf Commercial National Security Algorithm Suite and Quantum Computing FAQ] U.S. National Security Agency, January 2016.&lt;/ref&gt;

Elliptic curves are applicable for [[key agreement]], [[digital signature]]s, [[Cryptographically secure pseudorandom number generator|pseudo-random generators]] and other tasks. Indirectly, they can be used for [[encryption]] by combining the key agreement with a [[Symmetric-key algorithm|symmetric encryption]] scheme. They are also used in several [[integer factorization]] [[algorithm]]s based on elliptic curves that have applications in cryptography, such as [[Lenstra elliptic-curve factorization]].

== Rationale ==
Public-key cryptography is based on the [[Intractability (complexity)#Intractability|intractability]] of certain mathematical [[Computational hardness assumption|problems]]. Early public-key systems are secure assuming that it is difficult to [[Integer factorization|factor]] a large integer composed of two or more large prime factors. For elliptic-curve-based protocols, it is assumed that finding the [[discrete logarithm]] of a random elliptic curve element with respect to a publicly known base point is infeasible: this is the &quot;elliptic curve discrete logarithm problem&quot; (ECDLP). The security of elliptic curve cryptography depends on the ability to compute a [[elliptic curve point multiplication|point multiplication]] and the inability to compute the multiplicand given the original and product points. The size of the elliptic curve determines the difficulty of the problem.

The primary benefit promised by elliptic curve cryptography is a smaller [[key size]], reducing storage and transmission requirements, i.e. that an elliptic curve group could provide the same [[Security level|level of security]] afforded by an [[RSA (cryptosystem)|RSA]]-based system with a large modulus and correspondingly larger key: for example, a 256-bit elliptic curve public key should provide comparable security to a 3072-bit RSA public key.{{Explain|date=December 2018}}

The U.S. [[National Institute of Standards and Technology]] (NIST) has endorsed elliptic curve cryptography in its [[NSA Suite B|Suite B]] set of recommended algorithms, specifically [[elliptic-curve Diffie–Hellman]] (ECDH) for key exchange and [[Elliptic Curve Digital Signature Algorithm]] (ECDSA) for digital signature.  The U.S. [[National Security Agency]] (NSA) allows their use for protecting information classified up to [[Classified information in the United States|top secret]] with 384-bit keys.&lt;ref&gt;{{cite web |url=http://www.nsa.gov/ia/programs/suiteb_cryptography/index.shtml |title=Fact Sheet NSA Suite B Cryptography |work=U.S. National Security Agency |archiveurl=https://web.archive.org/web/20090207005135/http://www.nsa.gov/ia/programs/suiteb_cryptography/index.shtml |archivedate=2009-02-07}}&lt;/ref&gt; However, in August 2015, the NSA announced that it plans to replace Suite B with a new cipher suite due to concerns about [[quantum computing]] attacks on ECC.&lt;ref name=nsaquantum /&gt;

While the RSA patent expired in 2000, there may be [[ECC patents|patents in force covering certain aspects of ECC technology]].  However some argue that the [[Federal government of the United States|US government]] elliptic curve digital signature standard (ECDSA; NIST FIPS 186-3) and certain practical ECC-based key exchange schemes (including ECDH) can be implemented without infringing them, including [[RSA Security|RSA Laboratories]]&lt;ref&gt;{{cite web | author = RSA Laboratories | url = http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/are-elliptic-curve-cryptosystems-patented.htm | title = 6.3.4 Are elliptic curve cryptosystems patented? | archive-url = https://web.archive.org/web/20161101041810/http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/are-elliptic-curve-cryptosystems-patented.htm | archive-date = 2016-11-01}}&lt;/ref&gt; and [[Daniel J. Bernstein]].&lt;ref&gt;{{cite web |first=D. J. |last=Bernstein |url=http://cr.yp.to/ecdh/patents.html |title=Irrelevant patents on elliptic-curve cryptography}}&lt;/ref&gt;

== History ==

The use of elliptic curves in cryptography was suggested independently by [[Neal Koblitz]]&lt;ref&gt;{{cite journal |first=N. |last=Koblitz |title=Elliptic curve cryptosystems |journal=Mathematics of Computation |volume=48 |issue=177 |year=1987 |pages=203–209 |doi= 10.2307/2007884|jstor=2007884 }}&lt;/ref&gt; and [[Victor S. Miller]]&lt;ref&gt;{{Cite book |first=V. |last=Miller |title=Use of elliptic curves in cryptography |journal=CRYPTO |volume=85 |year=1985 |issue= |pages=417–426 |doi=10.1007/3-540-39799-X_31 |series=Lecture Notes in Computer Science |isbn=978-3-540-16463-0 }}&lt;/ref&gt; in 1985. Elliptic curve cryptography algorithms entered wide use in 2004 to 2005.

== Theory ==
For current cryptographic purposes, an ''elliptic curve'' is a [[plane curve]] over a [[finite field]] (rather than the real numbers) which consists of the points satisfying the equation

: &lt;math&gt;y^2 = x^3 + ax + b, \, &lt;/math&gt;

along with a distinguished [[point at infinity]], denoted ∞. (The coordinates here are to be chosen from a fixed [[finite field]] of [[Characteristic (algebra)#Case of fields|characteristic]] not equal to 2 or 3, or the curve equation will be somewhat more complicated.)

This set together with the [[Elliptic curve#The group law|group operation of elliptic curves]] is an [[abelian group]], with the point at infinity as an identity element. The structure of the group is inherited from the [[Divisor (algebraic geometry)|divisor group]] of the underlying [[algebraic variety]].

: &lt;math&gt;\mathrm{Div}^0 (E) \to \mathrm{Pic}^0 (E) \simeq E, \, &lt;/math&gt;

== Cryptographic schemes ==
Several [[discrete logarithm]]-based protocols have been adapted to elliptic curves, replacing the group &lt;math&gt;(\mathbb{Z}_{p})^\times&lt;/math&gt; with an elliptic curve:
* The [[Elliptic Curve Diffie–Hellman]] (ECDH) key agreement scheme is based on the [[Diffie–Hellman]] scheme,
* The Elliptic Curve [[Integrated Encryption Scheme]] (ECIES), also known as Elliptic Curve Augmented Encryption Scheme or simply the Elliptic Curve Encryption Scheme,
* The [[Elliptic Curve DSA|Elliptic Curve Digital Signature Algorithm]] (ECDSA) is based on the [[Digital Signature Algorithm]],
* The deformation scheme using Harrison's p-adic Manhattan metric,
* The [[EdDSA|Edwards-curve Digital Signature Algorithm]] (EdDSA) is based on [[Schnorr signature]] and uses [[twisted Edwards curve]]s,
* The [[ECMQV]] key agreement scheme is based on the [[Menezes–Qu–Vanstone|MQV]] key agreement scheme,
* The [[Implicit certificate|ECQV]] implicit certificate scheme.

At the RSA Conference 2005, the [[National Security Agency]] (NSA) announced [[NSA Suite B|Suite B]] which exclusively uses ECC for digital signature generation and key exchange. The suite is intended to protect both classified and unclassified national security systems and information.&lt;ref&gt;{{cite web|url=http://www.nsa.gov/business/programs/elliptic_curve.shtml |title=The Case for Elliptic Curve Cryptography |work=NSA |url-status=dead |archiveurl=https://web.archive.org/web/20090117023500/http://www.nsa.gov/business/programs/elliptic_curve.shtml |archivedate=2009-01-17 }}&lt;/ref&gt;

Recently, a large number of cryptographic primitives based on bilinear mappings on various elliptic curve groups, such as the [[Weil pairing|Weil]] and [[Tate pairing]]s, have been introduced. Schemes based on these primitives provide efficient [[identity-based encryption]] as well as pairing-based signatures, [[signcryption]], [[key agreement]], and [[proxy re-encryption]].

== Implementation ==
Some common implementation considerations include:

=== Domain parameters ===
To use ECC, all parties must agree on all the elements defining the elliptic curve, that is, the ''domain parameters'' of the scheme. The field is defined by ''p'' in the prime case and the pair of ''m'' and ''f''&lt;!--m and f are no longer defined before this in this article--&gt; in the binary case. The elliptic curve is defined by the constants ''a'' and ''b'' used in its defining equation. Finally, the cyclic subgroup is defined by its ''generator'' (a.k.a. ''base point'') ''G''. For cryptographic application the [[order (group theory)|order]] of ''G'', that is the smallest positive number ''n'' such that &lt;math&gt;n G = \mathcal{O}&lt;/math&gt; (the [[point at infinity]] of the curve, and the [[identity element]]), is normally prime. Since ''n'' is the size of a subgroup of &lt;math&gt;E(\mathbb{F}_p)&lt;/math&gt; it follows from [[Lagrange's theorem (group theory)|Lagrange's theorem]] that the number &lt;math&gt;h = \frac{1}{n}|E(\mathbb{F}_p)|&lt;/math&gt; is an integer. In cryptographic applications this number ''h'', called the ''cofactor'', must be small (&lt;math&gt;h \le 4&lt;/math&gt;) and, preferably, &lt;math&gt;h = 1&lt;/math&gt;. To summarize: in the prime case, the domain parameters are &lt;math&gt;(p,a,b,G,n,h)&lt;/math&gt;; in the binary case, they are &lt;math&gt;(m,f,a,b,G,n,h)&lt;/math&gt;.

Unless there is an assurance that domain parameters were generated by a party trusted with respect to their use, the domain parameters ''must'' be validated before use.&lt;!--TBD: validation procedure--&gt;

The generation of domain parameters is not usually done by each participant because this involves computing [[counting points on elliptic curves|the number of points on a curve]] which is time-consuming and troublesome to implement. As a result, several standard bodies published domain parameters of elliptic curves for several common field sizes. Such domain parameters are commonly known as &quot;standard curves&quot; or &quot;named curves&quot;; a named curve can be referenced either by name or by the unique [[object identifier]] defined in the standard documents:
* [[NIST]], [https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf Recommended Elliptic Curves for Government Use]
* [[SECG]], [http://www.secg.org/sec2-v2.pdf SEC 2: Recommended Elliptic Curve Domain Parameters]
* ECC Brainpool (RFC 5639), [http://www.ecc-brainpool.org/download/Domain-parameters.pdf ECC Brainpool Standard Curves and Curve Generation]
SECG test vectors are also available.&lt;ref&gt;{{cite web |url=http://www.secg.org/download/aid-390/gec2.pdf |title=GEC 2: Test Vectors for SEC 1 |website=www.secg.org |format=PDF download |archiveurl=https://web.archive.org/web/20130606004254/http://www.secg.org/download/aid-390/gec2.pdf |archivedate=2013-06-06}}&lt;/ref&gt; NIST has approved many SECG curves, so there is a significant overlap between the specifications published by NIST and SECG. EC domain parameters may be either specified by value or by name.

If one (despite the above) wants to construct one's own domain parameters, one should select the underlying field and then use one of the following strategies to find a curve with appropriate (i.e., near prime) number of points using one of the following methods:
* Select a random curve and use a general point-counting algorithm, for example, [[Schoof's algorithm]] or [[Schoof–Elkies–Atkin algorithm]],
* Select a random curve from a family which allows easy calculation of the number of points (e.g., [[Koblitz curve]]s), or
* Select the number of points and generate a curve with this number of points using ''complex multiplication'' technique.&lt;ref&gt;{{Cite book |series=Lecture Notes in Computer Science |volume=877 |pages=250–263 |doi=10.1007/3-540-58691-1_64 |isbn=978-3-540-58691-3 |chapter=Constructing elliptic curves with given group order over large finite fields |title=Algorithmic Number Theory |year=1994 |last1=Lay |first1=Georg-Johann |last2=Zimmer |first2=Horst G. }}&lt;/ref&gt;

Several classes of curves are weak and should be avoided:
* Curves over &lt;math&gt;\mathbb{F}_{2^m}&lt;/math&gt; with non-prime ''m'' are vulnerable to [[Weil descent]] attacks.&lt;ref&gt;{{cite book |first=S. D. |last=Galbraith |first2=N. P. |last2=Smart |title=A cryptographic application of the Weil descent |work=Cryptography and Coding |year=1999 |series=Lecture Notes in Computer Science |volume=1746 |pages=799 |doi=10.1007/3-540-46665-7_23 |chapter=A Cryptographic Application of Weil Descent |isbn=978-3-540-66887-9 |chapter-url=https://semanticscholar.org/paper/bf9c4e18a3efcdf7412a124bf002b4d0cf3ade98 }}&lt;/ref&gt;&lt;ref&gt;{{cite web |first=P. |last=Gaudry |first2=F. |last2=Hess |first3=N. P. |last3=Smart |url=http://www.hpl.hp.com/techreports/2000/HPL-2000-10.pdf |title=Constructive and destructive facets of Weil descent on elliptic curves |work=Hewlett Packard Laboratories Technical Report |year=2000 }}&lt;/ref&gt;
* Curves such that ''n'' divides &lt;math&gt;p^B-1&lt;/math&gt; (where ''p'' is the characteristic of the field: ''q'' for a prime field, or &lt;math&gt;2&lt;/math&gt; for a binary field) for sufficiently small ''B'' are vulnerable to Menezes–Okamoto–Vanstone (MOV) attack&lt;ref&gt;{{cite journal |first=A. |last=Menezes |first2=T. |last2=Okamoto |first3=S. A. |last3=Vanstone |title=Reducing elliptic curve logarithms to logarithms in a finite field |journal=IEEE Transactions on Information Theory |volume=39 |issue=5 |year=1993 | doi =  10.1109/18.259647 |pages=1639–1646}}&lt;/ref&gt;&lt;ref&gt;{{cite journal |first=L. |last=Hitt |url=http://eprint.iacr.org/2006/415 |title=On an Improved Definition of Embedding Degree |journal=IACR ePrint Report |year=2006 |volume=415 }}&lt;/ref&gt; which applies usual [[discrete logarithm problem]] (DLP) in a small-degree extension field of &lt;math&gt;\mathbb{F}_p&lt;/math&gt; to solve ECDLP.  The bound ''B'' should be chosen so that [[discrete logarithm]]s in the field &lt;math&gt;\mathbb{F}_{p^B}&lt;/math&gt; are at least as difficult to compute as discrete logs on the elliptic curve &lt;math&gt;E(\mathbb{F}_q)&lt;/math&gt;.&lt;ref&gt;IEEE [http://grouper.ieee.org/groups/1363/P1363/index.html P1363], section A.12.1&lt;/ref&gt;
* Curves such that &lt;math&gt;|E(\mathbb{F}_q)| = q&lt;/math&gt; are vulnerable to the attack that maps the points on the curve to the additive group of &lt;math&gt;\mathbb{F}_q&lt;/math&gt;.&lt;ref&gt;{{cite journal |first=I. |last=Semaev |title=Evaluation of discrete logarithm in a group of ''p''-torsion points of an elliptic curve in characteristic ''p'' |journal=Mathematics of Computation |volume=67 |issue=221 |year=1998 |pages=353–356 |doi=10.1090/S0025-5718-98-00887-4 |bibcode=1998MaCom..67..353S }}&lt;/ref&gt;&lt;ref&gt;{{cite journal |first=N. |last=Smart |title=The discrete logarithm problem on elliptic curves of trace one |journal=Journal of Cryptology |volume=12 |year=1999 |issue=3 |pages=193–196 |doi=10.1007/s001459900052 |url=http://www.hpl.hp.com/techreports/97/HPL-97-128.ps |citeseerx=10.1.1.17.1880 }}&lt;/ref&gt;&lt;ref&gt;{{cite journal |first=T. |last=Satoh |first2=K. |last2=Araki |title=Fermat quotients and the polynomial time discrete log algorithm for anomalous elliptic curves |journal=Commentarii Mathematici Universitatis Sancti Pauli |volume=47 |year=1998 }}&lt;/ref&gt;

=== Key sizes ===
{{See also|Discrete logarithm records#Elliptic curves}}

Because all the fastest known algorithms that allow one to solve the ECDLP ([[baby-step giant-step]], [[Pollard's rho algorithm for logarithms|Pollard's rho]], etc.), need &lt;math&gt;O(\sqrt{n})&lt;/math&gt; steps, it follows that the size of the underlying field should be roughly twice the security parameter. For example, for 128-bit security one needs a curve over &lt;math&gt;\mathbb{F}_q&lt;/math&gt;, where &lt;math&gt;q \approx 2^{256}&lt;/math&gt;. This can be contrasted with finite-field cryptography (e.g., [[Digital Signature Algorithm|DSA]]) which requires&lt;ref&gt;NIST, [http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf Recommendation for Key Management—Part 1: general],  Special Publication 800-57, August 2005.&lt;/ref&gt; 3072-bit public keys and 256-bit private keys, and integer factorization cryptography (e.g., [[RSA (algorithm)|RSA]]) which requires a 3072-bit value of ''n'', where the private key should be just as large. However, the public key may be smaller to accommodate efficient encryption, especially when processing power is limited.

The hardest ECC scheme (publicly) broken to date had a 112-bit key for the prime field case and a 109-bit key for the binary field case. For the prime field case, this was broken in July 2009 using a cluster of over 200 [[PlayStation 3]] game consoles and could have been finished in 3.5 months using this cluster when running continuously.&lt;ref&gt;{{cite web|url=http://lacal.epfl.ch/page81774.html|title=112-bit prime ECDLP solved – LACAL|website=lacal.epfl.ch|access-date=2009-07-11|archive-url=https://web.archive.org/web/20090715060838/http://lacal.epfl.ch/page81774.html|archive-date=2009-07-15|url-status=dead}}&lt;/ref&gt; The binary field case was broken in April 2004 using 2600 computers over 17 months.&lt;ref&gt;{{cite web|url=http://www.certicom.com/index.php/2004-press-releases/36-2004-press-releases/300-solution-required-team-of-mathematicians-2600-computers-and-17-months- |title=Certicom Announces Elliptic Curve Cryptography Challenge Winner |work=Certicom |date=April 27, 2004 |url-status=dead |archiveurl=https://web.archive.org/web/20110719233751/https://www.certicom.com/index.php/2004-press-releases/36-2004-press-releases/300-solution-required-team-of-mathematicians-2600-computers-and-17-months- |archivedate=2011-07-19 }}&lt;/ref&gt;

A current project is aiming at breaking the ECC2K-130 challenge by Certicom, by using a wide range of different hardware: CPUs, GPUs, FPGA.&lt;ref&gt;{{cite web|url=http://www.ecc-challenge.info/|title=Breaking ECC2K-130|website=www.ecc-challenge.info}}&lt;/ref&gt;

=== Projective coordinates ===
A close examination of the addition rules shows that in order to add two points, one needs not only several additions and multiplications in &lt;math&gt;\mathbb{F}_q&lt;/math&gt; but also an inversion operation. The inversion (for given &lt;math&gt;x \in \mathbb{F}_q&lt;/math&gt; find &lt;math&gt;y \in \mathbb{F}_q&lt;/math&gt; such that &lt;math&gt;x y = 1&lt;/math&gt;) is one to two orders of magnitude slower&lt;ref&gt;{{cite journal|first=Y. |last=Hitchcock |first2=E. |last2=Dawson |first3=A. |last3=Clark |first4=P. |last4=Montague |url=http://anziamj.austms.org.au/V44/CTAC2001/Hitc/Hitc.pdf |title=Implementing an efficient elliptic curve cryptosystem over GF(p) on a smart card |year=2002 |journal=ANZIAM Journal |volume=44 |url-status=dead |archiveurl=https://web.archive.org/web/20060327202009/http://anziamj.austms.org.au/V44/CTAC2001/Hitc/Hitc.pdf |archivedate=2006-03-27 }}&lt;/ref&gt; than multiplication. However, points on a curve can be represented in different coordinate systems which do not require an inversion operation to add two points. Several such systems were proposed: in the ''projective'' system each point is represented by three coordinates &lt;math&gt;(X,Y,Z)&lt;/math&gt; using the following relation: &lt;math&gt;x = \frac{X}{Z}&lt;/math&gt;, &lt;math&gt;y = \frac{Y}{Z}&lt;/math&gt;; in the ''Jacobian system'' a point is also represented with three coordinates &lt;math&gt;(X,Y,Z)&lt;/math&gt;, but a different relation is used: &lt;math&gt;x = \frac{X}{Z^2}&lt;/math&gt;, &lt;math&gt;y = \frac{Y}{Z^3}&lt;/math&gt;; in the ''López–Dahab system'' the relation is &lt;math&gt;x = \frac{X}{Z}&lt;/math&gt;, &lt;math&gt;y = \frac{Y}{Z^2}&lt;/math&gt;; in the ''modified Jacobian'' system the same relations are used but four coordinates are stored and used for calculations &lt;math&gt;(X,Y,Z,aZ^4)&lt;/math&gt;; and in the ''Chudnovsky Jacobian'' system five coordinates are used &lt;math&gt;(X,Y,Z,Z^2,Z^3)&lt;/math&gt;. Note that there may be different naming conventions, for example, [[IEEE P1363]]-2000 standard uses &quot;projective coordinates&quot; to refer to what is commonly called Jacobian coordinates.&lt;!--TBD: insert formulas--&gt; An additional speed-up is possible if mixed coordinates are used.&lt;ref&gt;{{Cite book |first=H. |last=Cohen |author1-link=Henri Cohen (number theorist)|first2=A. |last2=Miyaji |author2-link=Atsuko Miyaji|first3=T. |last3=Ono |title=Efficient Elliptic Curve Exponentiation Using Mixed Coordinates |journal=Advances in Cryptology&amp;nbsp;– AsiaCrypt '98 |year=1998 |series=Lecture Notes in Computer Science |volume=1514 |pages=51–65 |doi=10.1007/3-540-49649-1_6 |isbn=978-3-540-65109-3 }}&lt;/ref&gt;

=== Fast reduction (NIST curves) ===
Reduction modulo ''p'' (which is needed for addition and multiplication) can be executed much faster if the prime ''p'' is a pseudo-[[Mersenne prime]], that is &lt;math&gt;p \approx 2^d&lt;/math&gt;; for example, &lt;math&gt;p = 2^{521} - 1&lt;/math&gt; or &lt;math&gt;p = 2^{256} - 2^{32} - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1.&lt;/math&gt; Compared to [[Barrett reduction]], there can be an order of magnitude speed-up.&lt;ref&gt;{{Cite book |first=M. |last=Brown |first2=D. |last2=Hankerson |first3=J. |last3=Lopez |first4=A. |last4=Menezes |title=Software Implementation of the NIST Elliptic Curves Over Prime Fields |journal=Topics in Cryptology&amp;nbsp;– CT-RSA 2001 |series=Lecture Notes in Computer Science |year=2001 |volume=2020 |pages=250–265 |doi=10.1007/3-540-45353-9_19 |isbn=978-3-540-41898-6 |url=http://cr.yp.to/bib/2000/brown-prime.ps |citeseerx=10.1.1.25.8619 }}&lt;/ref&gt; The speed-up here is a practical rather than theoretical one, and derives from the fact that the moduli of numbers against numbers near powers of two can be performed efficiently by computers operating on binary numbers with [[bitwise operation]]s.

The curves over &lt;math&gt;\mathbb{F}_p&lt;/math&gt; with pseudo-Mersenne ''p'' are recommended by NIST. Yet another advantage of the NIST curves is that they use ''a''&amp;nbsp;=&amp;nbsp;−3, which improves addition in Jacobian coordinates.

According to Bernstein and Lange, many of the efficiency-related decisions in NIST FIPS 186-2 are sub-optimal. Other curves are more secure and run just as fast.&lt;ref&gt;{{ cite web | author = Daniel J. Bernstein | author2 = Tanja Lange|author2-link=Tanja Lange | last-author-amp = yes | title = SafeCurves: choosing safe curves for elliptic-curve cryptography | url = https://safecurves.cr.yp.to/ | accessdate = 1 December 2013 }}&lt;/ref&gt;

== Applications ==
Elliptic curves are applicable for [[encryption]], [[digital signature]]s, [[CPRNG|pseudo-random generators]] and other tasks. They are also used in several [[integer factorization]] [[algorithm]]s that have applications in cryptography, such as [[Lenstra elliptic curve factorization]].

In 1999, NIST recommended fifteen elliptic curves. Specifically, FIPS 186-4&lt;ref&gt;{{Cite journal|last=Technology|first=National Institute of Standards and|date=2013-07-19|title=Digital Signature Standard (DSS)|url=https://csrc.nist.gov/publications/detail/fips/186/4/final|language=en}}&lt;/ref&gt; has ten recommended finite fields:
* Five prime fields &lt;math&gt;\mathbb{F}_p&lt;/math&gt; for certain primes ''p'' of sizes 192, 224, 256, 384, and {{Not a typo|521}} bits. For each of the prime fields, one elliptic curve is recommended.
* Five binary fields &lt;math&gt;\mathbb{F}_{2^m}&lt;/math&gt; for ''m'' equal 163, 233, 283, 409, and 571. For each of the binary fields, one elliptic curve and one [[Neal Koblitz|Koblitz]] curve was selected.

The NIST recommendation thus contains a total of five prime curves and ten binary curves. The curves were ostensibly chosen for optimal security and implementation efficiency.&lt;ref&gt;FIPS PUB 186-3, [http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf Digital Signature Standard (DSS)].&lt;/ref&gt;

In 2013, ''[[The New York Times]]'' stated that [[Dual EC DRBG|Dual Elliptic Curve Deterministic Random Bit Generation]] (or Dual_EC_DRBG) had been included as a NIST national standard due to the influence of [[NSA]], which had included a deliberate weakness in the algorithm and the recommended elliptic curve.&lt;ref&gt;{{cite news |last1=Perlroth|first1=Nicole|last2=Larson|first2=Jeff|last3=Shane|first3=Scott |title=N.S.A. Able to Foil Basic Safeguards of Privacy on Web |url=https://www.nytimes.com/2013/09/06/us/nsa-foils-much-internet-encryption.html |accessdate=28 October 2018 |newspaper=New York Times |date=2013-09-05}}&lt;/ref&gt; [[RSA Security]] in September 2013 issued an advisory recommending that its customers discontinue using any software based on Dual_EC_DRBG.&lt;ref&gt;Kim Zetter, [https://www.wired.com/threatlevel/2013/09/rsa-advisory-nsa-algorithm/ RSA Tells Its Developer Customers: Stop Using NSA-Linked Algorithm] ''[[Wired (magazine)|Wired]]'', 19 September 2013. &quot;Recommending against the use of SP 800-90A Dual Elliptic Curve Deterministic Random Bit Generation: NIST strongly recommends that, pending the resolution of the security concerns and the re-issuance of SP 800-90A, the Dual_EC_DRBG, as specified in the January 2012 version of SP 800-90A, no longer be used.&quot;&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://csrc.nist.gov/publications/PubsDrafts.html#SP-800-90-A+Rev+1+B+and+C|title=Search – CSRC|website=csrc.nist.gov}}&lt;/ref&gt; In the wake of the exposure of Dual_EC_DRBG as &quot;an NSA undercover operation&quot;, cryptography experts have also expressed concern over the security of the NIST recommended elliptic curves,&lt;ref&gt;[[Bruce Schneier]] (5 September) &quot;I no longer trust the constants. I believe the NSA has manipulated them through their relationships with industry.&quot; See [http://it.slashdot.org/firehose.pl?op=view&amp;type=story&amp;sid=13/09/11/1224252 Are the NIST Standard Elliptic Curves Back-doored?], ''[[Slashdot]]'', 11 September 2013.&lt;/ref&gt; suggesting a return to encryption based on non-elliptic-curve groups.

Elliptic curve cryptography is used by the cryptocurrency [[Bitcoin]].&lt;ref&gt;{{cite web|url=https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch04.asciidoc|title=Mastering Bitcoin 2nd Edition – Andreas M. Antonopoulos|website=github.com|date=2018-10-05}}&lt;/ref&gt;

== Security ==

=== Side-channel attacks ===
Unlike most other [[Discrete Logarithm|DLP]] systems (where it is possible to use the same procedure for squaring and multiplication), the EC addition is significantly different for doubling (''P'' = ''Q'') and general addition (''P'' ≠ ''Q'') depending on the coordinate system used. Consequently, it is important to counteract [[side channel attack]]s (e.g., timing or [[Power analysis|simple/differential power analysis attacks]]) using, for example, fixed pattern window (a.k.a. comb) methods{{clarify|date=December 2011}}&lt;ref&gt;{{cite journal |first=M. |last=Hedabou |first2=P. |last2=Pinel |first3=L. |last3=Beneteau |url=http://eprint.iacr.org/2004/342.pdf |title=A comb method to render ECC resistant against Side Channel Attacks |year=2004 }}&lt;/ref&gt; (note that this does not increase computation time). Alternatively one can use an [[Edwards curve]]; this is a special family of elliptic curves for which doubling and addition can be done with the same operation.&lt;ref&gt;{{cite web | url=http://blog.cr.yp.to/20140323-ecdsa.html | title=Cr.yp.to: 2014.03.23: How to design an elliptic-curve signature system}}&lt;/ref&gt; Another concern for ECC-systems is the danger of [[Differential fault analysis|fault attacks]], especially when running on [[smart card]]s.&lt;ref&gt;See, for example, {{Cite book |title=Differential Fault Attacks on Elliptic Curve Cryptosystems |first=Ingrid |last=Biehl |first2=Bernd |last2=Meyer |first3=Volker |last3=Müller |journal=Advances in Cryptology&amp;nbsp;– CRYPTO 2000 |series=[[Lecture Notes in Computer Science]] |volume=1880 |year=2000 |pages=131–146 |doi=10.1007/3-540-44598-6_8 |isbn=978-3-540-67907-3 |url=http://www.iacr.org/archive/crypto2000/18800131/18800131.pdf }}&lt;/ref&gt;

=== Backdoors ===
Cryptographic experts have expressed concerns that the [[National Security Agency]] has inserted a [[kleptographic]] backdoor into at least one elliptic curve-based pseudo random generator.&lt;ref&gt;[https://www.schneier.com/essay-198.html &quot;Did NSA Put a Secret Backdoor in New Encryption Standard?&quot;]. ''www.schneier.com''.&lt;/ref&gt; Internal memos leaked by former NSA contractor, [[Edward Snowden]], suggest that the NSA put a backdoor in the [[Dual EC DRBG]] standard.&lt;ref&gt;{{Cite web|title = Government Announces Steps to Restore Confidence on Encryption Standards|url = http://bits.blogs.nytimes.com/2013/09/10/government-announces-steps-to-restore-confidence-on-encryption-standards/|website = NY Times – Bits Blog|accessdate = 2015-11-06|date = 2013-09-10}}&lt;/ref&gt; One analysis of the possible backdoor concluded that an adversary in possession of the algorithm's secret key could obtain encryption keys given only 32 bytes of PRNG output.&lt;ref&gt;http://rump2007.cr.yp.to/15-shumow.pdf&lt;/ref&gt;

The SafeCurves project has been launched in order to catalog curves that are easy to securely implement and are designed in a fully publicly verifiable way to minimize the chance of a backdoor.&lt;ref&gt;{{Cite web | url = http://safecurves.cr.yp.to/ | title = SafeCurves: choosing safe curves for elliptic-curve cryptography | first1 = Daniel J. | last1 = Bernstein | first2 = Tanja | last2 = Lange | access-date = October 1, 2016}}&lt;/ref&gt;

=== Quantum computing attacks ===
[[Shor's algorithm]] can be used to break elliptic curve cryptography by computing discrete logarithms on a hypothetical [[Quantum computing|quantum computer]]. The latest quantum resource estimates for breaking a curve with a 256-bit modulus (128-bit security level) are 2330 qubits and 126 billion [[Toffoli gate]]s.&lt;ref&gt;{{Cite arxiv |eprint=1706.06752 |last1=Roetteler |first1=Martin |title=Quantum resource estimates for computing elliptic curve discrete logarithms |last2=Naehrig |first2=Michael |last3=Svore |first3=Krysta M. |last4=Lauter |first4=Kristin |class=quant-ph |year=2017 }}&lt;/ref&gt; In comparison, using Shor's algorithm to break the [[RSA (cryptosystem)|RSA]] algorithm requires 4098 qubits and 5.2 trillion Toffoli gates for a 2048-bit RSA key, suggesting that ECC is an easier target for quantum computers than RSA. All of these figures vastly exceed any quantum computer that has ever been built, and estimates place the creation of such computers as a decade or more away.

[[Supersingular isogeny key exchange|Supersingular Isogeny Diffie–Hellman Key Exchange]] provides a post-quantum secure form of elliptic curve cryptography by using [[isogenies]] to implement [[Diffie–Hellman]] key exchanges.  This key exchange uses much of the same field arithmetic as existing elliptic curve cryptography and requires computational and transmission overhead similar to many currently used public key systems.&lt;ref&gt;{{cite web|last=De Feo|first=Luca|title=Towards quantum-resistant cryptosystems from supersingular elliptic curve isogenies|url=https://eprint.iacr.org/2011/506|work=Cryptology ePrint Archive, Report 2011/506|publisher=IACR|accessdate=3 May 2014|author2=Jao, Plut|archiveurl=https://web.archive.org/web/20140503190338/http://eprint.iacr.org/2011/506|archivedate=2014-05-03|url-status=dead|year=2011}}&lt;/ref&gt;

In August 2015, NSA announced that it planned to transition &quot;in the not distant future&quot; to a new cipher suite that is resistant to [[quantum computing|quantum]] attacks. &quot;Unfortunately, the growth of elliptic curve use has bumped up against the fact of continued progress in the research on quantum computing, necessitating a re-evaluation of our cryptographic strategy.&quot;&lt;ref name=&quot;nsaquantum&quot;&gt;{{cite web|url=https://apps.nsa.gov/iaarchive/programs/iad-initiatives/cnsa-suite.cfm|title=Commercial National Security Algorithm Suite|last=|first=|date=19 August 2015|website=www.nsa.gov|url-status=live|archive-url=https://web.archive.org/web/20190604080321/https://apps.nsa.gov/iaarchive/programs/iad-initiatives/cnsa-suite.cfm|archive-date=2019-06-04|access-date=2020-01-08}}&lt;/ref&gt;

=== Invalid curve attack ===

When ECC is used in [[virtual machine]]s, an attacker may use an invalid curve to get a complete PDH private key.&lt;ref name = &quot;Cohen, Seclist, 2019&quot; &gt; {{ cite web | url = https://seclists.org/fulldisclosure/2019/Jun/46 | title = AMD-SEV: Platform DH key recovery via invalid curve attack (CVE-2019-9836) | access-date = 4 July 2019 | first = Cfir | last = Cohen | date = 25 June 2019 | website = Seclist Org | quote = The SEV elliptic-curve (ECC) implementation was found to be vulnerable to an invalid curve attack. At launch-start command, an attacker can send small order ECC points not on the official NIST curves, and force the SEV firmware to multiply a small order point by the firmware’s private DH scalar. | format = html | archive-url = https://web.archive.org/web/20190702011957/https://seclists.org/fulldisclosure/2019/Jun/46 | archive-date = 2 July 2019 | df = dmy-all }} &lt;/ref&gt;

== Patents ==
{{Main|ECC patents}}

At least one ECC scheme ([[ECMQV]]) and some implementation techniques are covered by patents.

== Alternative representations ==
Alternative representations of elliptic curves include:
* [[Hessian curves]]
* [[Edwards curves]]
* [[Twisted curves]]
* [[Twisted Hessian curves]]
* [[Twisted Edwards curve]]
* [[Doubling-oriented Doche–Icart–Kohel curve]]
* [[Tripling-oriented Doche–Icart–Kohel curve]]
* [[Jacobian curve]]
* [[Montgomery curve|Montgomery curves]]

== See also ==
* [[Cryptocurrency]]
* [[Curve25519]]
* [[FourQ]]
* [[DNSCurve]]
* [[ECC patents]]
* [[ECDH]]
* [[Elliptic Curve Digital Signature Algorithm]]
* [[ECMQV]]
* [[Elliptic curve point multiplication]]
* [[Homomorphic Signatures for Network Coding]]
* [[Hyperelliptic curve cryptography]]
* [[Pairing-based cryptography]]
* [[Public-key cryptography]]
* [[Quantum cryptography]]

== Notes ==
{{Reflist|30em}}

== References ==
{{refbegin}}
* [[SECG|Standards for Efficient Cryptography Group (SECG)]], [http://www.secg.org/sec1-v2.pdf SEC 1: Elliptic Curve Cryptography], Version 1.0, September 20, 2000. ([https://web.archive.org/web/20141111191126/http://www.secg.org/sec1-v2.pdf archived] as if Nov 11, 2014)
* D. Hankerson, A. Menezes, and S.A. Vanstone, ''Guide to Elliptic Curve Cryptography'', Springer-Verlag, 2004.
* I. Blake, G. Seroussi, and N. Smart, ''Elliptic Curves in Cryptography'', London Mathematical Society 265, Cambridge University Press, 1999.
* I. Blake, G. Seroussi, and N. Smart, editors, ''Advances in Elliptic Curve Cryptography'', London Mathematical Society 317, Cambridge University Press, 2005.
* L. Washington, ''Elliptic Curves: Number Theory and Cryptography'', Chapman &amp; Hall / CRC, 2003.
* [https://web.archive.org/web/20090117023500/http://www.nsa.gov/business/programs/elliptic_curve.shtml The Case for Elliptic Curve Cryptography], National Security Agency (archived January 17, 2009)
* [http://www.certicom.com/index.php/ecc-tutorial Online Elliptic Curve Cryptography Tutorial], Certicom Corp. (archived [https://web.archive.org/web/20160309033943/http://certicom.com/index.php/ecc-tutorial here] as of March 3, 2016)
* K. Malhotra, S. Gardner, and R. Patz, Implementation of Elliptic-Curve Cryptography on Mobile Healthcare Devices, Networking, Sensing and Control, 2007 IEEE International Conference on, London, 15–17 April 2007 Page(s):239–244
* Saikat Basu, [http://ijns.jalaxy.com.tw/contents/ijns-v14-n2/ijns-2012-v14-n2-p101-108.pdf A New Parallel Window-Based Implementation of the Elliptic Curve Point Multiplication in Multi-Core Architectures], International Journal of Network Security, Vol. 13, No. 3, 2011, Page(s):234–241 (archived [https://web.archive.org/web/20160304121101/http://ijns.jalaxy.com.tw/contents/ijns-v14-n2/ijns-2012-v14-n2-p101-108.pdf here] as of March 4, 2016)
* Christof Paar, Jan Pelzl, [https://archive.is/20121208212741/http://wiki.crypto.rub.de/Buch/movies.php  &quot;Elliptic Curve Cryptosystems&quot;], Chapter 9 of &quot;Understanding Cryptography, A Textbook for Students and Practitioners&quot;. (companion web site contains online cryptography course that covers elliptic curve cryptography), Springer, 2009. (archived [https://archive.is/20121208212741/http://wiki.crypto.rub.de/Buch/movies.php here] as of April 20, 2016)
* Luca De Feo, David Jao, Jerome Plut, [http://eprint.iacr.org/2011/506 Towards quantum-resistant cryptosystems from supersingular elliptic curve isogenies], Springer 2011. (archived [https://web.archive.org/web/20120507200407/http://eprint.iacr.org/2011/506 here] as of May 7, 2012)
{{refend}}
* [http://archive.numdam.org/ARCHIVE/MSMF/MSMF_1978__57_/MSMF_1978__57__1_0/MSMF_1978__57__1_0.pdf Jacques Vélu, ''Courbes elliptiques (...)'', Société Mathématique de France, '''57''', 1-152, Paris, 1978.]

{{Commons|Elliptic curve}}

{{Cryptography navbox|public-key}}
{{Algebraic curves navbox}}

[[Category:Elliptic curve cryptography]]
[[Category:Public-key cryptography]]
[[Category:Finite fields]]</text>
      <sha1>g8acv8c479uoo5berbheed9ymrcshak</sha1>
    </revision>
  </page>
