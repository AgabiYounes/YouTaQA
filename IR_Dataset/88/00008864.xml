  <page>
    <title>Delaunay triangulation</title>
    <ns>0</ns>
    <id>8864</id>
    <revision>
      <id>940541266</id>
      <parentid>939784206</parentid>
      <timestamp>2020-02-13T03:50:33Z</timestamp>
      <contributor>
        <username>GreenC bot</username>
        <id>27823944</id>
      </contributor>
      <comment>Rescued 1 archive link; remove 1 link. [[User:GreenC/WaybackMedic_2.5|Wayback Medic 2.5]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{short description|Triangulation method named after Boris Delaunay}}
[[File:Delaunay_circumcircles_vectorial.svg|right|thumb|280px|A Delaunay triangulation in the plane with circumcircles shown]] 
In [[mathematics]] and [[computational geometry]],  a '''Delaunay triangulation''' (also known as a '''Delone triangulation''') for a given set '''P''' of [[Isolated point|discrete points]] in a plane is a [[Point set triangulation|triangulation]] DT('''P''') such that no point in '''P''' is inside the [[Circumcircle#Triangles|circumcircle]] of any [[triangle]] in DT('''P'''). Delaunay triangulations maximize the minimum angle of all the angles of the triangles in the triangulation; they tend to avoid [[sliver triangle]]s. The triangulation is named after [[Boris Delaunay]] for his work on this topic from 1934.&lt;ref name=&quot;Delaunay1934&quot;&gt;{{cite journal
  | last = Delaunay
  | first = Boris
  | authorlink = Boris Delaunay
  | title = Sur la sphère vide
  | journal = Bulletin de l'Académie des Sciences de l'URSS, Classe des Sciences Mathématiques et Naturelles
  | volume = 6
  | pages = 793–800
  | year = 1934
  | url = http://mi.mathnet.ru/eng/izv4937}}
&lt;/ref&gt;

For a set of points on the same line there is no Delaunay triangulation (the notion of triangulation is degenerate for this case).  For four or more points on the same circle (e.g., the vertices of a rectangle) the Delaunay triangulation is not unique: each of the two possible triangulations that split the [[Quadrilateral|quadrangle]] into two triangles satisfies the &quot;Delaunay condition&quot;, i.e., the requirement that the circumcircles of all triangles have empty interiors.

By considering circumscribed spheres, the notion of Delaunay triangulation extends to three and higher dimensions.  Generalizations are possible to [[metric (mathematics)|metrics]] other than [[Euclidean distance]]. However, in these cases a Delaunay triangulation is not guaranteed to exist or be unique.

==Relationship with the Voronoi diagram==
{{multiple image
 | align     = right
 | direction = horizontal
 | header    =
 | header_align = center
 | header_background = 
 | footer    = 
 | footer_align = 
 | footer_background = 
 | width     = 200
 | height    = 200

 | image1    = Delaunay_circumcircles_centers.svg
 | alt1      = Circumcircles in the Delaunay triangulation.
 | caption1  = The Delaunay triangulation with all the circumcircles and their centers (in red).

 | image2    = Delaunay_Voronoi.svg
 | alt2      = Connecting the triangulation's circumcenters gives the Voronoi diagram.
 | caption2  = Connecting the centers of the circumcircles produces the [[Voronoi diagram]] (in red).
}}
The Delaunay [[triangulation (geometry)|triangulation]] of a [[discrete space|discrete]] point set '''P''' in [[general position]] corresponds to the [[dual graph]] of the [[Voronoi diagram]] for '''P'''.
The [[circumscribed circle|circumcenter]]s of Delaunay triangles are the vertices of the Voronoi diagram.
In the 2D case, the Voronoi vertices are connected via edges, that can be derived from adjacency-relationships of the Delaunay triangles: If two triangles share an edge in the Delaunay triangulation, their circumcenters are to be connected with an edge in the Voronoi tesselation.

Special cases where this relationship does not hold, or is ambiguous, include cases like:
* Three or more [[Collinearity|collinear]] points, where the circumcircles are of infinite [[Radius|radii]].
* Four or more points on a perfect circle, where the triangulation is ambiguous and all circumcenters are trivially identical.
*Edges of the Voronoi diagram going to infinity are not defined by this relation in case of a finite set '''P'''. If the Delaunay [[triangulation (geometry)|triangulation]] is calculated using the [[Bowyer–Watson algorithm]] then the circumcenters of triangles having a common vertex with the &quot;super&quot; triangle should be ignored. Edges going to infinity start from a circumcenter and they are perpendicular to the common edge between the kept and ignored triangle.

== ''d''-dimensional Delaunay ==
For a set '''P''' of points in the (''d''-dimensional) [[Euclidean space]], a '''Delaunay triangulation''' is a [[Triangulation (geometry)|triangulation]] DT('''P''') such that no point in '''P''' is inside the [[circumcircle|circum-hypersphere]] of any ''d''-[[simplex]] in DT('''P''').  It is known&lt;ref name=&quot;Delaunay1934&quot;/&gt; that there exists a unique Delaunay triangulation for '''P''' if '''P''' is a set of points in ''[[general position]]''; that is, the affine hull of '''P''' is ''d''-dimensional and no set of ''d''&amp;nbsp;+&amp;nbsp;2 points in '''P''' lie on the boundary of a ball whose interior does not intersect '''P'''.

The problem of finding the Delaunay triangulation of a set of points in ''d''-dimensional [[Euclidean space]] can be converted to the problem of finding the [[convex hull]] of a set of points in (''d''&amp;nbsp;+&amp;nbsp;1)-dimensional space. This may be done by giving each point ''p'' an extra coordinate equal to |''p''|&lt;sup&gt;2&lt;/sup&gt;, thus turning it into a hyper-paraboloid (this is termed &quot;lifting&quot;); taking the bottom side of the convex hull (as the top end-cap faces upwards away from the origin, and must be discarded); and mapping back to ''d''-dimensional space by deleting the last coordinate. As the convex hull is unique, so is the triangulation, assuming all facets of the convex hull are [[simplex|simplices]]. Nonsimplicial facets only occur when ''d''&amp;nbsp;+&amp;nbsp;2 of the original points lie on the same ''d''-[[hypersphere]], i.e., the points are not in general position. &lt;ref&gt;{{cite web |last1=Fukuda |first1=Komei |title=Frequently Asked Questions in Polyhedral Computation |url=https://www.cs.mcgill.ca/~fukuda/soft/polyfaq/node30.html#voro:dela_def |website=www.cs.mcgill.ca |accessdate=29 October 2018}}&lt;/ref&gt;

==Properties==
[[File: Example steps in Delauney triangularization.png|thumb|Example steps]]
[[File:Delaunay triangulation does not minimize edge length.gif|thumb|Each frame of the animation shows a Delaunay triangulation of the four points. Halfway through, the triangulating edge flips showing that the Delaunay triangulation maximizes the minimum angle, not the edge-length of the triangles.]]

Let ''n'' be the number of points and ''d'' the number of dimensions.

*The union of all simplices in the triangulation is the convex hull of the points.
*The Delaunay triangulation contains ''O''(''n''&lt;sup&gt;⌈''d''&amp;nbsp;/&amp;nbsp;2⌉&lt;/sup&gt;) simplices.&lt;ref&gt;{{cite journal
  | last = Seidel
  | first = Raimund
  | title = The upper bound theorem for polytopes: an easy proof of its asymptotic version
  | journal = [[Computational Geometry (journal)|Computational Geometry]]
  | volume = 5
  | pages = 115–116
  | year = 1995
  | doi = 10.1016/0925-7721(95)00013-Y
  | issue = 2 }}&lt;/ref&gt;
*In the plane (''d'' = 2), if there are ''b'' vertices on the convex hull, then any triangulation of the points has at most 2''n''&amp;nbsp;&amp;minus;&amp;nbsp;2&amp;nbsp;&amp;minus;&amp;nbsp;''b'' triangles, plus one exterior face (see [[Euler characteristic]]).
*If points are distributed according to a [[Poisson process]] in the plane with constant intensity, then each vertex has on average six surrounding triangles. More generally for the same process in ''d'' dimensions the average number of neighbors is a constant depending only on ''d''.&lt;ref&gt;{{citation
 |last        = Meijering
 |first       = J. L.
 |journal     = Philips Research Reports
 |pages       = 270–290
 |title       = Interface area, edge length, and number of vertices in crystal aggregates with random nucleation
 |url         = http://www.extra.research.philips.com/hera/people/aarts/_Philips%20Bound%20Archive/PRRep/PRRep-08-1953-270.pdf
 |volume      = 8
 |year        = 1953
 }}{{dead link|date=February 2020|bot=medic}}{{cbignore|bot=medic}}. As cited by {{citation
 | last = Dwyer | first = Rex A.
 | doi = 10.1007/BF02574694
 | issue = 4
 | journal = [[Discrete and Computational Geometry]]
 | mr = 1098813
 | pages = 343–367
 | title = Higher-dimensional Voronoĭ diagrams in linear expected time
 | volume = 6
 | year = 1991}}.&lt;/ref&gt;
*In the plane, the Delaunay triangulation maximizes the minimum angle.  Compared to any other triangulation of the points, the smallest angle in the Delaunay triangulation is at least as large as the smallest angle in any other.  However, the Delaunay triangulation does not necessarily minimize the maximum angle.&lt;ref&gt;{{citation
 |last1        = Edelsbrunner
 |first1       = Herbert
 |author1-link = Herbert Edelsbrunner
 |last2        = Tan
 |first2       = Tiow Seng
 |last3        = Waupotitsch
 |first3       = Roman
 |doi          = 10.1137/0913058
 |issue        = 4
 |journal      = SIAM Journal on Scientific and Statistical Computing
 |mr           = 1166172
 |pages        = 994–1008
 |title        = An ''O''(''n''&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;log&amp;nbsp;''n'') time algorithm for the minmax angle triangulation
 |volume       = 13
 |year         = 1992
 |url          = http://www.comp.nus.edu.sg/~tants/Paper/mma.pdf
 |url-status      = live
 |archiveurl   = https://web.archive.org/web/20170209121806/http://www.comp.nus.edu.sg/~tants/Paper/mma.pdf
 |archivedate  = 2017-02-09
|citeseerx = 10.1.1.66.2895
 }}.&lt;/ref&gt; The Delaunay triangulation also does not necessarily minimize the length of the edges. 
*A circle circumscribing any Delaunay triangle does not contain any other input points in its interior.
*If a circle passing through two of the input points doesn't contain any other input points in its interior, then the segment connecting the two points is an edge of a Delaunay triangulation of the given points.
* Each triangle of the Delaunay triangulation of a set of points in ''d''-dimensional spaces corresponds to a facet of [[convex hull]] of the projection of the points onto a (''d''&amp;nbsp;+&amp;nbsp;1)-dimensional [[paraboloid]], and vice versa.
* The closest neighbor ''b'' to any point ''p'' is on an edge ''bp'' in the Delaunay triangulation since the [[nearest neighbor graph]] is a subgraph of the Delaunay triangulation.
* The Delaunay triangulation is a [[geometric spanner]]: In the plane (''d'' = 2), the shortest path between two vertices, along Delaunay edges, is known to be no longer than &lt;math&gt;\frac{4\pi}{3\sqrt{3}} \approx 2.418&lt;/math&gt; times the Euclidean distance between them.&lt;ref&gt;{{citation
 | last1 = Keil | first1 = J. Mark
 | last2 = Gutwin | first2 = Carl A.
 | doi = 10.1007/BF02187821
 | issue = 1
 | journal = [[Discrete and Computational Geometry]]
 | mr = 1134449
 | pages = 13–28
 | title = Classes of graphs which approximate the complete Euclidean graph
 | volume = 7
 | year = 1992}}.&lt;/ref&gt;

== Visual Delaunay definition: Flipping ==
From the above properties an important feature arises: Looking at two triangles ABD and BCD with the common edge BD (see figures), if the sum of the angles α and γ is less than or equal to 180°, the triangles meet the Delaunay condition.

This is an important property because it allows the use of a ''flipping'' technique. If two triangles do not meet the Delaunay condition, switching the common edge BD for the common edge AC produces two triangles that do meet the Delaunay condition:

&lt;gallery&gt;
  File:Delaunay_geometry.png|This triangulation does not meet the Delaunay condition (the sum of α and γ is bigger than 180°).
  File:Point inside circle - Delaunay condition broken.svg |This pair of triangles does not meet the Delaunay condition (the circumcircle contains more than three points).
  File:Edge Flip - Delaunay condition ok.svg|''Flipping'' the common edge produces a valid Delaunay triangulation for the four points.

&lt;/gallery&gt;

This operation is called a ''flip'', and can be generalised to three and higher dimensions.&lt;ref name=&quot;DRS&quot;&gt;{{cite book
 | last1 = De Loera | first1 = Jesús A. | author-link1 = Jesús A. De Loera
 | last2 = Rambau | first2 = Jörg
 | last3 = Santos | first3 = Francisco | author-link3 = Francisco Santos Leal
 | year = 2010
 | title = Triangulations, Structures for Algorithms and Applications
 | series = Algorithms and Computation in Mathematics
 | volume = 25
 | publisher = Springer}}&lt;/ref&gt;

==Algorithms==
[[File:Point inside circle - Delaunay condition broken - Labelled.svg|thumb|We need a robust and fast way to detect if point ''D'' lies in the circumcircle of ''A'', ''B'', ''C'']]
Many algorithms for computing Delaunay triangulations rely on fast operations for detecting when a point is within a triangle's circumcircle and an efficient data structure for storing triangles and edges.  In two dimensions, one way to detect if point ''D'' lies in the circumcircle of ''A'', ''B'', ''C'' is to evaluate the [[determinant]]:&lt;ref&gt;{{cite journal
  | last1 = Guibas
  | first1 = Leonidas
  | authorlink1 = Leonidas J. Guibas
  | last2 = Stolfi
  | first2 = Jorge
  | authorlink2 = Jorge Stolfi
  | title = Primitives for the manipulation of general subdivisions and the computation of Voronoi
  | journal = [[ACM Transactions on Graphics]]
  | volume = 4
  | pages = 74–123
  | year = 1985
  | doi = 10.1145/282918.282923
  | issue = 2
  }}
&lt;/ref&gt;

: &lt;math&gt;
\begin{align}
&amp; \begin{vmatrix}
A_x &amp; A_y &amp; A_x^2 + A_y^2 &amp; 1\\
B_x &amp; B_y &amp; B_x^2 + B_y^2 &amp; 1\\
C_x &amp; C_y &amp; C_x^2 + C_y^2 &amp; 1\\
D_x &amp; D_y &amp; D_x^2 + D_y^2 &amp; 1
\end{vmatrix}
= \begin{vmatrix}
A_x - D_x &amp; A_y - D_y &amp; (A_x^2 - D_x^2) + (A_y^2 - D_y^2) \\
B_x - D_x &amp; B_y - D_y &amp; (B_x^2 - D_x^2) + (B_y^2 - D_y^2) \\
C_x - D_x &amp; C_y - D_y &amp; (C_x^2 - D_x^2) + (C_y^2 - D_y^2)
\end{vmatrix} \\[8pt]
= {} &amp; \begin{vmatrix}
A_x - D_x &amp; A_y - D_y &amp; (A_x - D_x)^2 + (A_y - D_y)^2 \\
B_x - D_x &amp; B_y - D_y &amp; (B_x - D_x)^2 + (B_y - D_y)^2 \\
C_x - D_x &amp; C_y - D_y &amp; (C_x - D_x)^2 + (C_y - D_y)^2
\end{vmatrix} &gt; 0
\end{align}
&lt;/math&gt;

When ''A'', ''B'' and ''C'' are sorted in a [[counterclockwise]] order, this determinant is positive if and only if ''D'' lies inside the circumcircle.

===Flip algorithms===
As mentioned above, if a triangle is non-Delaunay, we can flip one of its edges.  This leads to a straightforward algorithm: construct any triangulation of the points, and then flip edges until no triangle is non-Delaunay. Unfortunately, this can take Ω(''n''&lt;sup&gt;2&lt;/sup&gt;) edge flips.&lt;ref name=&quot;hurtado&quot;&gt;{{cite journal
  | last = Hurtado
  | first = F.
  |author1-link = Ferran Hurtado
  |author2=M. Noy |author3=J. Urrutia
   | title = Flipping Edges in Triangulations
  | journal = Discrete &amp; Computational Geometry
  | number = 3
  | pages = 333–346
  | year = 1999
  | volume = 22
  | id = 
  | doi = 10.1007/PL00009464 }}&lt;/ref&gt; While this algorithm can be generalised to three and higher dimensions, its convergence is not guaranteed in these cases, as it is conditioned to the connectedness of the underlying [[flip graph]]: this graph is connected for two dimensional sets of points, but may be disconnected in higher dimensions.&lt;ref name=&quot;DRS&quot;/&gt;

===Incremental===
The most straightforward way of efficiently computing the Delaunay triangulation is to repeatedly add one vertex at a time, retriangulating the affected parts of the graph.  When a vertex ''v'' is added, we split in three the triangle that contains ''v'', then we apply the flip algorithm.  Done naïvely, this will take O(''n'') time: we search through all the triangles to find the one that contains ''v'', then we potentially flip away every triangle.  Then the overall runtime is O(''n''&lt;sup&gt;2&lt;/sup&gt;).

If we insert vertices in random order, it turns out (by a somewhat intricate proof) that each insertion will flip, on average, only O(1) triangles – although sometimes it will flip many more.&lt;ref&gt;{{cite journal
  | last1 = Guibas
  | first1 = Leonidas J.
  | authorlink1 = Leonidas J. Guibas
  | last2 = Knuth
  | first2 = Donald E.
  | authorlink2 = Donald Knuth
  | last3 = Sharir
  | first3 = Micha
  | authorlink3 = Micha Sharir
  | title = Randomized incremental construction of Delaunay and Voronoi diagrams
  | journal = [[Algorithmica]]
  | volume = 7
  | issue = 1–6
 | pages = 381–413
  | year = 1992
  | doi = 10.1007/BF01758770}}&lt;/ref&gt;
This still leaves the point location time to improve.  We can store the history of the splits and flips performed: each triangle stores a pointer to the two or three triangles that replaced it.  To find the triangle that contains ''v'', we start at a root triangle, and follow the pointer that points to a triangle that contains ''v'', until we find a triangle that has not yet been replaced.  On average, this will also take O(log ''n'') time.  Over all vertices, then, this takes O(''n'' log ''n'') time.&lt;ref name=&quot;deBerg&quot;&gt;{{cite book
 |last         = de Berg
 |first        = Mark
 |author2      = Otfried Cheong
 |author2-link = Otfried Cheong
 |author3      = Marc van Kreveld
 |author4      = Mark Overmars
 |author4-link = Mark Overmars
 |title        = Computational Geometry: Algorithms and Applications
 |publisher    = Springer-Verlag
 |year         = 2008
 |url          = http://www.cs.uu.nl/geobook/interpolation.pdf
 |isbn         = 978-3-540-77973-5
 |url-status      = live
 |archiveurl   = https://web.archive.org/web/20091028054315/http://www.cs.uu.nl/geobook/interpolation.pdf
 |archivedate  = 2009-10-28
}}&lt;/ref&gt;  While the technique extends to higher dimension (as proved by Edelsbrunner and Shah&lt;ref&gt;{{cite journal
  | last1 = Edelsbrunner
  | first1 = Herbert
  | authorlink1 = Herbert Edelsbrunner
  | last2 = Shah
  | first2 = Nimish
  | title = Incremental Topological Flipping Works for Regular Triangulations
  | journal = [[Algorithmica]]
  | volume = 15
  | pages = 223–241
  | year = 1996
  | url = http://www.springerlink.com/content/4gdja72vx1qmg44x/?p=a74909a339d9498cbff326f08b084b4c&amp;pi=1
  | doi = 10.1007/BF01975867
  | issue = 3}}{{dead link|date=February 2020|bot=medic}}{{cbignore|bot=medic}}&lt;/ref&gt;), the runtime can be exponential in the dimension even if the final Delaunay triangulation is small.

The [[Bowyer–Watson algorithm]] provides another approach for incremental construction.  It gives an alternative to edge flipping for computing the Delaunay triangles containing a newly inserted vertex.

Unfortunately the flipping-based algorithms are generally hard to be parallelized, since adding some certain point (e.g. the center point of a wagon wheel) can lead to up to O(''n'') consecutive flips.  Blelloch et al.&lt;ref name=&quot;Parallel&quot;&gt;Blelloch, Guy; Gu, Yan; Shun, Julian; and Sun, Yihan. [https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf Parallelism in Randomized Incremental Algorithms] {{webarchive|url=https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf |date=2018-04-25 }}. SPAA 2016. doi:10.1145/2935764.2935766.&lt;/ref&gt; proposed another version of incremental algorithm based on rip-and-tent, which is practical and highly parallelized with polylogarithmic [[Analysis of parallel algorithms|span]].

===Divide and conquer===
A [[divide and conquer algorithm]] for triangulations in two dimensions was developed by Lee and Schachter and improved by [[Leonidas J. Guibas|Guibas]] and [[Jorge Stolfi|Stolfi]]&lt;ref&gt;{{cite web|url=http://www.geom.uiuc.edu/~samuelp/del_project.html|title=COMPUTING CONSTRAINED DELAUNAY TRIANGULATIONS IN THE PLANE|website=www.geom.uiuc.edu|accessdate=25 April 2018|url-status=live|archiveurl=https://web.archive.org/web/20170922181219/http://www.geom.uiuc.edu/~samuelp/del_project.html|archivedate=22 September 2017}}&lt;/ref&gt; and later by Dwyer.  In this algorithm, one recursively draws a line to split the vertices into two sets. The Delaunay triangulation is computed for each set, and then the two sets are merged along the splitting line.  Using some clever tricks, the merge operation can be done in time O(''n''), so the total running time is O(''n''&amp;nbsp;log&amp;nbsp;''n'').&lt;ref name=&quot;Leach1992&quot;&gt;{{cite journal | first = G. | last = Leach | title = ''Improving Worst-Case Optimal Delaunay Triangulation Algorithms.'' | pages = 15 | citeseerx = 10.1.1.56.2323 |date=June 1992 }}&lt;/ref&gt;

For certain types of point sets, such as a uniform random distribution, by intelligently picking the splitting lines the expected time can be reduced to O(''n''&amp;nbsp;log&amp;nbsp;log&amp;nbsp;''n'') while still maintaining worst-case performance.

A divide and conquer paradigm to performing a triangulation in ''d'' dimensions is presented in &quot;DeWall: A fast divide and conquer Delaunay triangulation algorithm in E&lt;sup&gt;''d''&lt;/sup&gt;&quot; by P. Cignoni, C. Montani, R. Scopigno.&lt;ref&gt;{{cite journal | last = Cignoni | first = P. |author2=C. Montani |author3=R. Scopigno | year = 1998 | title = DeWall: A fast divide and conquer Delaunay triangulation algorithm in E&lt;sup&gt;d&lt;/sup&gt; | journal = Computer-Aided Design | volume = 30 | issue = 5 | pages = 333–341 | doi = 10.1016/S0010-4485(97)00082-1 }}&lt;/ref&gt;

The divide and conquer algorithm has been shown to be the fastest DT generation technique.&lt;ref&gt;A Comparison of Sequential Delaunay Triangulation Algorithms {{cite web |url=http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf |title=Archived copy |accessdate=2010-08-18 |url-status=live |archiveurl=https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/%7Ejrs/meshpapers/SuDrysdale.pdf |archivedate=2012-03-08 }}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=https://www.cs.cmu.edu/~quake/tripaper/triangle2.html|title=Triangulation Algorithms and Data Structures|website=www.cs.cmu.edu|accessdate=25 April 2018|url-status=live|archiveurl=https://web.archive.org/web/20171010072746/https://www.cs.cmu.edu/~quake/tripaper/triangle2.html|archivedate=10 October 2017}}&lt;/ref&gt;

===Sweephull===

Sweephull&lt;ref&gt;{{cite web|url=http://www.s-hull.org/paper/s_hull.pdf|title=S-hull|author=|date=|website=s-hull.org|accessdate=25 April 2018}}&lt;/ref&gt; is a hybrid technique for 2D Delaunay triangulation that uses a radially propagating sweep-hull, and a flipping algorithm. The sweep-hull is created sequentially by iterating a radially-sorted set of 2D points, and connecting triangles to the visible part of the convex hull, which gives a non-overlapping triangulation. One can build a convex hull in this manner so long as the order of points guarantees no point would fall within the triangle. But, radially sorting should minimize flipping by being highly Delaunay to start. This is then paired with a final iterative triangle flipping step.

== Applications ==
The [[Euclidean minimum spanning tree]] of a set of points is a subset of the Delaunay triangulation of the same points, and this can be exploited to compute it efficiently.

For modelling terrain or other objects given a set of sample points, the Delaunay triangulation gives a nice set of triangles to use as polygons in the model.  In particular, the Delaunay triangulation avoids narrow triangles (as they have large circumcircles compared to their area). See [[triangulated irregular network]].

Delaunay triangulations can be used to determine the density or intensity of points samplings by means of the [[Delaunay tessellation field estimator|Delaunay tessellation field estimator (DTFE)]].

[[File:Delaunay Triangulation (100 Points).svg|right|thumb|250px|The Delaunay triangulation of a random set of 100 points in a plane.]]
Delaunay triangulations are often used to build meshes for space-discretised solvers such as the [[finite element method]] and the [[finite volume method]] of physics simulation, because of the angle guarantee and because fast triangulation algorithms have been developed.  Typically, the domain to be meshed is specified as a coarse [[simplicial complex]]; for the mesh to be numerically stable, it must be refined, for instance by using [[Ruppert's algorithm]].

The increasing popularity of [[finite element method]] and [[boundary element method]] techniques increases the incentive to improve automatic meshing algorithms. However, all of these algorithms can create distorted and even unusable grid elements. Fortunately, several techniques exist which can take an existing mesh and improve its quality. For example, smoothing (also referred to as mesh refinement) is one such method, which repositions nodal locations so as to minimize element distortion. The [[stretched grid method]] allows the generation of pseudo-regular meshes that meet the Delaunay criteria easily and quickly in a one-step solution.

[[Constrained Delaunay triangulation]] has found applications in path planning in automated driving &lt;ref&gt;{{cite conference 
| url = https://wiki.epfl.ch/edicpublic/documents/Candidacy%20exam/anderson-contrained_based_planning_and_control.pdf
| title = Constraint-based planning and control for safe, semi-autonomous operation of vehicles
| author1 = Sterling J Anderson
| author2 =  Sisir B. Karumanchi
| author3 = Karl Iagnemma
| date = 5 July 2012
| publisher =  IEEE
| book-title = 2012 IEEE Intelligent Vehicles Symposium
| doi = 10.1109/IVS.2012.6232153
}}&lt;/ref&gt;

== See also ==
{{Div col|colwidth=30em}}
* [[Beta skeleton]]
* [[Centroidal Voronoi tessellation]]
* [[Ruppert's algorithm]] – Delaunay refinement
* [[Delone set]] – also known as a Delaunay set
* [[Disordered hyperuniformity]]
* [[Gabriel graph]]
* [[Giant's Causeway]]
* [[Gradient pattern analysis]]
* [[Farthest-first traversal]] – incremental Voronoi insertion
* [[Linde–Buzo–Gray algorithm]]
* [[Lloyd's algorithm]] – Voronoi iteration 
* [[Meyer set]]
* [[Pisot–Vijayaraghavan number]]
* [[Pitteway triangulation]]
* [[Plesiohedron]]
* [[Hamming bound]] – sphere-packing bound
* [[Salem number]]
* [[Steiner point (triangle)]]
* [[Urquhart graph]]
* [[Convex hull algorithms]]
* [[Quasicrystal]]
* [[Quasitriangulation]]
{{div col end}}

== References ==
{{reflist}}

== External links ==
* Delaunay triangulation in [[CGAL]], the Computational Geometry Algorithms Library:
** [[Mariette Yvinec]]. [http://www.cgal.org/Pkg/Triangulation2 2D Triangulation]. Retrieved April 2010.
** Pion, Sylvain; [[Monique Teillaud|Teillaud, Monique]]. [http://www.cgal.org/Pkg/Triangulation3 3D Triangulations]. Retrieved April 2010.
** Hornus, Samuel; Devillers, Olivier; Jamin, Clément. [http://www.cgal.org/Pkg/Triangulations dD Triangulations]. 
** Hert, Susan; Seel, Michael. [http://www.cgal.org/Pkg/ConvexHullD dD Convex Hulls and Delaunay Triangulations]. Retrieved April 2010. 
* &quot;[http://mathworld.wolfram.com/DelaunayTriangulation.html Delaunay triangulation]&quot;. Wolfram MathWorld. Retrieved April 2010.

{{DEFAULTSORT:Delaunay Triangulation}}
[[Category:Triangulation (geometry)]]
[[Category:Geometric algorithms]]</text>
      <sha1>gm0y319q1g2cpb27fy8imau9ypwx21u</sha1>
    </revision>
  </page>
