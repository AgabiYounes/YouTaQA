  <page>
    <title>Chomsky normal form</title>
    <ns>0</ns>
    <id>7850</id>
    <revision>
      <id>936624270</id>
      <parentid>931384977</parentid>
      <timestamp>2020-01-20T00:40:35Z</timestamp>
      <contributor>
        <username>Ingratis</username>
        <id>35681141</id>
      </contributor>
      <minor />
      <comment>expand contractions</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">In [[formal language]] theory, a [[context-free grammar]] ''G'' is said to be in '''Chomsky normal form''' (first described by [[Noam Chomsky]])&lt;ref&gt;{{cite journal |last=Chomsky |first=Noam |date=1959 |title=On Certain Formal Properties of Grammars |journal=Information and Control |volume=2 |issue=2 |pages=137–167 |doi=10.1016/S0019-9958(59)90362-6 }}&lt;/ref&gt; if all of its [[production (computer science)|production rules]] are of the form:&lt;ref name=&quot;Hopcroft.Ullman.1979&quot;&gt;{{cite book |last1=Hopcroft |first1=John E. |last2=Ullman |first2=Jeffrey D. |date=1979 |title=Introduction to Automata Theory, Languages and Computation |publisher=Addison-Wesley Publishing |location=Reading, Massachusetts |isbn=978-0-201-02988-8 |url=https://archive.org/details/introductiontoau00hopc }}&lt;/ref&gt;{{rp|92–93,106}}
: ''A'' → ''BC'', &amp;nbsp; or
: ''A'' → ''a'', &amp;nbsp; or
: ''S'' → ε,
where ''A'', ''B'', and ''C'' are [[nonterminal symbol]]s, ''a'' is a [[terminal symbol]] (a symbol that represents a constant value), ''S'' is the start symbol, and ε denotes the [[empty string]].  Also, neither ''B'' nor ''C'' may be the [[Start symbol (formal languages)|start symbol]], and the third production rule can only appear if ε is in ''L''(''G''), the language produced by the context-free grammar ''G''.

Every grammar in Chomsky normal form is [[Context-free grammar|context-free]], and conversely, every context-free grammar can be transformed into an [[Equivalence (formal languages)|equivalent]] one&lt;ref group=note&gt;that is, one that produces the same [[Context free grammar#Context-free language|language]]&lt;/ref&gt; which is in Chomsky normal form and has a size no larger than the square of the original grammar's size.

==Converting a grammar to Chomsky normal form==

To convert a grammar to Chomsky normal form, a sequence of simple transformations is applied in a certain order; this is described in most textbooks on automata theory.&lt;ref name=&quot;Hopcroft.Ullman.1979&quot;/&gt;{{rp|87–94}}&lt;ref&gt;{{cite book |last1=Hopcroft |first1=John E. |last2=Motwani |first2=Rajeev |last3=Ullman |first3=Jeffrey D. |date=2006 |title=Introduction to Automata Theory, Languages, and Computation |edition=3rd |publisher=Addison-Wesley |isbn=978-0-321-45536-9 |url-access=registration |url=https://archive.org/details/introductiontoau0000hopc }} Section 7.1.5, p.272&lt;/ref&gt;&lt;ref&gt;{{cite book |last=Rich |first=Elaine |date=2007 |title=Automata, Computability, and Complexity: Theory and Applications |publisher=Prentice-Hall |edition=1st |isbn=978-0132288064}}{{page needed|date=May 2015}}&lt;/ref&gt;&lt;ref&gt;{{cite book |last=Wegener |first=Ingo |date=1993 |title=Theoretische Informatik - Eine algorithmenorientierte Einführung |language=German |series=Leitfäden und Mongraphien der Informatik |publisher=B. G. Teubner |location=Stuttgart |isbn=978-3-519-02123-0}} Section 6.2 &quot;Die Chomsky-Normalform für kontextfreie Grammatiken&quot;, p. 149–152&lt;/ref&gt;
The presentation here follows Hopcroft, Ullman (1979), but is adapted to use the transformation names from Lange, Leiß (2009).&lt;ref name=&quot;Lange.Leis.2009&quot;&gt;{{cite journal |last1=Lange |first1=Martin |last2=Leiß |first2=Hans |date=2009 |title=To CNF or not to CNF? An Efficient Yet Presentable Version of the CYK Algorithm |journal=Informatica Didactica |volume=8 |url=http://ddi.cs.uni-potsdam.de/InformaticaDidactica/LangeLeiss2009.pdf }}&lt;/ref&gt;&lt;ref group=note&gt;For example, Hopcroft, Ullman (1979) merged '''TERM''' and '''BIN''' into a single transformation.&lt;/ref&gt; Each of the following transformations establishes one of the properties required for Chomsky normal form.

===START: Eliminate the start symbol from right-hand sides===

Introduce a new start symbol ''S''&lt;sub&gt;0&lt;/sub&gt;, and a new rule 
:''S''&lt;sub&gt;0&lt;/sub&gt; → ''S'', 
where ''S'' is the previous start symbol.
This does not change the grammar's produced language, and ''S''&lt;sub&gt;0&lt;/sub&gt; will not occur on any rule's right-hand side.

===TERM: Eliminate rules with nonsolitary terminals===

To eliminate each rule 
:''A'' → ''X''&lt;sub&gt;1&lt;/sub&gt; ... ''a'' ... ''X''&lt;sub&gt;''n''&lt;/sub&gt;
with a terminal symbol ''a'' being not the only symbol on the right-hand side, introduce, for every such terminal, a new nonterminal symbol ''N''&lt;sub&gt;''a''&lt;/sub&gt;, and a new rule 
:''N''&lt;sub&gt;''a''&lt;/sub&gt; → ''a''. 
Change every rule 
:''A'' → ''X''&lt;sub&gt;1&lt;/sub&gt; ... ''a'' ... ''X''&lt;sub&gt;''n''&lt;/sub&gt; 
to 
:''A'' → ''X''&lt;sub&gt;1&lt;/sub&gt; ... ''N''&lt;sub&gt;''a''&lt;/sub&gt; ... ''X''&lt;sub&gt;''n''&lt;/sub&gt;.
If several terminal symbols occur on the right-hand side, simultaneously replace each of them by its associated nonterminal symbol.
This does not change the grammar's produced language.&lt;ref name=&quot;Hopcroft.Ullman.1979&quot;/&gt;{{rp|92}}

===BIN: Eliminate right-hand sides with more than 2 nonterminals===

Replace each rule 
:''A'' → ''X''&lt;sub&gt;1&lt;/sub&gt; ''X''&lt;sub&gt;2&lt;/sub&gt; ... ''X''&lt;sub&gt;''n''&lt;/sub&gt; 
with more than 2 nonterminals ''X''&lt;sub&gt;1&lt;/sub&gt;,...,''X''&lt;sub&gt;''n''&lt;/sub&gt; by rules 
:''A'' → ''X''&lt;sub&gt;1&lt;/sub&gt; ''A''&lt;sub&gt;1&lt;/sub&gt;, 
:''A''&lt;sub&gt;1&lt;/sub&gt; → ''X''&lt;sub&gt;2&lt;/sub&gt; ''A''&lt;sub&gt;2&lt;/sub&gt;, 
:... , 
:''A''&lt;sub&gt;''n''-2&lt;/sub&gt; → ''X''&lt;sub&gt;''n''-1&lt;/sub&gt; ''X''&lt;sub&gt;''n''&lt;/sub&gt;, 
where ''A''&lt;sub&gt;''i''&lt;/sub&gt; are new nonterminal symbols.
Again, this does not change the grammar's produced language.&lt;ref name=&quot;Hopcroft.Ullman.1979&quot;/&gt;{{rp|93}}

===DEL: Eliminate ε-rules===

An ε-rule is a rule of the form 
:''A'' → ε, 
where ''A'' is not ''S''&lt;sub&gt;0&lt;/sub&gt;, the grammar's start symbol.

To eliminate all rules of this form, first determine the set of all nonterminals that derive ε.
Hopcroft and Ullman (1979) call such nonterminals ''nullable'', and compute them as follows:
* If a rule ''A'' → ε exists, then ''A'' is nullable.
* If a rule ''A'' → ''X''&lt;sub&gt;1&lt;/sub&gt; ... ''X''&lt;sub&gt;''n''&lt;/sub&gt; exists, and every single ''X''&lt;sub&gt;''i''&lt;/sub&gt; is nullable, then ''A'' is nullable, too.

Obtain an intermediate grammar by replacing each rule 
:''A'' → ''X''&lt;sub&gt;1&lt;/sub&gt; ... ''X''&lt;sub&gt;''n''&lt;/sub&gt; 
by all versions with some nullable ''X''&lt;sub&gt;''i''&lt;/sub&gt; omitted.
By deleting in this grammar each ε-rule, unless its left-hand side is the start symbol, the transformed grammar is obtained.&lt;ref name=&quot;Hopcroft.Ullman.1979&quot;/&gt;{{rp|90}}

For example, in the following grammar, with start symbol ''S''&lt;sub&gt;0&lt;/sub&gt;,
: ''S''&lt;sub&gt;0&lt;/sub&gt; → ''AbB'' | ''C''
: ''B'' → ''AA'' | ''AC''
: ''C'' → ''b'' | ''c''
: ''A'' → ''a'' | ε
the nonterminal ''A'', and hence also ''B'', is nullable, while neither ''C'' nor ''S''&lt;sub&gt;0&lt;/sub&gt; is.
Hence the following intermediate grammar is obtained:&lt;ref group=note&gt;indicating a kept and omitted nonterminal ''N'' by ''{{color|#006000|N}}'' and ''{{color|#ffc0c0|&lt;s&gt;N&lt;/s&gt;}}'', respectively&lt;/ref&gt;
: ''S''&lt;sub&gt;0&lt;/sub&gt; → ''{{color|#006000|A}}b{{color|#006000|B}}'' | ''{{color|#006000|A}}b{{color|#ffc0c0|&lt;s&gt;B&lt;/s&gt;}}'' | ''{{color|#ffc0c0|&lt;s&gt;A&lt;/s&gt;}}b{{color|#006000|B}}'' | ''{{color|#ffc0c0|&lt;s&gt;A&lt;/s&gt;}}b{{color|#ffc0c0|&lt;s&gt;B&lt;/s&gt;}}'' &amp;nbsp; | &amp;nbsp; ''C''
: ''B'' → ''{{color|#006000|AA}}'' | ''{{color|#ffc0c0|&lt;s&gt;A&lt;/s&gt;}}{{color|#006000|A}}'' | ''{{color|#006000|A}}{{color|#ffc0c0|&lt;s&gt;A&lt;/s&gt;}}'' | ''{{color|#ffc0c0|&lt;s&gt;A&lt;/s&gt;}}ε{{color|#ffc0c0|&lt;s&gt;A&lt;/s&gt;}}'' &amp;nbsp; | &amp;nbsp; ''{{color|#006000|A}}C'' | ''{{color|#ffc0c0|&lt;s&gt;A&lt;/s&gt;}}C''
: ''C'' → ''b'' | ''c''
: ''A'' → ''a'' | ε
In this grammar, all ε-rules have been &quot;[[inlining|inlined]] at the call site&quot;.&lt;ref group=note&gt;If the grammar had a rule ''S''&lt;sub&gt;0&lt;/sub&gt; → ε, it could not be &quot;inlined&quot;, since it had no &quot;call sites&quot;. Therefore it could not be deleted in the next step.&lt;/ref&gt;
In the next step, they can hence be deleted, yielding the grammar:
: ''S''&lt;sub&gt;0&lt;/sub&gt; → ''AbB'' | ''Ab'' | ''bB'' | ''b'' &amp;nbsp; | &amp;nbsp; ''C''
: ''B'' → ''AA'' | ''A'' &amp;nbsp; | &amp;nbsp; ''AC'' | ''C''
: ''C'' → ''b'' | ''c''
: ''A'' → ''a''
This grammar produces the same language as the original example grammar, viz. {''ab'',''aba'',''abaa'',''abab'',''abac'',''abb'',''abc'',''b'',''bab'',''bac'',''bb'',''bc'',''c''}, but has no ε-rules.

===UNIT: Eliminate unit rules===

A unit rule is a rule of the form 
:''A'' → ''B'', 
where ''A'', ''B'' are nonterminal symbols.
To remove it, for each rule 
:''B'' →  ''X''&lt;sub&gt;1&lt;/sub&gt; ... ''X''&lt;sub&gt;''n''&lt;/sub&gt;, 
where  ''X''&lt;sub&gt;1&lt;/sub&gt; ... ''X''&lt;sub&gt;''n''&lt;/sub&gt; is a string of nonterminals and terminals, add rule 
:''A'' →  ''X''&lt;sub&gt;1&lt;/sub&gt; ... ''X''&lt;sub&gt;''n''&lt;/sub&gt; 
unless this is a unit rule which has already been (or is being) removed.

===Order of transformations===

{| class=&quot;wikitable collapsible&quot; style=&quot;float:right&quot;
|-
|+ Mutual preservation&lt;BR&gt;of transformation results
|-
| colspan=6 | Transformation ''X'' {{color|#004000|always preserves}} ({{Aye}})&lt;BR&gt;resp. {{color|#400000|may destroy}} ({{Nay}}) the result of ''Y'':
|-
! {{diagonal split header|''X''|''Y''}}
! START  ||TERM||BIN||DEL||UNIT
|-
! START 
|        || {{Ya}}   || {{Ya}}  || {{Na}}  || {{Na}} 
|-
! TERM 
| {{Ya}} ||          || {{Na}}  || {{Ya}}  || {{Ya}} 
|-
! BIN 
| {{Ya}} || {{Ya}}   ||         || {{Ya}}  || {{Ya}} 
|-
! DEL 
| {{Ya}} || {{Ya}}   || {{Ya}}  ||         || {{Na}} 
|-
! UNIT 
| {{Ya}} || {{Ya}}   || {{Ya}}  ||{{Ya|text=({{Aye}})&lt;sup&gt;*&lt;/sup&gt;}}||  
|-
| colspan=6 | &lt;sup&gt;*&lt;/sup&gt;'''UNIT''' preserves the result of '''DEL'''&lt;BR&gt;&amp;nbsp; if '''START''' had been called before.
|}

When choosing the order in which the above transformations are to be applied, it has to be considered that some transformations may destroy the result achieved by other ones. For example, '''START''' will re-introduce a unit rule if it is applied after '''UNIT'''. The table shows which orderings are admitted.

Moreover, the worst-case bloat in grammar size&lt;ref group=note&gt;i.e. written length, measured in symbols&lt;/ref&gt; depends on the transformation order. Using |''G''| to denote the size of the original grammar ''G'', the size blow-up in the worst case may range from |''G''|&lt;sup&gt;2&lt;/sup&gt; to 2&lt;sup&gt;2 |G|&lt;/sup&gt;, depending on the transformation algorithm used.&lt;ref name=&quot;Lange.Leis.2009&quot;/&gt;{{rp|7}} The blow-up in grammar size depends on the order between '''DEL''' and '''BIN'''. It may be exponential when '''DEL''' is done first, but is linear otherwise. '''UNIT''' can incur a quadratic blow-up in the size of the grammar.&lt;ref name=&quot;Lange.Leis.2009&quot;/&gt;{{rp|5}} The orderings '''START''','''TERM''','''BIN''','''DEL''','''UNIT''' and '''START''','''BIN''','''DEL''','''UNIT''','''TERM''' lead to the least (i.e. quadratic) blow-up.

==Example==

[[File:Syntax tree of arithmetic expression wrt Chomsky normal form grammar.gif|thumb|[[Abstract syntax tree]] of the [[expression (mathematics)|arithmetic expression]] &quot;''a''^2+4*''b''&quot; wrt. the example grammar ('''top''') and its Chomsky normal form ('''bottom''')]]
The following grammar, with start symbol ''Expr'', describes a simplified version of the set of all syntactical valid arithmetic expressions in programming languages like [[C (programming language)|C]] or [[Algol60]]. Both ''number'' and ''variable'' are considered terminal symbols here for simplicity, since in a [[compiler front-end]] their internal structure is usually not considered by the [[parser]]. The terminal symbol &quot;^&quot; denoted [[exponentiation]] in Algol60.

:{|
|-
| ''Expr'' 
| → ''Term'' 
| | |  ''Expr'' ''AddOp'' ''Term''
| | | ''AddOp'' ''Term''  
|-
| ''Term'' 
| → ''Factor''  
| | |  ''Term'' ''MulOp'' ''Factor''
|-
| ''Factor'' 
| → ''Primary''  
| | |  ''Factor'' ^ ''Primary''
|-
| ''Primary'' 
| → ''number''  
| | |  ''variable''  
| | |  ( ''Expr'' )
|-
| ''AddOp''
| → +
| | | &amp;minus;
|-
| ''MulOp''
| → *
| | | /
|}

In step &quot;START&quot; of the [[#Converting a grammar to Chomsky normal form|above]] conversion algorithm, just a rule ''S''&lt;sub&gt;0&lt;/sub&gt;→''Expr'' is added to the grammar.
After step &quot;TERM&quot;, the grammar looks like this:

:{|
|-
| ''S''&lt;sub&gt;0&lt;/sub&gt;
| → ''Expr'' 
|-
| ''Expr'' 
| → ''Term'' 
| | |  ''Expr'' ''AddOp'' ''Term''
| | | ''AddOp'' ''Term''  
|-
| ''Term'' 
| → ''Factor''  
| | |  ''Term'' ''MulOp'' ''Factor''
|-
| ''Factor'' 
| → ''Primary''  
| | |  ''Factor'' ''PowOp'' ''Primary''
|-
| ''Primary'' 
| → ''number''  
| | |  ''variable''  
| | |  ''Open'' ''Expr'' ''Close''
|-
| ''AddOp''
| → +
| | | &amp;minus;
|-
| ''MulOp''
| → *
| | | /
|-
| ''PowOp''
| → ^
|-
| ''Open''
| → (
|-
| ''Close''
| → )
|}

After step &quot;BIN&quot;, the following grammar is obtained:

:{|
|-
| ''S''&lt;sub&gt;0&lt;/sub&gt;
| → ''Expr'' 
|-
| ''Expr'' 
| → ''Term'' 
| | |  ''Expr'' ''AddOp_Term''
| | | ''AddOp'' ''Term''  
|-
| ''Term'' 
| → ''Factor''  
| | |  ''Term'' ''MulOp_Factor''
|-
| ''Factor'' 
| → ''Primary''  
| | |  ''Factor'' ''PowOp_Primary''
|-
| ''Primary'' 
| → ''number''  
| | |  ''variable''  
| | |  ''Open'' ''Expr_Close''
|-
| ''AddOp''
| → +
| | | &amp;minus;
|-
| ''MulOp''
| → *
| | | /
|-
| ''PowOp''
| → ^
|-
| ''Open''
| → (
|-
| ''Close''
| → )
|-
| ''AddOp_Term''
| colspan=3 | → ''AddOp'' ''Term''
|-
| ''MulOp_Factor''
| colspan=3 | → ''MulOp'' ''Factor''
|-
| ''PowOp_Primary''
| colspan=3 | → ''PowOp'' ''Primary''
|-
| ''Expr_Close''
| colspan=3 | → ''Expr'' ''Close''
|}

Since there are no ε-rules, step &quot;DEL&quot; does not change the grammar.
After step &quot;UNIT&quot;, the following grammar is obtained, which is in Chomsky normal form:

:{|
|-
| ''S''&lt;sub&gt;0&lt;/sub&gt;
| → ''number'' 
| | |  ''variable'' 
| | |  ''Open'' ''Expr_Close''
| | |  ''Factor'' ''PowOp_Primary''
| | |  ''Term'' ''MulOp_Factor''
| | |  ''Expr'' ''AddOp_Term''
| | | ''AddOp'' ''Term''  
|-
| ''Expr'' 
| → ''number'' 
| | |  ''variable'' 
| | |  ''Open'' ''Expr_Close''
| | |  ''Factor'' ''PowOp_Primary''
| | |  ''Term'' ''MulOp_Factor''
| | |  ''Expr'' ''AddOp_Term''
| | | ''AddOp'' ''Term''  
|-
| ''Term'' 
| → ''number'' 
| | |  ''variable'' 
| | |  ''Open'' ''Expr_Close''
| | |  ''Factor'' ''PowOp_Primary''
| | |  ''Term'' ''MulOp_Factor''
|-
| ''Factor'' 
| → ''number'' 
| | |  ''variable'' 
| | |  ''Open'' ''Expr_Close''
| | |  ''Factor'' ''PowOp_Primary''
|-
| ''Primary'' 
| → ''number''  
| | |  ''variable''  
| | |  ''Open'' ''Expr_Close''
|-
| ''AddOp''
| → +
| | | &amp;minus;
|-
| ''MulOp''
| → *
| | | /
|-
| ''PowOp''
| → ^
|-
| ''Open''
| → (
|-
| ''Close''
| → )
|-
| ''AddOp_Term''
| colspan=3 | → ''AddOp'' ''Term''
|-
| ''MulOp_Factor''
| colspan=3 | → ''MulOp'' ''Factor''
|-
| ''PowOp_Primary''
| colspan=3 | → ''PowOp'' ''Primary''
|-
| ''Expr_Close''
| colspan=3 | → ''Expr'' ''Close''
|}

The ''N''&lt;sub&gt;''a''&lt;/sub&gt; introduced in step &quot;TERM&quot; are ''PowOp'', ''Open'', and ''Close''.
The ''A''&lt;sub&gt;''i''&lt;/sub&gt; introduced in step &quot;BIN&quot; are ''AddOp_Term'', ''MulOp_Factor'', ''PowOp_Primary'', and ''Expr_Close''.

==Alternative definition==

=== Chomsky reduced form ===
Another way&lt;ref name=&quot;Hopcroft.Ullman.1979&quot;/&gt;{{rp|92}}&lt;ref&gt;Hopcroft et al. (2006){{page needed|date=November 2014}}&lt;/ref&gt; to define the Chomsky normal form is:

A [[formal grammar]] is in '''Chomsky reduced form''' if all of its production rules are of the form:
: &lt;math&gt;A \rightarrow\, BC&lt;/math&gt; or
: &lt;math&gt;A \rightarrow\, a&lt;/math&gt;,
where &lt;math&gt;A&lt;/math&gt;, &lt;math&gt;B&lt;/math&gt; and &lt;math&gt;C&lt;/math&gt; are nonterminal symbols, and &lt;math&gt;a&lt;/math&gt; is a [[terminal symbol]].  When using this definition, &lt;math&gt;B&lt;/math&gt; or &lt;math&gt;C&lt;/math&gt; may be the start symbol.  Only those context-free grammars which do not generate the [[empty string]] can be transformed into Chomsky reduced form.

=== Floyd normal form ===
In a paper where he proposed a term [[Backus–Naur form]] (BNF), [[Donald E. Knuth]] implied a BNF &quot;syntax in which all definitions have such a form may be said to be in 'Floyd Normal Form'&quot;,
: &lt;math&gt;\langle A \rangle ::= \, \langle B \rangle \mid \langle C \rangle&lt;/math&gt; or
: &lt;math&gt;\langle A \rangle ::= \, \langle B \rangle \langle C \rangle&lt;/math&gt; or
: &lt;math&gt;\langle A \rangle ::=\, a&lt;/math&gt;,
where &lt;math&gt;\langle A \rangle&lt;/math&gt;, &lt;math&gt;\langle B \rangle&lt;/math&gt; and &lt;math&gt;\langle C \rangle&lt;/math&gt; are nonterminal symbols, and &lt;math&gt;a&lt;/math&gt; is a [[terminal symbol]],
because [[Robert W. Floyd]] found any BNF syntax can be converted to the above one in 1961.&lt;ref name=&quot;knuth1964&quot;&gt;{{cite journal |last=Knuth |first=Donald E. |date=December 1964 |title=Backus Normal Form vs. Backus Naur Form |journal=Communications of the ACM |doi=10.1145/355588.365140 |volume=7 |issue=12 |pages=735–736}}&lt;/ref&gt; But he withdrew this term, &quot;since doubtless many people have independently used this simple fact in their own work, and the point is only incidental to the main considerations of Floyd's note.&quot;&lt;ref name=&quot;knuth1964&quot; /&gt;

== Application ==
Besides its theoretical significance, CNF conversion is used in some algorithms as a preprocessing step, e.g., the [[CYK algorithm]], a [[bottom-up parsing]] for context-free grammars, and its variant probabilistic CKY.&lt;ref&gt;{{cite book |last1=Jurafsky |first1=Daniel |last2=Martin |first2=James H. |date=2008 |title=Speech and Language Processing |edition=2nd |publisher=Pearson Prentice Hall |isbn=978-0-13-187321-6 |page=465}}&lt;/ref&gt;

== See also ==
*[[Backus–Naur form]]
*[[CYK algorithm]]
*[[Greibach normal form]]
*[[Kuroda normal form]]
*[[Pumping lemma for context-free languages]] &amp;mdash; its proof relies on the Chomsky normal form

==Notes==
{{reflist|group=note}}

== References ==
&lt;references /&gt;

==Further reading==
* Cole, Richard.  ''Converting CFGs to CNF (Chomsky Normal Form)'', October 17, 2007. [http://cs.nyu.edu/courses/fall07/V22.0453-001/cnf.pdf (pdf)] &amp;mdash; uses the order TERM, BIN, START, DEL, UNIT.
* {{cite book
 | author = John Martin
 | year = 2003
 | title = Introduction to Languages and the Theory of Computation 
 | publisher = McGraw Hill
 | isbn = 978-0-07-232200-2
 }} ''(Pages 237–240 of section 6.6: simplified forms and normal forms.)''
* {{cite book
 | authorlink = Michael Sipser
 | author = Michael Sipser
 | year = 1997
 | title = Introduction to the Theory of Computation
 | publisher = PWS Publishing
 | isbn = 978-0-534-94728-6
 | url = https://archive.org/details/introductiontoth00sips
 }} ''(Pages 98–101 of section 2.1: context-free grammars. Page 156.)''
* Sipser, Michael. ''Introduction to the Theory of Computation,'' 2nd edition.
* {{cite book|author=Alexander Meduna|title=Automata and Languages: Theory and Applications|url=https://books.google.com/?id=a-rjBwAAQBAJ&amp;printsec=frontcover&amp;dq=%22Chomsky+normal+form%22#v=snippet&amp;q=%22Chomsky%20normal%20form%22&amp;f=false|date=6 December 2012|publisher=Springer Science &amp; Business Media|isbn=978-1-4471-0501-5}}

{{Noam Chomsky}}

[[Category:Formal languages]]
[[Category:Noam Chomsky]]</text>
      <sha1>lpslk1b3s04uwnh6x1j25w4s0ss7g8h</sha1>
    </revision>
  </page>
