  <page>
    <title>P versus NP problem</title>
    <ns>0</ns>
    <id>6115</id>
    <revision>
      <id>941421703</id>
      <parentid>941180029</parentid>
      <timestamp>2020-02-18T14:19:52Z</timestamp>
      <contributor>
        <username>LouScheffer</username>
        <id>639456</id>
      </contributor>
      <comment>/* Claimed solutions  */ Agree details are not needed, but an article in the New York Times makes them notable.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{short description|Unsolved problem in computer science}}
{{pp-move-indef}}{{unsolved|computer science|If the solution to a problem is easy to check for correctness, must the problem be easy to solve?}}
[[File:Complexity classes.svg|thumb|250px|Diagram of complexity classes provided that '''P'''&amp;nbsp;[[≠]]&amp;nbsp;'''NP'''. The existence of problems within '''NP''' but outside both '''P''' and '''NP'''-complete, under that assumption, was established by [[NP-intermediate|Ladner's theorem]].&lt;ref name=&quot;Ladner75&quot;&gt;R. E. Ladner &quot;On the structure of polynomial time reducibility,&quot; ''[[Journal of the ACM]]'' 22, pp. 151–171, 1975. Corollary 1.1. [http://portal.acm.org/citation.cfm?id=321877&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618 ACM site].&lt;/ref&gt;]]
{{Millennium Problems}}

The '''P versus NP problem''' is a major [[List of unsolved problems in computer science|unsolved problem in computer science]]. It asks whether every problem whose solution can be quickly verified can also be solved quickly.

It is one of the seven [[Millennium Prize Problems]] selected by the [[Clay Mathematics Institute]], each of which carries a US$1,000,000 prize for the first correct solution.

The informal term ''quickly'', used above, means the existence of an algorithm solving the task that runs in [[polynomial time]], such that the time to complete the task varies as a polynomial function on the size of the input to the algorithm (as opposed to, say, [[exponential time]]). The general class of questions for which some algorithm can provide an answer in polynomial time is called &quot;class '''P'''&quot; or just &quot;'''[[P (complexity)|P]]'''&quot;. For some questions, there is no known way to find an answer quickly, but if one is provided with information showing what the answer is, it is possible to verify the answer quickly. The class of questions for which an answer can be ''verified'' in polynomial time is called '''[[NP (complexity)|NP]]''', which stands for &quot;nondeterministic polynomial time&quot;.&lt;ref group=&quot;Note&quot;&gt;A [[nondeterministic Turing machine]] can move to a state that is not determined by the previous state. Such a machine could solve an '''NP''' problem in polynomial time by falling into the correct answer state (by luck), then conventionally verifying it. Such machines are not practical for solving realistic problems but can be used as theoretical models.&lt;/ref&gt;

An answer to the '''P'''&amp;nbsp;=&amp;nbsp;'''NP''' question would determine whether problems that can be verified in polynomial time can also be solved in polynomial time. If it turned out that '''P'''&amp;nbsp;≠&amp;nbsp;'''NP''', which is widely believed, it would mean that there are problems in '''NP'''  that are harder to compute than to verify: they could not be solved in polynomial time, but the answer could be verified in polynomial time.

Aside from being an important problem in computational theory, a proof either way would have profound implications for mathematics, cryptography, algorithm research, [[artificial intelligence]], [[game theory]], multimedia processing, [[philosophy]], [[economics]] and many other fields.&lt;ref&gt;{{Cite book|title=The Golden Ticket: P, NP, and the Search for the Impossible|last=Fortnow|first=Lance|publisher=Princeton University Press|year=2013|isbn=9780691156491|location=Princeton, NJ|pages=}}&lt;/ref&gt;

== Example ==

Consider [[Sudoku]], a game where the player is given a partially filled-in grid of numbers and attempts to complete the grid following certain rules. Given an incomplete Sudoku grid, of any size, is there at least one legal solution?  Any proposed solution is easily verified, and the time to check a solution grows slowly (polynomially) as the grid gets bigger.  However, all known algorithms for finding solutions take, for difficult examples, time that grows exponentially as the grid gets bigger.  So, Sudoku is in '''NP''' (quickly checkable) but does not seem to be in '''P''' (quickly solvable).  Thousands of other problems seem similar, in that they are fast to check but slow to solve.  Researchers have shown that many of the problems in '''NP''' have the extra property that a fast solution to any one of them could be used to build a quick solution to any other problem in '''NP''', a property called [[NP-complete|'''NP'''-completeness]].  Decades of searching have not yielded a fast solution to any of these problems, so most scientists suspect that none of these problems can be solved quickly.  This, however, has never been proven.

==History==

The underlying issues were first discussed in the 1950s, in letters from [[John Forbes Nash Jr.]] to the [[National Security Agency]], and from [[Kurt Gödel]] to [[John von Neumann]]. The precise statement of the '''P''' versus '''NP''' problem was introduced in 1971 by [[Stephen Cook]] in his seminal paper &quot;The complexity of theorem proving procedures&quot;&lt;ref&gt;{{Cite book|last=Cook|first=Stephen|authorlink=Stephen Cook|year=1971|chapter=The complexity of theorem proving procedures|chapterurl=http://portal.acm.org/citation.cfm?coll=GUIDE&amp;dl=GUIDE&amp;id=805047|title=Proceedings of the Third Annual ACM Symposium on Theory of Computing|pages=151–158}}&lt;/ref&gt; (and independently by [[Leonid Levin]] in 1973&lt;ref&gt;{{cite journal |author = L. A. Levin |editor=  |format= |url= http://www.mathnet.ru/php/archive.phtml?wshow=paper&amp;jrnid=ppi&amp;paperid=914&amp;option_lang=rus |title= Универсальные задачи перебора |type=  |origyear= | agency =  |edition= Problems of Information Transmission  |location=  |date=  1973  |volume= 9 |number= 3|pages = 115–116 |series=  |isbn =  |issn =  |doi =  |bibcode =  |pmid =  |ref=  |archiveurl =  |archivedate =  |language= ru |quote=  }}&lt;/ref&gt;) and is considered by many to be the most important open problem in [[computer science]].&lt;ref&gt;{{cite journal | last1 = Fortnow | first1 = Lance | authorlink = Lance Fortnow | year = 2009 | title = The status of the '''P''' versus '''NP''' problem | url = http://www.cs.uchicago.edu/~fortnow/papers/pnp-cacm.pdf | journal = Communications of the ACM | volume = 52 | issue = 9| pages = 78–86 | doi = 10.1145/1562164.1562186 }}&lt;/ref&gt;

Although the '''P''' versus '''NP''' problem was formally defined in 1971, there were previous inklings of the problems involved, the difficulty of proof, and the potential consequences.  In 1955, mathematician John Nash wrote a letter to the NSA, where he speculated that cracking a sufficiently complex code would require time exponential in the length of the key.&lt;ref&gt;{{cite web |title=Letters from John Nash |url=https://www.nsa.gov/Portals/70/documents/news-features/declassified-documents/nash-letters/nash_letters1.pdf |author=NSA |year=2012}} &lt;/ref&gt;  If proved (and Nash was suitably skeptical) this would imply what is now called '''P'''&amp;nbsp;≠&amp;nbsp;'''NP''', since a proposed key can easily be verified in polynomial time. Another mention of the underlying problem occurred in a 1956 letter written by [[Kurt Gödel]] to [[John von Neumann]].  Gödel asked whether theorem-proving (now known to be [[co-NP-complete|'''co-NP'''-complete]]) could be solved in [[quadratic time|quadratic]] or [[linear time]],&lt;ref&gt;{{cite journal | last1 = Hartmanis | first1 = Juris | year = | title = Gödel, von Neumann, and the '''P''' = '''NP''' problem | url = http://ecommons.library.cornell.edu/bitstream/1813/6910/1/89-994.pdf | journal = Bulletin of the European Association for Theoretical Computer Science | volume = 38 | issue = | pages = 101–107 }}&lt;/ref&gt; and pointed out one of the most important consequences—that if so, then the discovery of mathematical proofs could be automated.

==Context==
The relation between the [[complexity class]]es '''P''' and '''NP''' is studied in [[computational complexity theory]], the part of the [[theory of computation]] dealing with the resources required during computation to solve a given problem. The most common resources are time (how many steps it takes to solve a problem) and space (how much memory it takes to solve a problem).

In such analysis, a model of the computer for which time must be analyzed is required. Typically such models assume that the computer is ''[[Deterministic computation|deterministic]]'' (given the computer's present state and any inputs, there is only one possible action that the computer might take) and ''sequential'' (it performs actions one after the other).

In this theory, the class '''P''' consists of all those ''[[decision problem]]s'' (defined [[#Formal definitions|below]]) that can be solved on a deterministic sequential machine in an amount of time that is [[polynomial]] in the size of the input; the class '''[[NP (complexity)|NP]]''' consists of all those decision problems whose positive solutions can be verified in [[polynomial time]] given the right information, or equivalently, whose solution can be found in polynomial time on a [[Non-deterministic Turing machine|non-deterministic]] machine.&lt;ref&gt;Sipser, Michael: ''Introduction to the Theory of Computation, Second Edition, International Edition'', page 270. Thomson Course Technology, 2006. Definition 7.19 and Theorem 7.20.&lt;/ref&gt; Clearly, '''P''' ⊆ '''NP'''. Arguably the biggest open question in [[theoretical computer science]] concerns the relationship between those two classes:
:Is '''P''' equal to '''NP'''?
Since 2002, [[William Gasarch]] has conducted three polls of researchers concerning this and related questions.&lt;ref name=&quot;poll&quot;&gt;{{Cite journal|author=William I. Gasarch| author1-link=William Gasarch | title=The '''P'''=?'''NP''' poll.|journal=[[SIGACT News]]|volume=33|issue=2|pages=34–47|date=June 2002| url=http://www.cs.umd.edu/~gasarch/papers/poll.pdf|doi=10.1145/564585.564599|accessdate=26 September 2018| citeseerx=10.1.1.172.1005 }}&lt;/ref&gt;&lt;ref name=&quot;poll2&quot;&gt;{{Cite journal|author=William I. Gasarch| author1-link=William Gasarch | title=The Second '''P'''=?'''NP''' poll|journal=SIGACT News|volume=74|url=http://www.cs.umd.edu/~gasarch/papers/poll2012.pdf}}&lt;/ref&gt;&lt;ref name=&quot;poll3&quot;&gt;{{cite web |url=https://www.cs.umd.edu/users/gasarch/BLOGPAPERS/pollpaper3.pdf |title=Guest Column: The Third P =? NP Poll1}}&lt;/ref&gt;  Confidence that '''P'''&amp;nbsp;≠&amp;nbsp;'''NP''' has been increasing - in 2019, 88% believed '''P'''&amp;nbsp;≠&amp;nbsp;'''NP''', as opposed to 83% in 2012 and 61% in 2002.  When restricted to experts, the 2019 answers became 99% '''P'''&amp;nbsp;≠&amp;nbsp;'''NP'''.&lt;ref name=&quot;poll3&quot; /&gt;

==NP-completeness==
[[File:P np np-complete np-hard.svg|thumb|300px|right|[[Euler diagram]] for '''[[P (complexity)|P]]''', '''[[NP (complexity)|NP]]''', '''NP'''-complete, and '''NP'''-hard set of problems (excluding the empty language and its complement, which belong to '''P''' but are not '''NP'''-complete)]]
{{Main article|NP-completeness}}
To attack the '''P''' = '''NP''' question, the concept of '''NP'''-completeness is very useful. '''NP'''-complete problems are a set of problems to each of which any other '''NP'''-problem can be reduced in polynomial time and whose solution may still be verified in polynomial time. That is, any '''NP''' problem can be transformed into any of the '''NP'''-complete problems. Informally, an '''NP'''-complete problem is an '''NP '''problem that is at least as &quot;tough&quot; as any other problem in '''NP'''.

[[NP-hard|'''NP'''-hard]] problems are those at least as hard as '''NP''' problems, i.e., all '''NP''' problems can be reduced (in polynomial time) to them. '''NP'''-hard problems need not be in '''NP''', i.e., they need not have solutions verifiable in polynomial time.

For instance, the [[Boolean satisfiability problem]] is '''NP'''-complete by the [[Cook–Levin theorem]], so ''any'' instance of ''any'' problem in '''NP''' can be transformed mechanically into an instance of the Boolean satisfiability problem in polynomial time. The Boolean satisfiability problem is one of many such '''NP'''-complete problems. If any '''NP'''-complete problem is in '''P''', then it would follow that '''P''' = '''NP'''. However, many important problems have been shown to be '''NP'''-complete, and no fast algorithm for any of them is known.

Based on the definition alone it is not obvious that '''NP'''-complete problems exist; however, a trivial and contrived '''NP'''-complete problem can be formulated as follows: given a description of a [[Turing machine]] ''M'' guaranteed to halt in polynomial time, does there exist a polynomial-size input that ''M'' will accept?&lt;ref name=&quot;Scott&quot;&gt;{{Cite web|author=Scott Aaronson|title=PHYS771 Lecture 6: '''P''', '''NP''', and Friends|url=http://www.scottaaronson.com/democritus/lec6.html |accessdate=27 August 2007}}&lt;/ref&gt; It is in '''NP''' because (given an input) it is simple to check whether ''M'' accepts the input by simulating ''M''; it is '''NP'''-complete because the verifier for any particular instance of a problem in '''NP''' can be encoded as a polynomial-time machine ''M'' that takes the solution to be verified as input. Then the question of whether the instance is a yes or no instance is determined by whether a valid input exists.

The first natural problem proven to be '''NP'''-complete was the Boolean satisfiability problem, also known as SAT. As noted above, this is the Cook–Levin theorem; its proof that satisfiability is '''NP'''-complete contains technical details about Turing machines as they relate to the definition of '''NP'''. However, after this problem was proved to be '''NP'''-complete, [[reduction (complexity)|proof by reduction]] provided a simpler way to show that many other problems are also '''NP'''-complete, including the game Sudoku discussed earlier. In this case, the proof shows that a solution of Sudoku in polynomial time could also be used to complete [[Latin square]]s in polynomial time.&lt;ref&gt;{{cite web |title=NP-completeness of Sudoku |url=http://www.cs.ox.ac.uk/people/paul.goldberg/FCS/sudoku.html}}&lt;/ref&gt;  This in turn gives a solution to the problem of partitioning [[multipartite graph|tri-partite graphs]] into triangles,&lt;ref&gt;{{cite article |author=Colbourn, Charles J. |title=The complexity of completing partial Latin squares |journal=Discrete Applied Mathematics |volume=8 |issue=1 |year=1984 |pages=25–30 }}&lt;/ref&gt; which could then be used to find solutions for the special case of SAT known as 3-SAT,&lt;ref&gt;{{cite article |author=I. Holyer |title=The '''NP'''-completeness of some edge-partition problems |journal=SIAM J. Comput. |volume=10 |year=1981 |pages=713&amp;ndash;717}}&lt;/ref&gt; which then provides a solution for general Boolean satisfiability.  So a polynomial time solution to Sudoku leads, by a series of mechanical transformations, to a polynomial time solution of satisfiability, which in turn can be used to solve any other '''NP'''-problem in polynomial time.  Using transformations like this, a vast class of seemingly unrelated problems are all reducible to one another, and are in a sense &quot;the same problem&quot;.

==Harder problems==
{{See also|Complexity class}}

Although it is unknown whether '''P''' = '''NP''', problems outside of '''P''' are known. Just as the class '''P''' is defined in terms of polynomial running time, the class '''[[EXPTIME]]''' is the set of all decision problems that have ''exponential'' running time. In other words, any problem in '''EXPTIME''' is solvable by a [[deterministic Turing machine]] in [[big O notation|O]](2&lt;sup&gt;''p''(''n'')&lt;/sup&gt;) time, where ''p''(''n'') is a polynomial function of ''n''. A decision problem is [[EXPTIME#EXPTIME-complete|'''EXPTIME'''-complete]] if it is in '''EXPTIME''', and every problem in '''EXPTIME''' has a [[polynomial-time many-one reduction]] to it. A number of problems are known to be '''EXPTIME'''-complete. Because it can be shown that '''P''' ≠ '''EXPTIME''', these problems are outside '''P''', and so require more than polynomial time. In fact, by the [[time hierarchy theorem]], they cannot be solved in significantly less than exponential time. Examples include finding a perfect strategy for [[chess]] positions on an ''N'' × ''N'' board&lt;ref name=&quot;Fraenkel1981&quot;&gt;{{Cite journal| author = [[Aviezri Fraenkel]] and D. Lichtenstein| title = Computing a perfect strategy for ''n'' × ''n'' chess requires time exponential in ''n''| journal = [[Journal of Combinatorial Theory|Journal of Combinatorial Theory, Series A]]| volume = 31| issue = 2| year = 1981| pages = 199–214 | doi = 10.1016/0097-3165(81)90016-9}}&lt;/ref&gt; and similar problems for other board games.&lt;ref&gt;{{Cite web|title=Computational Complexity of Games and Puzzles |url=http://www.ics.uci.edu/~eppstein/cgt/hard.html |author=[[David Eppstein]]}}&lt;/ref&gt;

The problem of deciding the truth of a statement in [[Presburger arithmetic]] requires even more time. Fischer and [[Michael O. Rabin|Rabin]] proved in 1974&lt;ref&gt;{{cite journal | first1=Michael J. | last1=Fischer | authorlink1=Michael J. Fischer | first2=Michael O. | last2=Rabin | authorlink2=Michael O. Rabin | date=1974 | title=Super-Exponential Complexity of Presburger Arithmetic | url=http://www.lcs.mit.edu/publications/pubs/ps/MIT-LCS-TM-043.ps | journal=Proceedings of the SIAM-AMS Symposium in Applied Mathematics | volume=7 | pages=27–41 | ref=harv }}&lt;/ref&gt; that every algorithm that decides the truth of Presburger statements of length ''n'' has a runtime of at least &lt;math&gt;2^{2^{cn}}&lt;/math&gt; for some constant ''c''. Hence, the problem is known to need more than exponential run time. Even more difficult are the [[undecidable problem]]s, such as the [[halting problem]]. They cannot be completely solved by any algorithm, in the sense that for any particular algorithm there is at least one input for which that algorithm will not produce the right answer; it will either produce the wrong answer, finish without giving a conclusive answer, or otherwise run forever without producing any answer at all.

It is also possible to consider questions other than decision problems.  One such class, consisting of counting problems, is called [[Sharp-P#P|'''#P''']]: whereas an '''NP''' problem asks &quot;Are there any solutions?&quot;, the corresponding '''#P''' problem asks &quot;How many solutions are there?&quot;  Clearly, a '''#P''' problem must be at least as hard as the corresponding '''NP''' problem, since a count of solutions immediately tells if at least one solution exists, if the count is greater than zero. Surprisingly, some '''#P''' problems that are believed to be difficult correspond to easy (for example linear-time) '''P''' problems.&lt;ref&gt;{{cite journal |author=Valiant, Leslie G. |title=The complexity of enumeration and reliability problems |journal=SIAM Journal on Computing |volume=8 |issue=3 |year=1979 |pages=410–421 |doi=10.1137/0208032}}&lt;/ref&gt;  For these problems, it is very easy to tell whether solutions exist, but thought to be very hard to tell how many.  Many of these problems are [[Sharp-P-complete|'''#P'''-complete]], and hence among the hardest problems in '''#P''', since a polynomial time solution to any of them would allow a polynomial time solution to all other '''#P''' problems.

==Problems in NP not known to be in P or NP-complete==
{{Main article|NP-intermediate|l1='''NP'''-intermediate}}
In 1975, [[Richard E. Ladner]] showed that if '''P''' ≠ '''NP''' then there exist problems in '''NP''' that are neither in '''P''' nor '''NP'''-complete.&lt;ref name=&quot;Ladner75&quot; /&gt; Such problems are called '''NP'''-intermediate problems. The [[graph isomorphism problem]], the [[discrete logarithm problem]] and the [[integer factorization problem]] are examples of problems believed to be '''NP'''-intermediate. They are some of the very few '''NP''' problems not known to be in '''P''' or to be '''NP'''-complete.

The graph isomorphism problem is the computational problem of determining whether two finite [[Graph (discrete mathematics)|graph]]s are [[graph isomorphism|isomorphic]]. An important unsolved problem in complexity theory is whether the graph isomorphism problem is in '''P''', '''NP'''-complete, or '''NP'''-intermediate. The answer is not known, but it is believed that the problem is at least not '''NP'''-complete.&lt;ref name=&quot;AK06&quot;&gt;{{cite journal
 | first1 = Vikraman
 | last1 = Arvind
 | first2 = Piyush P.
 | last2 = Kurur
 | title = Graph isomorphism is in '''SPP'''
 | journal = Information and Computation
 | volume = 204
 | issue = 5
 | year = 2006
 | pages = 835–852
 | doi = 10.1016/j.ic.2006.02.002
 }}&lt;/ref&gt; If graph isomorphism is '''NP'''-complete, the [[polynomial time hierarchy]] collapses to its second level.&lt;ref&gt;{{cite book | last1 = Schöning | first1 = Uwe | authorlink = Uwe Schöning | year = 1987| title = Graph isomorphism is in the low hierarchy | url = | journal = Proceedings of the 4th Annual Symposium on Theoretical Aspects of Computer Science | volume = 1987 | issue = | pages = 114–124 | doi=10.1007/bfb0039599| series = Lecture Notes in Computer Science | isbn = 978-3-540-17219-2 }}&lt;/ref&gt;&lt;ref&gt;{{cite journal | last1 = Schöning | first1 = Uwe | authorlink = Uwe Schöning | year = 1988 | title = Graph isomorphism is in the low hierarchy | url = | journal = Journal of Computer and System Sciences | volume = 37 | issue = 3| pages = 312–323 | doi=10.1016/0022-0000(88)90010-4}}&lt;/ref&gt; Since it is widely believed that the polynomial hierarchy does not collapse to any finite level, it is believed that graph isomorphism is not '''NP'''-complete. The best algorithm for this problem, due to [[László Babai]] and [[Eugene Luks]], has run time 2&lt;sup&gt;O({{radic|''n'' log ''n''}})&lt;/sup&gt; for graphs with ''n'' vertices.

The [[integer factorization problem]] is the computational problem of determining the [[prime factorization]] of a given integer. Phrased as a decision problem, it is the problem of deciding whether the input has a factor less than ''k''. No efficient integer factorization algorithm is known, and this fact forms the basis of several modern cryptographic systems, such as the [[RSA (algorithm)|RSA]] algorithm. The integer factorization problem is in '''NP''' and in '''[[co-NP]]''' (and even in '''UP''' and '''co-UP'''&lt;ref&gt;[[Lance Fortnow]]. Computational Complexity Blog: [http://weblog.fortnow.com/2002/09/complexity-class-of-week-factoring.html Complexity Class of the Week: Factoring]. 13 September 2002.&lt;/ref&gt;). If the problem is '''NP'''-complete, the polynomial time hierarchy will collapse to its first level (i.e., '''NP''' = '''co-NP'''). The best known algorithm for integer factorization is the [[general number field sieve]], which takes expected time

:&lt;math&gt;O\left (\exp \left ( \left (\tfrac{64n}{9} \log(2) \right )^{\frac{1}{3}} \left ( \log(n\log(2)) \right )^{\frac{2}{3}} \right) \right )&lt;/math&gt;

to factor an ''n''-bit integer. However, the best known [[quantum algorithm]] for this problem, [[Shor's algorithm]], does run in polynomial time, although this does not indicate where the problem lies with respect to non-quantum complexity classes.

==Does P mean &quot;easy&quot;?==
[[File:KnapsackEmpComplexity.GIF|thumb|310 px|The graph shows time (average of 100 instances in ms using a 933 MHz Pentium III) vs.problem size for knapsack problems for a state-of-the-art specialized algorithm. Quadratic fit suggests that empirical algorithmic complexity for instances with 50–10,000 variables is O((log(''n''))&lt;sup&gt;2&lt;/sup&gt;).&lt;ref name=Pisinger2003&gt;Pisinger, D. 2003. &quot;Where are the hard knapsack problems?&quot; Technical Report 2003/08, Department of Computer Science, University of Copenhagen, Copenhagen, Denmark&lt;/ref&gt;]]
All of the above discussion has assumed that '''P''' means &quot;easy&quot; and &quot;not in '''P'''&quot; means &quot;hard&quot;, an assumption known as ''[[Cobham's thesis]]''. It is a common and reasonably accurate assumption in complexity theory; however, it has some caveats.

First, it is not always true in practice. A theoretical polynomial algorithm may have extremely large constant factors or exponents thus rendering it impractical.  For example, the problem of [[decision problem|deciding]] whether a graph ''G'' contains ''H'' as a [[graph minor|minor]], where ''H'' is fixed, can be solved in a running time of ''O''(''n''&lt;sup&gt;2&lt;/sup&gt;),&lt;ref name=&quot;kkr12&quot;&gt;{{cite journal |author=Kawarabayashi, K. I., Kobayashi, Y., &amp; Reed, B. |year=2012 |title=The disjoint paths problem in quadratic time |journal=Journal of Combinatorial Theory, Series B |volume=102 |issue=2 |pages=424-435}}&lt;/ref&gt; where ''n'' is the number of vertices in ''G''.  However, the [[big O notation]] hides a constant that depends superexponentially on ''H''.  The constant is greater than &lt;math&gt; 2 \uparrow \uparrow (2 \uparrow \uparrow (2 \uparrow \uparrow (h/2) ) ) &lt;/math&gt; (using [[Knuth's up-arrow notation]]), and where ''h'' is the number of vertices in ''H''.&lt;ref&gt;{{cite journal |author=Johnson, David S. |title=The NP-completeness column: An ongoing guide (edition 19) |journal= Journal of Algorithms |volume=8 |issue=2 |year=1987 |pages=285–303 |citeseerx=10.1.1.114.3864 |doi=10.1016/0196-6774(87)90043-5 }}&lt;/ref&gt;

On the other hand, even if a problem is shown to be '''NP'''-complete, and even if '''P''' ≠ '''NP''', there may still be effective approaches to tackling the problem in practice. There are algorithms for many '''NP'''-complete problems, such as the [[knapsack problem]], the [[traveling salesman problem]] and the [[Boolean satisfiability problem]], that can solve to optimality many real-world instances in reasonable time. The empirical [[average-case complexity]] (time vs. problem size) of such algorithms can be surprisingly low.  An example is the [[simplex algorithm]] in [[linear programming]], which works surprisingly well in practice; despite having exponential worst-case [[time complexity]] it runs on par with the best known polynomial-time algorithms.&lt;ref&gt;{{cite book|last1=Gondzio|first1=Jacek|last2=Terlaky|first2=Tamás|chapter=3 A computational view of interior point methods |mr=1438311 |title=Advances in linear and integer programming|pages=103–144|editor=J.&amp;nbsp;E. Beasley|location=New York|publisher=Oxford University Press|year=1996|series=Oxford Lecture Series in Mathematics and its Applications |volume=4 |chapter-url=http://www.maths.ed.ac.uk/~gondzio/CV/oxford.ps |ref=harv|id=[http://www.maths.ed.ac.uk/~gondzio/CV/oxford.ps Postscript file at website of Gondzio] and [http://www.cas.mcmaster.ca/~terlaky/files/dut-twi-94-73.ps.gz at McMaster University website of Terlaky]}}&lt;/ref&gt;

Finally, there are types of computations which do not conform to the Turing machine model on which '''P''' and '''NP''' are defined, such as [[quantum computation]] and [[randomized algorithm]]s.

==Reasons to believe P ≠ NP or P = NP==
According to polls,&lt;ref name=&quot;poll&quot;/&gt;&lt;ref&gt;{{cite journal|title='''P''' vs. '''NP''' poll results|journal=Communications of the ACM|date=May 2012|volume=55|issue=5|page=10|first=Jack|last=Rosenberger|url=http://mags.acm.org/communications/201205?pg=12}}&lt;/ref&gt; most computer scientists believe that '''P'''&amp;nbsp;≠&amp;nbsp;'''NP'''. A key reason for this belief is that after decades of studying these problems no one has been able to find a polynomial-time algorithm for any of more than 3000 important known '''NP'''-complete problems (see [[List of NP-complete problems|List of '''NP'''-complete problems]]). These algorithms were sought long before the concept of '''NP'''-completeness was even defined ([[Karp's 21 NP-complete problems|Karp's 21 '''NP'''-complete problems]], among the first found, were all well-known existing problems at the time they were shown to be '''NP'''-complete). Furthermore, the result '''P''' = '''NP''' would imply many other startling results that are currently believed to be false, such as '''NP''' = '''[[co-NP]]''' and '''P''' = '''[[PH (complexity)|PH]]'''.

It is also intuitively argued that the existence of problems that are hard to solve but for which the solutions are easy to verify matches real-world experience.&lt;ref&gt;{{Cite web|url=http://scottaaronson.com/blog/?p=122 |author=Scott Aaronson |title=Reasons to believe}}, point 9.&lt;/ref&gt;
{{quote|If '''P''' &lt;nowiki&gt;=&lt;/nowiki&gt; '''NP''', then the world would be a profoundly different place than we usually assume it to be. There would be no special value in &quot;creative leaps,&quot; no fundamental gap between solving a problem and recognizing the solution once it's found.| [[Scott Aaronson]], then at [[MIT]]}}

On the other hand, some researchers believe that there is overconfidence in believing '''P''' ≠ '''NP''' and that researchers should explore proofs of '''P''' = '''NP''' as well. For example, in 2002 these statements were made:&lt;ref name=&quot;poll&quot; /&gt;
{{quote|The main argument in favor of '''P'''&amp;nbsp;≠&amp;nbsp;'''NP''' is the total lack of fundamental progress in the area of exhaustive search. This is, in my opinion, a very weak argument. The space of algorithms is very large and we are only at the beginning of its exploration. [...] The resolution of [[Fermat's Last Theorem]] also shows that very simple questions may be settled only by very deep theories.|[[Moshe Y. Vardi]], [[Rice University]]}}
{{quote|Being attached to a speculation is not a good guide to research planning. One should always try both directions of every problem. Prejudice has caused famous mathematicians to fail to solve famous problems whose solution was opposite to their expectations, even though they had developed all the methods required.|[[Anil Nerode]], [[Cornell University]]}}

==Consequences of solution==
One of the reasons the problem attracts so much attention is the consequences of the answer.  Either direction of resolution would advance theory enormously, and perhaps have huge practical consequences as well.

===P = NP===
A proof that '''P''' = '''NP''' could have stunning practical consequences if the proof leads to efficient methods for solving some of the important problems in '''NP'''. It is also possible that a proof would not lead directly to efficient methods, perhaps if the proof is [[non-constructive proof|non-constructive]], or the size of the bounding polynomial is too big to be efficient in practice. The consequences, both positive and negative, arise since various '''NP'''-complete problems are fundamental in many fields.

Cryptography, for example, relies on certain problems being difficult. A constructive and efficient solution&lt;ref group=&quot;Note&quot;&gt;Exactly how efficient a solution must be to pose a threat to cryptography depends on the details.  A solution of &lt;math&gt;O(N^2)&lt;/math&gt; with a reasonable constant term would be disastrous.  On the other hand, a solution that is &lt;math&gt;\Omega(N^4)&lt;/math&gt; in almost all cases would not pose an immediate practical danger.&lt;/ref&gt; to an '''NP'''-complete problem such as [[Boolean satisfiability problem#3-satisfiability|3-SAT]] would break most existing cryptosystems including:
* Existing implementations of [[public-key cryptography]],&lt;ref&gt;See {{cite book |title=Hard instance generation for SAT |author=Horie, S. and Watanabe, O. |journal=Algorithms and Computation |pages=22–31 |year=1997
|publisher=Springer |arxiv=cs/9809117 |bibcode=1998cs........9117H |last2=Watanabe |doi=10.1007/3-540-63890-3_4 |series=Lecture Notes in Computer Science |isbn=978-3-540-63890-2 |volume=1350}} for a reduction of factoring to SAT.  A 512 bit factoring problem (8400 MIPS-years when factored) translates to a SAT problem of 63,652 variables and 406,860 clauses.&lt;/ref&gt; a foundation for many modern security applications such as secure financial transactions over the Internet.
* [[Symmetric cipher]]s such as [[Advanced Encryption Standard|AES]] or [[Triple DES|3DES]],&lt;ref&gt;See, for example, {{cite journal |title=Logical cryptanalysis as a SAT problem |author1=Massacci, F.  |author2=Marraro, L.  |lastauthoramp=yes |journal=Journal of Automated Reasoning |volume=24 |issue=1 |pages=165–203 |year=2000 |citeseerx=10.1.1.104.962 |doi=10.1023/A:1006326723002}} in which an instance of DES is encoded as a SAT problem with 10336 variables and 61935 clauses.  A 3DES problem instance would be about 3 times this size.&lt;/ref&gt; used for the encryption of communications data.
* [[Cryptographic hash function|Cryptographic hashing]], which underlies [[blockchain]] [[cryptocurrency|cryptocurrencies]] such as [[Bitcoin]], and is used to authenticate software updates.  For these applications, the problem of finding a pre-image that hashes to a given value must be difficult in order to be useful, and ideally should require exponential time. However, if '''P''' = '''NP''', then finding a pre-image ''M'' can be done in polynomial time, through reduction to SAT.&lt;ref&gt;{{cite news |title=Inversion attacks on secure hash functions using SAT solvers
  |author=De, Debapratim and Kumarasubramanian, Abishek and Venkatesan, Ramarathnam
  |booktitle=Theory and Applications of Satisfiability Testing--SAT 2007
  |pages=377–382
  |year=2007
  |publisher=Springer
  |doi=10.1007/978-3-540-72788-0_36
  }}&lt;/ref&gt;
These would need to be modified or replaced by [[information-theoretic security|information-theoretically secure]] solutions not inherently based on '''P'''-'''NP''' inequivalence.

On the other hand, there are enormous positive consequences that would follow from rendering tractable many currently mathematically intractable problems. For instance, many problems in [[operations research]] are '''NP'''-complete, such as some types of [[integer programming]] and the [[travelling salesman problem]]. Efficient solutions to these problems would have enormous implications for logistics. Many other important problems, such as some problems in [[protein structure prediction]], are also '''NP'''-complete;&lt;ref name=&quot;Berger&quot;&gt;{{Cite journal|author=[[Bonnie Berger|Berger B]], [[F. Thomson Leighton|Leighton T]] |title=Protein folding in the hydrophobic-hydrophilic (HP) model is '''NP'''-complete |journal=J. Comput. Biol. |volume=5 |issue=1 |pages=27–40 |year=1998 |pmid=9541869 |doi=10.1089/cmb.1998.5.27 |citeseerx=10.1.1.139.5547 }}&lt;/ref&gt; if these problems were efficiently solvable it could spur considerable advances in life sciences and biotechnology.

But such changes may pale in significance compared to the revolution an efficient method for solving '''NP'''-complete problems would cause in mathematics itself. Gödel, in his early thoughts on computational complexity, noted that a mechanical method that could solve any problem would revolutionize mathematics:&lt;ref&gt;History of this letter and its translation from {{cite web |title=The History and Status of the '''P''' versus '''NP''' question |author=Michael Sipser |url=http://cs.stanford.edu/people/trevisan/cs172-07/sipser92history.pdf}}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=http://www.research.att.com/techdocs/TD_100899.pdf |title=A Brief History of NP-Completeness, 1954–2012 |author=David S. Johnson}} From pages 359–376 of Optimization Stories, [[Martin Grötschel|M. Grötschel]] (editor), a special issue of ¨ Documenta Mathematica, published in August 2012 and distributed to attendees at the 21st International Symposium on Mathematical Programming in Berlin.&lt;/ref&gt;
{{quote|If there really were a machine with φ(n) ∼ k ⋅ n (or even ∼ k ⋅ n&lt;sup&gt;2&lt;/sup&gt;), this would have consequences of the greatest importance. Namely, it would obviously mean that in spite of the undecidability of the [[Entscheidungsproblem]], the mental work of a mathematician concerning Yes-or-No questions could be completely replaced by a machine. After all, one would simply have to choose the natural number n so large that when the machine does not deliver a result, it makes no sense to think more about the problem.}}
Similarly, [[Stephen Cook]] says&lt;ref name=&quot;Official Problem Description&quot;&gt;{{Cite journal|last=Cook|first=Stephen|authorlink=Stephen Cook|title=The '''P''' versus '''NP''' Problem|publisher=[[Clay Mathematics Institute]] |date=April 2000 |url=http://www.claymath.org/sites/default/files/pvsnp.pdf |accessdate=18 October 2006}}&lt;/ref&gt;

{{quote|...&amp;nbsp;it would transform mathematics by allowing a computer to find a formal proof of any theorem which has a proof of a reasonable length, since formal proofs can easily be recognized in polynomial time. Example problems may well include all of the [[Clay Math Institute#Millennium Prize Problems|CMI prize problems]].}}

Research mathematicians spend their careers trying to prove theorems, and some proofs have taken decades or even centuries to find after problems have been stated—for instance, [[Fermat's Last Theorem]] took over three centuries to prove. A method that is guaranteed to find proofs to theorems, should one exist of a &quot;reasonable&quot; size, would essentially end this struggle.

[[Donald Knuth]] has stated that he has come to believe that '''P''' = '''NP''', but is reserved about the impact of a possible proof:&lt;ref&gt;{{cite web|url=http://www.informit.com/articles/article.aspx?p=2213858&amp;WT.rss_f=Article&amp;WT.rss_a=Twenty%20Questions%20for%20Donald%20Knuth&amp;WT.rss_ev=a|title=Twenty Questions for Donald Knuth|date=May 20, 2014|work=informit.com|publisher=[[InformIT (publisher)|InformIT]]|last=Knuth|first=Donald E.|authorlink=Donald Knuth|accessdate=20 July 2014}}&lt;/ref&gt;
{{quote|1=[...] I don't believe that the equality '''P''' = '''NP''' will turn out to be helpful even if it is proved, because such a proof will almost surely be nonconstructive.}}

===P ≠ NP===
A proof that showed that '''P''' ≠ '''NP''' would lack the practical computational benefits of a proof that '''P''' = '''NP''', but would nevertheless represent a very significant advance in computational complexity theory and provide guidance for future research. It would allow one to show in a formal way that many common problems cannot be solved efficiently, so that the attention of researchers can be focused on partial solutions or solutions to other problems. Due to widespread belief in '''P''' ≠ '''NP''', much of this focusing of research has already taken place.&lt;ref&gt;{{Cite journal|title=The Heuristic Problem-Solving Approach |author=L. R. Foulds |journal=[[Journal of the Operational Research Society]] |volume=34 |issue=10 |date=October 1983 |pages=927–934 |jstor=2580891 |doi=10.2307/2580891}}&lt;/ref&gt;

Also '''P''' ≠ '''NP''' still leaves open the [[average-case complexity]] of hard problems in '''NP'''.  For example, it is possible that SAT requires exponential time in the worst case, but that almost all randomly selected instances of it are efficiently solvable. [[Russell Impagliazzo]] has described five hypothetical &quot;worlds&quot; that could result from different possible resolutions to the average-case complexity question.&lt;ref&gt;R. Impagliazzo, [http://cseweb.ucsd.edu/~russell/average.ps &quot;A personal view of average-case complexity,&quot;] sct, pp.134, 10th Annual Structure in Complexity Theory Conference (SCT'95), 1995&lt;/ref&gt;  These range from &quot;Algorithmica&quot;, where '''P''' = '''NP''' and problems like SAT can be solved efficiently in all instances, to &quot;Cryptomania&quot;, where '''P''' ≠ '''NP''' and generating hard instances of problems outside '''P''' is easy, with three intermediate possibilities reflecting different possible distributions of difficulty over instances of '''NP'''-hard problems.  The &quot;world&quot; where '''P''' ≠ '''NP''' but all problems in '''NP''' are tractable in the average case is called &quot;Heuristica&quot; in the paper. A [[Princeton University]] workshop in 2009 studied the status of the five worlds.&lt;ref&gt;{{Cite web|url = http://intractability.princeton.edu/blog/2009/05/program-for-workshop-on-impagliazzos-worlds/|title = Tentative program for the workshop on &quot;Complexity and Cryptography: Status of Impagliazzo's Worlds&quot;|date = |accessdate = |website = |archiveurl = https://web.archive.org/web/20131115034042/http://intractability.princeton.edu/blog/2009/05/program-for-workshop-on-impagliazzos-worlds/|archivedate = 2013-11-15}}&lt;/ref&gt;

==Results about difficulty of proof==
Although the '''P''' = '''NP''' problem itself remains open despite a million-dollar prize and a huge amount of dedicated research, efforts to solve the problem have led to several new techniques.  In particular, some of the most fruitful research related to the '''P''' = '''NP''' problem has been in showing that existing proof techniques are not powerful enough to answer the question, thus suggesting that novel technical approaches are required.

As additional evidence for the difficulty of the problem, essentially all known proof techniques in [[computational complexity theory]] fall into one of the following classifications, each of which is known to be insufficient to prove that '''P''' ≠ '''NP''':
{| class=&quot;wikitable&quot;
|-
!Classification
!Definition
|-
|[[Relativizing proof]]s
|Imagine a world where every algorithm is allowed to make queries to some fixed subroutine called an ''[[oracle machine|oracle]]'' (a black box which can answer a fixed set of questions in constant time, such as a black box that solves any given traveling salesman problem in 1 step), and the running time of the oracle is not counted against the running time of the algorithm. Most proofs (especially classical ones) apply uniformly in a world with oracles regardless of what the oracle does. These proofs are called ''relativizing''. In 1975, Baker, Gill, and [[Robert M. Solovay|Solovay]] showed that '''P''' = '''NP''' with respect to some oracles, while '''P''' ≠ '''NP''' for other oracles.&lt;ref&gt;{{cite journal |author1=T. P. Baker |author2=J. Gill |author3=R. Solovay. |title=Relativizations of the '''P''' =? '''NP''' Question |journal=[[SIAM Journal on Computing]] |volume=4 |issue=4 |pages=431–442 |year=1975 |doi=10.1137/0204037}}&lt;/ref&gt; Since relativizing proofs can only prove statements that are uniformly true with respect to all possible oracles, this showed that relativizing techniques cannot resolve '''P''' = '''NP'''.
|-
|[[Natural proof]]s
|In 1993, [[Alexander Razborov]] and [[Steven Rudich]] defined a general class of proof techniques for circuit complexity lower bounds, called ''[[natural proof]]s''.&lt;ref&gt;{{cite journal |author1=Razborov, Alexander A. |author2=Steven Rudich |title=Natural proofs |journal=Journal of Computer and System Sciences |volume=55 |issue=1 |year=1997 |pages=24–35  |doi=10.1006/jcss.1997.1494}}&lt;/ref&gt; At the time all previously known circuit lower bounds were natural, and circuit complexity was considered a very promising approach for resolving '''P''' = '''NP'''. However, Razborov and Rudich showed that, if [[one-way functions]] exist, then no natural proof method can distinguish between '''P''' and '''NP'''. Although one-way functions have never been formally proven to exist, most mathematicians believe that they do, and a proof of their existence would be a much stronger statement than '''P''' ≠ '''NP'''. Thus it is unlikely that natural proofs alone can resolve '''P''' = '''NP'''.
|-
|Algebrizing proofs
|After the Baker-Gill-Solovay result, new non-relativizing proof techniques were successfully used to prove that [[IP (complexity)|IP]] = [[PSPACE]]. However, in 2008, [[Scott Aaronson]] and [[Avi Wigderson]] showed that the main technical tool used in the '''IP''' = '''PSPACE''' proof, known as ''arithmetization'', was also insufficient to resolve '''P''' = '''NP'''.&lt;ref&gt;{{cite conference |author1=S. Aaronson  |author2=A. Wigderson  |lastauthoramp=yes |title=Algebrization: A New Barrier in Complexity Theory |conference=Proceedings of ACM STOC'2008 |year=2008 |url=http://www.scottaaronson.com/papers/alg.pdf |doi=10.1145/1374376.1374481 |pages=731–740}}&lt;/ref&gt;
|}

These barriers are another reason why '''NP'''-complete problems are useful: if a polynomial-time algorithm can be demonstrated for an '''NP'''-complete problem, this would solve the '''P''' = '''NP''' problem in a way not excluded by the above results.

These barriers have also led some computer scientists to suggest that the '''P''' versus '''NP''' problem may be [[Independence (mathematical logic)|independent]] of standard axiom systems like [[ZFC]] (cannot be proved or disproved within them). The interpretation of an independence result could be that either no polynomial-time algorithm exists for any '''NP'''-complete problem, and such a proof cannot be constructed in (e.g.) ZFC, or that polynomial-time algorithms for '''NP'''-complete problems may exist, but it is impossible to prove in ZFC that such algorithms are correct.&lt;ref&gt;{{Cite web|url=http://www.scottaaronson.com/papers/indep.pdf|first=Scott|last=Aaronson|authorlink=Scott Aaronson|title=Is '''P''' Versus '''NP''' Formally Independent?|postscript=&lt;!-- Bot inserted parameter. Either remove it; or change its value to &quot;.&quot; for the cite to end in a &quot;.&quot;, as necessary. --&gt;{{inconsistent citations}}}}.&lt;/ref&gt; However, if it can be shown, using techniques of the sort that are currently known to be applicable, that the problem cannot be decided even with much weaker assumptions extending the [[Peano axioms]] (PA) for integer arithmetic, then there would necessarily exist nearly-polynomial-time algorithms for every problem in '''NP'''.&lt;ref&gt;{{Cite journal|title=On the independence of '''P''' versus '''NP'''|first1=Shai|last1=Ben-David |first2=Shai|last2=Halevi |series=Technical Report|volume=714|publisher=Technion|year=1992|url=https://www.cs.technion.ac.il/~shai/ph.ps.gz|postscript=&lt;!-- Bot inserted parameter. Either remove it; or change its value to &quot;.&quot; for the cite to end in a &quot;.&quot;, as necessary. --&gt;{{inconsistent citations}}}}.&lt;/ref&gt; Therefore, if one believes (as most complexity theorists do) that not all problems in '''NP''' have efficient algorithms, it would follow that proofs of independence using those techniques cannot be possible. Additionally, this result implies that proving independence from PA or ZFC using currently known techniques is no easier than proving the existence of efficient algorithms for all problems in '''NP'''.

==Claimed solutions &lt;span id=&quot;Deolalikar&quot;&gt;&lt;/span&gt;==
While the '''P''' versus '''NP''' problem is generally considered unsolved,&lt;ref&gt;{{Cite news|author=[[John Markoff]] |url=https://www.nytimes.com/2009/10/08/science/Wpolynom.html |title=Prizes Aside, the P-NP Puzzler Has Consequences|newspaper=The New York Times|date=8 October 2009}}&lt;/ref&gt; many amateur and some professional researchers have claimed solutions.  [[Gerhard J. Woeginger]] maintains a list that, as of 2018, contains 62 purported proofs of '''P''' = '''NP''', 50 proofs of '''P'''&amp;nbsp;≠&amp;nbsp;'''NP''', 2 proofs the problem is unprovable, and one proof that it is undecidable.&lt;ref&gt;{{Cite web|title=The '''P'''-versus-'''NP''' page|url=http://www.win.tue.nl/~gwoegi/P-versus-NP.htm|author=Gerhard J. Woeginger|authorlink=Gerhard J. Woeginger|accessdate=2018-06-24}}&lt;/ref&gt; Some attempts at resolving '''P''' versus '''NP''' have received brief media attention,&lt;ref name=&quot;NYT2010&quot;&gt;{{Cite news|last=Markoff|first=John|title=Step 1: Post Elusive Proof. Step 2: Watch Fireworks. |url=https://www.nytimes.com/2010/08/17/science/17proof.html?_r=1 |accessdate=20 September 2010|newspaper=The New York Times|date=16 August 2010}}&lt;/ref&gt; though these attempts have since been refuted.

==Logical characterizations==
The '''P''' = '''NP''' problem can be restated in terms of expressible certain classes of logical statements, as a result of work in [[descriptive complexity]].

Consider all languages of finite structures with a fixed [[signature (logic)|signature]] including a [[linear order]] relation. Then, all such languages in '''P''' can be expressed in [[first-order logic]] with the addition of a suitable least [[fixed-point combinator]]. Effectively, this, in combination with the order, allows the definition of recursive functions. As long as the signature contains at least one predicate or function in addition to the distinguished order relation, so that the amount of space taken to store such finite structures is actually polynomial in the number of elements in the structure, this precisely characterizes '''P'''.

Similarly, '''NP''' is the set of languages expressible in existential [[second-order logic]]—that is, second-order logic restricted to exclude [[universal quantification]] over relations, functions, and subsets. The languages in the [[polynomial hierarchy]], '''[[PH (complexity)|PH]]''', correspond to all of second-order logic. Thus, the question &quot;is '''P''' a proper subset of '''NP'''&quot; can be reformulated as &quot;is existential second-order logic able to describe languages (of finite linearly ordered structures with nontrivial signature) that first-order logic with least fixed point cannot?&quot;.&lt;ref&gt;Elvira Mayordomo. [http://www.unizar.es/acz/05Publicaciones/Monografias/MonografiasPublicadas/Monografia26/057Mayordomo.pdf &quot;P versus NP&quot;] {{webarchive|url=https://web.archive.org/web/20120216154228/http://www.unizar.es/acz/05Publicaciones/Monografias/MonografiasPublicadas/Monografia26/057Mayordomo.pdf |date=16 February 2012 }} ''Monografías de la Real Academia de Ciencias de Zaragoza'' '''26''': 57–68 (2004).&lt;/ref&gt; The word &quot;existential&quot; can even be dropped from the previous characterization, since '''P''' = '''NP''' if and only if '''P''' = '''PH''' (as the former would establish that '''NP''' = '''co-NP''', which in turn implies that '''NP''' = '''PH''').

==Polynomial-time algorithms==
No algorithm for any '''NP'''-complete problem is known to run in polynomial time. However, there are algorithms known for '''NP'''-complete problems with the property that if '''P''' = '''NP''', then the algorithm runs in polynomial time on accepting instances (although with enormous constants, making the algorithm impractical). However, these algorithms do not qualify as polynomial time because their running time on rejecting instances are not polynomial. The following algorithm, due to [[Leonid Levin|Levin]] (without any citation), is such an example below. It correctly accepts the '''NP'''-complete language [[subset sum problem|SUBSET-SUM]]. It runs in polynomial time on inputs that are in SUBSET-SUM if and only if '''P''' = '''NP''':

 ''// Algorithm that accepts the '''NP'''-complete language SUBSET-SUM.
 ''//
 ''// this is a polynomial-time algorithm if and only if '''P''' = '''NP'''.
 ''//
 ''// &quot;Polynomial-time&quot; means it returns &quot;yes&quot; in polynomial time when
 ''// the answer should be &quot;yes&quot;, and runs forever when it is &quot;no&quot;.
 ''//
 ''// Input: S = a finite set of integers
 ''// Output: &quot;yes&quot; if any subset of S adds up to 0.
 ''// Runs forever with no output otherwise.
 ''// Note: &quot;Program number M&quot; is the program obtained by
 ''// writing the integer M in binary, then
 ''// considering that string of bits to be a
 ''// program. Every possible program can be
 ''// generated this way, though most do nothing
 ''// because of syntax errors.''
 FOR K = 1...∞
   FOR M = 1...K
     Run program number M for K steps with input S
     IF the program outputs a list of distinct integers
       AND the integers are all in S
       AND the integers sum to 0
     THEN
       OUTPUT &quot;yes&quot; and HALT

If, and only if, '''P''' = '''NP''', then this is a polynomial-time algorithm accepting an '''NP'''-complete language. &quot;Accepting&quot; means it gives &quot;yes&quot; answers in polynomial time, but is allowed to run forever when the answer is &quot;no&quot; (also known as a ''semi-algorithm'').

This algorithm is enormously impractical, even if '''P''' = '''NP'''. If the shortest program that can solve SUBSET-SUM in polynomial time is ''b'' bits long, the above algorithm will try at least {{math|2&lt;sup&gt;''b''&lt;/sup&gt; − 1}} other programs first.

==Formal definitions==

===P and NP===
Conceptually speaking, a ''decision problem'' is a problem that takes as input some [[String (computer science)|string]] ''w'' over an alphabet Σ, and outputs &quot;yes&quot; or &quot;no&quot;. If there is an [[algorithm]] (say a [[Turing machine]], or a [[Computer programming|computer program]] with unbounded memory) that can produce the correct answer for any input string of length ''n'' in at most ''cn&lt;sup&gt;k&lt;/sup&gt;'' steps, where ''k'' and ''c'' are constants independent of the input string, then we say that the problem can be solved in ''polynomial time'' and we place it in the class '''P'''. Formally, '''P''' is defined as the set of all languages that can be decided by a deterministic polynomial-time Turing machine. That is,
:&lt;math&gt;\mathbf{P} = \{ L : L=L(M) \text{ for some deterministic polynomial-time Turing machine } M \}&lt;/math&gt;
where
:&lt;math&gt;L(M) = \{ w\in\Sigma^{*}: M \text{ accepts } w \}&lt;/math&gt;
and a deterministic polynomial-time Turing machine is a deterministic Turing machine ''M'' that satisfies the following two conditions:

# ''M'' halts on all inputs ''w'' and
# there exists &lt;math&gt;k \in N&lt;/math&gt; such that &lt;math&gt;T_M(n)\in O(n^k)&lt;/math&gt;, where ''O'' refers to the [[Big O notation#Formal definition|big O notation]] and
::&lt;math&gt;T_M(n) = \max\{ t_M(w) : w\in\Sigma^{*}, |w| = n \}&lt;/math&gt;
::&lt;math&gt;t_M(w) = \text{ number of steps }M\text{ takes to halt on input }w.&lt;/math&gt;

'''NP''' can be defined similarly using nondeterministic Turing machines (the traditional way). However, a modern approach to define '''NP''' is to use the concept of ''[[Certificate (complexity)|certificate]]'' and ''verifier''. Formally, '''NP''' is defined as the set of languages over a finite alphabet that have a verifier that runs in polynomial time, where the notion of &quot;verifier&quot; is defined as follows.

Let ''L'' be a language over a finite alphabet, Σ.

''L'' ∈ '''NP''' if, and only if, there exists a binary relation &lt;math&gt;R\subset\Sigma^{*}\times\Sigma^{*}&lt;/math&gt; and a positive integer ''k'' such that the following two conditions are satisfied:

# &lt;abbr title=&quot;For all strings x in Σ*, x is in L if and only if there is a y in Σ* such that (x, y) is in R and the length of y is polynomial in the length of x&quot;&gt;For all &lt;math&gt;x\in\Sigma^{*}&lt;/math&gt;, &lt;math&gt;x\in L \Leftrightarrow\exists y\in\Sigma^{*}&lt;/math&gt; such that (''x'', ''y'') ∈ ''R'' and &lt;math&gt;|y|\in O(|x|^k)&lt;/math&gt;&lt;/abbr&gt;; and
# the language &lt;abbr title=&quot;L[R], consisting of x followed by y with a delimiter in the middle&quot;&gt;&lt;math&gt;L_{R} = \{ x\# y:(x,y)\in R\}&lt;/math&gt; over &lt;math&gt;\Sigma\cup\{\#\}&lt;/math&gt;&lt;/abbr&gt; is decidable by a deterministic Turing machine in polynomial time.

A Turing machine that decides ''L&lt;sub&gt;R&lt;/sub&gt;'' is called a ''verifier'' for ''L'' and a ''y'' such that (''x'', ''y'') ∈ ''R'' is called a ''certificate of membership'' of ''x'' in ''L''.

In general, a verifier does not have to be polynomial-time. However, for ''L'' to be in '''NP''', there must be a verifier that runs in polynomial time.

====Example====
Let
:&lt;math&gt;\mathrm{COMPOSITE} = \left \{x\in\mathbb{N} \mid x=pq \text{ for integers } p, q &gt; 1 \right \}&lt;/math&gt;
:&lt;math&gt;R = \left \{(x,y)\in\mathbb{N} \times\mathbb{N} \mid 1&lt;y \leq \sqrt x \text{ and } y \text{ divides } x \right \}.&lt;/math&gt;
Clearly, the question of whether a given ''x'' is a [[Composite number|composite]] is equivalent to the question of whether ''x'' is a member of COMPOSITE. It can be shown that COMPOSITE ∈ '''NP''' by verifying that it satisfies the above definition (if we identify natural numbers with their binary representations).

COMPOSITE also happens to be in '''P''', a fact demonstrated by the invention of the [[AKS primality test]].&lt;ref name=&quot;Agrawal&quot;&gt;{{cite journal |first=Manindra |last=Agrawal |first2=Neeraj |last2=Kayal |first3=Nitin |last3=Saxena |url=http://www.cse.iitk.ac.in/users/manindra/algebra/primality_v6.pdf |title=PRIMES is in '''P''' |journal=[[Annals of Mathematics]] |volume=160 |year=2004 |issue=2 |pages=781–793 |doi=10.4007/annals.2004.160.781 |jstor=3597229 }}&lt;/ref&gt;

===NP-completeness===
{{Main|NP-completeness}}

There are many equivalent ways of describing '''NP'''-completeness.

Let ''L'' be a language over a finite alphabet Σ.

''L'' is '''NP'''-complete if, and only if, the following two conditions are satisfied:

# ''L'' ∈ '''NP'''; and
# any ''L′'' in '''NP''' is polynomial-time-reducible to ''L'' (written as &lt;math&gt;L' \leq_{p} L&lt;/math&gt;), where &lt;math&gt;L' \leq_{p} L&lt;/math&gt; if, and only if, the following two conditions are satisfied:
## There exists ''f'' : Σ* → Σ* such that for all ''w'' in Σ* we have: &lt;math&gt;(w\in L' \Leftrightarrow f(w)\in L)&lt;/math&gt;; and
## there exists a polynomial-time Turing machine that halts with ''f''(''w'') on its tape on any input ''w''.

Alternatively, if ''L'' ∈ '''NP''', and there is another '''NP'''-complete problem that can be polynomial-time reduced to ''L'', then ''L'' is '''NP'''-complete. This is a common way of proving some new problem is '''NP'''-complete.

==Popular culture==
The film ''[[Travelling Salesman (2012 film)|Travelling Salesman]]'', by director Timothy Lanzone, is the story of four mathematicians hired by the US government to solve the '''P''' versus '''NP''' problem.&lt;ref&gt;{{cite journal|last=Geere|first=Duncan|title='Travelling Salesman' movie considers the repercussions if P equals NP|journal=Wired UK|url=https://www.wired.co.uk/news/archive/2012-04/26/travelling-salesman|accessdate=26 April 2012|date=2012-04-26}}&lt;/ref&gt;

In the sixth episode of ''[[The Simpsons]]''{{'}} seventh season &quot;[[Treehouse of Horror VI]]&quot;, the equation '''P'''='''NP''' is seen shortly after Homer accidentally stumbles into the &quot;third dimension&quot;.&lt;ref&gt;{{cite web|last=Hardesty|first=Larry|title=Explained: '''P''' vs. '''NP'''|url=https://news.mit.edu/2009/explainer-pnp}}&lt;/ref&gt;&lt;ref&gt;{{cite web|last=Shadia|first=Ajam|title=What is the '''P''' vs. '''NP''' problem? Why is it important?|url=http://science.nd.edu/news/what-is-the-p-vs-np-problem-and-why-is-it-important/}}&lt;/ref&gt;

In the second episode of season 2 of ''[[Elementary (TV series)|Elementary]]'', [[List of Elementary episodes#Season 2 (2013–14)|&quot;Solve for X&quot;]] revolves around Sherlock and Watson investigating the murders of mathematicians who were attempting to solve '''P''' versus '''NP'''.&lt;ref&gt;{{Cite web|url=https://blog.computationalcomplexity.org/2013/10/p-vs-np-is-elementary-no-p-vs-np-is-on.html|title=P vs NP is Elementary? No— P vs NP is ON Elementary|website=blog.computationalcomplexity.org|date=2013-10-07|last=Gasarch|first=William|language=en|access-date=2018-07-06}}&lt;/ref&gt;&lt;ref&gt;{{Cite news|url=http://www.tv.com/news/elementary-solve-for-x-review-sines-of-murder-138084402962/|title=Elementary Solve for X Review: Sines of Murder|last=Kirkpatrick|first=Noel|date=2013-10-04|work=TV.com|access-date=2018-07-06}}&lt;/ref&gt;

==See also==
* [[Game complexity]]
* [[List of unsolved problems in mathematics]]
* [[Unique games conjecture]]
* [[Unsolved problems in computer science]]

==Notes==
{{reflist|group=Note}}

==References==
{{Reflist|30em}}

==Further reading==
* {{cite book | last = Cormen | first = Thomas | title = Introduction to Algorithms | publisher = [[MIT Press]] | location = Cambridge | year = 2001 | isbn = 978-0-262-03293-3 | title-link = Introduction to Algorithms }}
* {{cite book | last1 = Garey | first1 = Michael | last2 = Johnson | first2 = David | title = Computers and Intractability: A Guide to the Theory of NP-Completeness | url = https://archive.org/details/computersintract0000gare | url-access = registration | publisher = [[W. H. Freeman and Company]] | location = San Francisco | year = 1979 | isbn = 978-0-7167-1045-5 }}
* {{cite book | last = Goldreich | first = Oded | title = P, NP, and NP-Completeness | publisher = Cambridge University Press | location = Cambridge | year = 2010 | isbn = 978-0-521-12254-2 }} [http://www.wisdom.weizmann.ac.il/~oded/bc-drafts.html Online drafts]
* {{Cite journal | last1 = Immerman | first1 = N. | title = Languages which capture complexity classes | pages = 760–778 | year = 1987 | journal=SIAM Journal on Computing | volume=16 | issue = 4 |doi=10.1137/0216051| citeseerx=10.1.1.75.3035 }}
* {{cite book | last = Papadimitriou | first = Christos | title = Computational Complexity | publisher = Addison-Wesley | location = Boston | year = 1994 | isbn = 978-0-201-53082-7 }}

==External links==
{{Sister project links| wikt=no | commons=no | b=no | n=no | q=P versus NP problem | s=no | v=no | voy=no | species=no | d=no}}

* {{cite web | last1= Fortnow | first1 = L. | last2 = Gasarch | first2 = W. | title = Computational complexity | url =  http://weblog.fortnow.com }}
* [https://www2.eecs.berkeley.edu/Pubs/TechRpts/2017/EECS-2017-146.pdf Aviad Rubinstein's ''Hardness of Approximation Between '''P''' and '''NP'''''], winner of the [[Association for Computing Machinery|ACM]]'s [https://awards.acm.org/about/2017-doctoral-dissertation 2017 Doctoral Dissertation Award].
* {{cite web |title=P vs. NP and the Computational Complexity Zoo |work= |date=August 26, 2014 |url=https://www.youtube.com/watch?v=YX40hbAHx3s |via=[[YouTube]] }}

{{ComplexityClasses}}
{{Use dmy dates|date=May 2012}}

{{DEFAULTSORT:P Versus Np Problem}}
[[Category:1956 in computer science]]
[[Category:Structural complexity theory]]
[[Category:Mathematical optimization]]
[[Category:Conjectures]]
[[Category:Unsolved problems in mathematics]]
[[Category:Unsolved problems in computer science]]
[[Category:Millennium Prize Problems]]
[[Category:Computer-related introductions in 1956]]</text>
      <sha1>to192m64hzczv5l1xyu0qng9pkfrflv</sha1>
    </revision>
  </page>
