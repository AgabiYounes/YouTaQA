  <page>
    <title>Common Gateway Interface</title>
    <ns>0</ns>
    <id>7220</id>
    <revision>
      <id>936093256</id>
      <parentid>936093102</parentid>
      <timestamp>2020-01-16T17:33:46Z</timestamp>
      <contributor>
        <username>MrOllie</username>
        <id>6908984</id>
      </contributor>
      <minor />
      <comment>Reverted 1 edit by [[Special:Contributions/136.228.173.241|136.228.173.241]] ([[User talk:136.228.173.241|talk]]) to last revision by MrOllie ([[WP:TW|TW]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{About|the software interface between a web server and programs|other uses|CGI (disambiguation)|}}

In [[computing]], '''Common Gateway Interface''' ('''CGI''') is an interface specification for [[web server]]s to execute programs that execute like [[console application]]s (also called [[command-line interface|command-line interface programs]]) running on a [[server (computing)|server]] that [[dynamic web page|generates web pages dynamically]]. Such programs are known as ''CGI scripts'' or simply as ''CGIs''. The specifics of how the script is executed by the server are determined by the server.  In the common case, a CGI script executes at the time a request is made and generates HTML.&lt;ref name=&quot;rfc-3875&quot;&gt;[http://tools.ietf.org/html/rfc3875 RFC3875: The Common Gateway Interface (CGI) Version 1.1]&lt;/ref&gt;

In brief, an HTTP GET or POST request from the client may send HTML form data to the CGI program via [[standard streams|standard input]]. Other data, such as URL paths, and HTTP header data, are presented as process environment variables.

== History ==
[[File:CGIlogo.gif|thumbnail|The official CGI logo from the spec announcement]]
In 1993 the [[National Center for Supercomputing Applications]] (NCSA) team wrote the specification for calling command line executables on the www-talk mailing list.&lt;ref&gt;{{cite mailing list |url=http://1997.webhistory.org/www.lists/www-talk.1993q4/0485.html |title=Server Scripts |mailing-list=www-talk |date=1993-11-14 |last=McCool |first=Rob |authorlink= Robert McCool |df=mdy |accessdate=2019-05-15}}&lt;/ref&gt;&lt;ref&gt;{{cite web |title=The Common Gateway Interface |url=http://hoohoo.ncsa.uiuc.edu/cgi/ |website=Hoohoo [[NCSA HTTPd]] |publisher=[[National Center for Supercomputing Applications|NCSA]] |archiveurl=https://web.archive.org/web/20100127161358/http://hoohoo.ncsa.illinois.edu/cgi/ |archivedate=2010-01-27}}&lt;/ref&gt;&lt;ref&gt;{{cite web |title=CGI: Common Gateway Interface |url=http://www.w3.org/CGI/ |website=[[World Wide Web Consortium|W3C]] |publisher=[[World Wide Web Consortium]] |df=mdy |accessdate=2019-05-15}}&lt;/ref&gt; The other Web server developers adopted it, and it has been a standard for Web servers ever since. A work group chaired by [[Ken Coar]] started in November 1997 to get the NCSA definition of CGI more formally defined.&lt;ref&gt;{{cite web |url=http://ken.coar.org/cgi/ |title=Common Gateway Interface RFC Project Page |archiveurl=https://web.archive.org/web/20130825202222/http://ken.coar.org/cgi/ |archivedate=2013-08-25}}&lt;/ref&gt; This work resulted in RFC 3875, which specified CGI Version 1.1. Specifically mentioned in the RFC are the following contributors:&lt;ref name=&quot;rfc-3875&quot;/&gt;
* [[Rob McCool]] (author of the [[NCSA HTTPd]] [[HTTP Server|Web Server]])
* John Franks (author of the GN Web Server)
* [[Ari Luotonen]] (the developer of the [[CERN httpd]] Web Server)
* Tony Sanders (author of the Plexus Web Server)
* George Phillips (Web server maintainer at the [[University of British Columbia]])

Historically CGI scripts were often written using the C language. RFC 3875 &quot;The Common Gateway Interface (CGI)&quot; partially defines CGI using C,&lt;ref name=&quot;rfc-3875&quot;/&gt; as in saying that environment variables &quot;are accessed by the C library routine getenv() or variable environ&quot;.

The name CGI comes from the early days of the web, where ''webmasters'' wanted to connect legacy information systems such as databases to their web servers. The CGI program was executed by the server that provided a common &quot;gateway&quot; between the web server and the legacy information system.

== Purpose of the CGI specification ==
Each [[web server]] runs [[HTTP]] server software, which responds to requests from [[Web_browser|web browsers]]. Generally, the HTTP server has a [[Directory_(computing)|directory (folder)]], which is designated as a document collection — files that can be sent to Web browsers connected to this server.&lt;ref&gt;[http://httpd.apache.org/docs/2.2/urlmapping.html Mapping URLs to Filesystem Locations Apache HTTP Server Version 2.2]&lt;/ref&gt; For example, if the Web server has the domain name &lt;code&gt;example.com&lt;/code&gt;, and its document collection is stored at &lt;code&gt;/usr/local/apache/htdocs&lt;/code&gt; in the local file system, then the Web server will respond to a request for &lt;code&gt;&lt;nowiki&gt;http://example.com/index.html&lt;/nowiki&gt;&lt;/code&gt; by sending to the browser the (pre-written) file &lt;code&gt;/usr/local/apache/htdocs/index.html&lt;/code&gt;.

For pages constructed on the fly, the server software may defer requests to separate programs and relay the results to the requesting client (usually, a web browser that displays the page to the end user).  In the early days of the web, such programs were usually small and written in a scripting language; hence, they were known as ''scripts''.

Such programs usually require some additional information to be specified with the request. For instance, if Wikipedia were implemented as a script, one thing the script would need to know is whether the user is logged in and, if logged in, under which name.  The content at the top of a Wikipedia page depends on this information.

HTTP provides ways for browsers to pass such information to the web server, e.g. as part of the URL. The server software must then pass this information through to the script somehow.

Conversely, upon returning, the script must provide all the information required by HTTP for a response to the request: the HTTP status of the request, the document content (if available), the document type (e.g. HTML, PDF, or plain text), et cetera.

Initially, different server software would use different ways to exchange this information with scripts. As a result, it wasn't possible to write scripts that would work unmodified for different server software, even though the information being exchanged was the same.  Therefore, it was decided to specify a way for exchanging this information: CGI (the ''Common Gateway Interface'', as it defines a common way for server software to interface with scripts).
Webpage generating programs invoked by server software that operate according to the CGI specification are known as ''CGI scripts''.

This specification was quickly adopted and is still supported by all well-known server software, such as [[Apache HTTP Server|Apache]], [[Internet Information Services|IIS]], and (with an extension) [[node.js]]-based servers.

An early use of CGI scripts was to process forms. In the beginning of HTML, HTML forms typically had an &quot;action&quot; attribute and a button designated as the &quot;submit&quot; button. When the submit button is pushed the URI specified in the &quot;action&quot; attribute would be sent to the server with the data from the form sent as a query string. If the &quot;action&quot; specifies a CGI script then the CGI script would be executed and it then produces an HTML page.

== Using CGI scripts ==
A web server allows its owner to configure which URLs shall be handled by which CGI scripts.

This is usually done by marking a new directory within the document collection as containing CGI scripts — its name is often &lt;code&gt;cgi-bin&lt;/code&gt;. For example, &lt;code&gt;/usr/local/apache/htdocs/cgi-bin&lt;/code&gt; could be designated as a CGI directory on the web server. When a Web browser requests a URL that points to a file within the CGI directory (e.g., &lt;code&gt;&lt;nowiki&gt;http://example.com/cgi-bin/printenv.pl/with/additional/path?and=a&amp;query=string&lt;/nowiki&gt;&lt;/code&gt;), then, instead of simply sending that file (&lt;code&gt;/usr/local/apache/htdocs/cgi-bin/printenv.pl&lt;/code&gt;) to the Web browser, the HTTP server runs the specified script and passes the output of the script to the Web browser. That is, anything that the script sends to [[standard output]] is passed to the Web client instead of being shown on-screen in a terminal window.

As remarked above, the CGI specification defines how additional information passed with the request is passed to the script.
For instance, if a slash and additional directory name(s) are appended to the URL immediately after the name of the script (in this example, &lt;code&gt;/with/additional/path&lt;/code&gt;), then that path is stored in the &lt;code&gt;PATH_INFO&lt;/code&gt; [[environment variable]] before the script is called. If parameters are sent to the script via an [[HTTP GET]] request (a question mark appended to the URL, followed by param=value pairs; in the example, &lt;code&gt;?and=a&amp;query=string&lt;/code&gt;), then those parameters are stored in the &lt;code&gt;QUERY_STRING&lt;/code&gt; environment variable before the script is called. If parameters are sent to the script via an [[HTTP POST]] request, they are passed to the script's [[standard input]]. The script can then read these environment variables or data from standard input and adapt to the Web browser's request.&lt;ref&gt;Nelson, Anne Fulcher, and Nelson, William Harris Morehead. (2001). Building Electronic Commerce with Web Database Constructions. Boston, MA: Addison Wesley.&lt;/ref&gt;

== Example ==
The following [[Perl]] program shows all the environment variables passed by the Web server:

&lt;source lang=&quot;perl&quot;&gt;
#!/usr/bin/perl

=head1 DESCRIPTION

printenv — a CGI program that just prints its environment

=cut
print &quot;Content-Type: text/plain\n\n&quot;;

for my $var ( sort keys %ENV ) {
    printf &quot;%s = \&quot;%s\&quot;\n&quot;, $var, $ENV{$var};
}
&lt;/source&gt;

If a Web browser issues a request for the environment variables at &lt;code&gt;&lt;nowiki&gt;http://example.com/cgi-bin/printenv.pl/foo/bar?var1=value1&amp;var2=with%20percent%20encoding&lt;/nowiki&gt;&lt;/code&gt;, a 64-bit [[Windows 7]] web server running [[cygwin]] returns the following information:

 COMSPEC=&quot;C:\Windows\system32\cmd.exe&quot;
 DOCUMENT_ROOT=&quot;C:/Program Files (x86)/Apache Software Foundation/Apache2.4/htdocs&quot;
 GATEWAY_INTERFACE=&quot;CGI/1.1&quot;
 HOME=&quot;/home/SYSTEM&quot;
 HTTP_ACCEPT=&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;
 HTTP_ACCEPT_CHARSET=&quot;ISO-8859-1,utf-8;q=0.7,*;q=0.7&quot;
 HTTP_ACCEPT_ENCODING=&quot;gzip, deflate, br&quot;
 HTTP_ACCEPT_LANGUAGE=&quot;en-us,en;q=0.5&quot;
 HTTP_CONNECTION=&quot;keep-alive&quot;
 HTTP_HOST=&quot;example.com&quot;
 HTTP_USER_AGENT=&quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:67.0) Gecko/20100101 Firefox/67.0&quot;
 PATH=&quot;/home/SYSTEM/bin:/bin:/cygdrive/c/progra~2/php:/cygdrive/c/windows/system32:...&quot;
 PATHEXT=&quot;.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC&quot;
 PATH_INFO=&quot;/foo/bar&quot;
 PATH_TRANSLATED=&quot;C:\Program Files (x86)\Apache Software Foundation\Apache2.4\htdocs\foo\bar&quot;
 QUERY_STRING=&quot;var1=value1&amp;var2=with%20percent%20encoding&quot;
 REMOTE_ADDR=&quot;127.0.0.1&quot;
 REMOTE_PORT=&quot;63555&quot;
 REQUEST_METHOD=&quot;GET&quot;
 REQUEST_URI=&quot;/cgi-bin/printenv.pl/foo/bar?var1=value1&amp;var2=with%20percent%20encoding&quot;
 SCRIPT_FILENAME=&quot;C:/Program Files (x86)/Apache Software Foundation/Apache2.4/cgi-bin/printenv.pl&quot;
 SCRIPT_NAME=&quot;/cgi-bin/printenv.pl&quot;
 SERVER_ADDR=&quot;127.0.0.1&quot;
 SERVER_ADMIN=&quot;(server admin's email address)&quot;
 SERVER_NAME=&quot;127.0.0.1&quot;
 SERVER_PORT=&quot;80&quot;
 SERVER_PROTOCOL=&quot;HTTP/1.1&quot;
 SERVER_SIGNATURE=&quot;&quot;
 SERVER_SOFTWARE=&quot;Apache/2.4.39 (Win32) PHP/7.3.7&quot;
 SYSTEMROOT=&quot;C:\Windows&quot;
 TERM=&quot;cygwin&quot;
 WINDIR=&quot;C:\Windows&quot;

Some, but not all, of these variables are defined by the CGI standard.
Some, such as &lt;code&gt;PATH_INFO&lt;/code&gt;, &lt;code&gt;QUERY_STRING&lt;/code&gt;, and the ones starting with &lt;code&gt;HTTP_&lt;/code&gt;, pass information along from the HTTP request.

From the environment, it can be seen that the Web browser is [[Firefox]] running on a [[Windows 7]] PC, the Web server is [[Apache HTTP server|Apache]] running on a system that emulates [[Unix]], and the CGI script is named &lt;code&gt;cgi-bin/printenv.pl&lt;/code&gt;.

The program could then generate any content, write that to [[Standard streams#Standard output .28stdout.29|standard output]], and the Web server will transmit it to the browser.

The following are [[environment variable]]s passed to CGI programs:

* '''Server specific variables:'''
** &lt;code&gt;SERVER_SOFTWARE&lt;/code&gt;: &lt;var&gt;name&lt;/var&gt;/&lt;var&gt;version&lt;/var&gt; of [[HTTP server]].
** &lt;code&gt;SERVER_NAME&lt;/code&gt;: [[host name]] of the server, may be [[dot-decimal notation|dot-decimal]] IP address.
** &lt;code&gt;GATEWAY_INTERFACE&lt;/code&gt;: CGI/&lt;var&gt;version&lt;/var&gt;.
* '''Request specific variables:'''
** &lt;code&gt;SERVER_PROTOCOL&lt;/code&gt;: HTTP/&lt;var&gt;version&lt;/var&gt;.
** &lt;code&gt;SERVER_PORT&lt;/code&gt;: [[TCP port]] (decimal).
** &lt;code&gt;REQUEST_METHOD&lt;/code&gt;: name of HTTP method (see above).
** &lt;code&gt;PATH_INFO&lt;/code&gt;: path suffix, if appended to URL after program name and a slash.
** &lt;code&gt;PATH_TRANSLATED&lt;/code&gt;: corresponding [[full path]] as supposed by server, if &lt;code&gt;PATH_INFO&lt;/code&gt; is present.
** &lt;code&gt;SCRIPT_NAME&lt;/code&gt;: relative path to the program, like &lt;code&gt;/cgi-bin/script.cgi&lt;/code&gt;.
** &lt;code&gt;QUERY_STRING&lt;/code&gt;: the part of URL after [[question mark|&lt;span style=&quot;background-color:#FFFFCC; padding: 2px&quot;&gt;?&lt;/span&gt;]] character. The [[query string]] may be composed of *&lt;var&gt;name&lt;/var&gt;=&lt;var&gt;value&lt;/var&gt; pairs separated with [[ampersand]]s (such as &lt;var&gt;var1&lt;/var&gt;=&lt;var&gt;val1&lt;/var&gt;'''&amp;amp;'''&lt;var&gt;var2&lt;/var&gt;=&lt;var&gt;val2&lt;/var&gt;...) when used to submit [[form (web)|form]] data transferred via GET method as defined by HTML [[application/x-www-form-urlencoded]].
** &lt;code&gt;REMOTE_HOST&lt;/code&gt;: host name of the client, unset if server did not perform such lookup.
** &lt;code&gt;REMOTE_ADDR&lt;/code&gt;: [[IP address]] of the client (dot-decimal).
** &lt;code&gt;AUTH_TYPE&lt;/code&gt;: identification type, if applicable.
** &lt;code&gt;REMOTE_USER&lt;/code&gt; used for certain &lt;code&gt;AUTH_TYPE&lt;/code&gt;s.
** &lt;code&gt;REMOTE_IDENT&lt;/code&gt;: see [[ident protocol|ident]], only if server performed such lookup.
** &lt;code&gt;CONTENT_TYPE&lt;/code&gt;: [[Internet media type]] of input data if PUT or POST method are used, as provided via HTTP header.
** &lt;code&gt;CONTENT_LENGTH&lt;/code&gt;: similarly, size of input data (decimal, in [[octet (computing)|octets]]) if provided via HTTP header.
** Variables passed by user agent (&lt;code&gt;HTTP_ACCEPT&lt;/code&gt;, &lt;code&gt;HTTP_ACCEPT_LANGUAGE&lt;/code&gt;, &lt;code&gt;HTTP_USER_AGENT&lt;/code&gt;, &lt;code&gt;HTTP_COOKIE&lt;/code&gt; and possibly others) contain values of corresponding [[HTTP headers]] and therefore have the same sense.

The program returns the result to the Web server in the form of standard output, beginning with a header and a [[Line (text file)|blank line]].

The header is encoded in the same way as an [[List of HTTP headers|HTTP header]] and must include the [[MIME type]] of the document returned.&lt;ref&gt;[http://www.citycat.ru/doc/CGI/overview/primer.html CGI Primer (Mirror at citycat.ru)]&lt;/ref&gt; The headers, supplemented by the Web server, are generally forwarded with the response back to the user.

Here is a simple CGI program written in Python 3 along with the HTML that handles a simple addition problem.&lt;ref&gt;{{Cite web|url=http://www.abacles.com/html-forms.html|title=Abacles HTML Forms|website=www.abacles.com|access-date=2016-04-06}}&lt;/ref&gt;

&lt;code&gt;add.html&lt;/code&gt;:
&lt;syntaxhighlight lang=&quot;html&quot;&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
 &lt;body&gt;
  &lt;form action=&quot;add.cgi&quot; method=&quot;POST&quot;&gt;
   &lt;fieldset&gt;
     &lt;legend&gt;Enter two numbers to add&lt;/legend&gt;
     &lt;label&gt;First Number: &lt;input type=&quot;number&quot; name=&quot;num1&quot;&gt;&lt;/label&gt;&lt;br&gt;
     &lt;label&gt;Second Number: &lt;input type=&quot;number&quot; name=&quot;num2&quot;&gt;&lt;/label&gt;&lt;br&gt;
   &lt;/fieldset&gt;
   &lt;button&gt;Add&lt;/button&gt;
  &lt;/form&gt;
 &lt;/body&gt;
&lt;/html&gt;
&lt;/syntaxhighlight&gt;
&lt;code&gt;add.cgi&lt;/code&gt;:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
#!/usr/bin/env python3

import cgi, cgitb
cgitb.enable()

input_data = cgi.FieldStorage()

print('Content-Type: text/html') # HTML is following
print()                         # Leave a blank line
print('&lt;h1&gt;Addition Results&lt;/h1&gt;')
try:
    num1 = int(input_data[&quot;num1&quot;].value)
    num2 = int(input_data[&quot;num2&quot;].value)
except:
    print('&lt;output&gt;Sorry, the script cannot turn your inputs into numbers (integers).&lt;/output&gt;')
    raise SystemExit(1)
print('&lt;output&gt;{0} + {1} = {2}&lt;/output&gt;'.format(num1, num2, num1 + num2))
&lt;/syntaxhighlight&gt;This Python 3 CGI program gets the inputs from the HTML and adds the two numbers together.

== Deployment ==
A Web server that supports CGI can be configured to interpret a [[Uniform Resource Locator|URL]] that it serves as a reference to a CGI script. A common convention is to have a &lt;code&gt;cgi-bin/&lt;/code&gt; [[Directory (computing)|directory]] at the base of the directory tree and treat all executable files within this directory (and no other, for security) as CGI scripts. Another popular convention is to use [[filename extension]]s; for instance, if CGI scripts are consistently given the extension &lt;code&gt;.cgi&lt;/code&gt;, the web server can be configured to interpret all such files as CGI scripts. While convenient, and required by many prepackaged scripts, it opens the server to attack if a remote user can upload executable code with the proper extension.

In the case of [[HTTP#Request methods|HTTP PUT or POSTs]], the user-submitted data are provided to the program via the [[standard input]]. The Web server creates a subset of the [[environment variable]]s passed to it and adds details pertinent to the HTTP environment.

== Uses ==
CGI is often used to process inputs information from the user and produce the appropriate output. An example of a CGI program is one implementing a [[wiki]]. The user agent requests the name of an entry; the Web server executes the CGI; the CGI program retrieves the source of that entry's page (if one exists), transforms it into [[HTML]], and prints the result. The web server receives the input from the CGI and transmits it to the user agent. If the &quot;Edit this page&quot; link is clicked, the CGI populates an HTML &lt;code&gt;textarea&lt;/code&gt; or other editing control with the page's contents, and saves it back to the server when the user submits the form in it.

== Security ==
CGI programs run, by default, in the security context of the web server. When first introduced a number of example scripts were provided with the reference distributions of the NCSA, Apache and CERN web servers to show how shell scripts or C programs could be coded to make use of the new CGI. One such example script was a CGI program called PHF that implemented a simple phone book.

In common with a number of other scripts at the time, this script made use of a function: escape_shell_cmd(). The function was supposed to sanitize its argument, which came from user input and then pass the input to the Unix shell, to be run in the security context of the web server. The script did not correctly sanitize all input and allowed new lines to be passed to the shell, which effectively allowed multiple commands to be run. The results of these commands were then displayed on the web server. If the security context of the web server allowed it, malicious commands could be executed by attackers.

This was the first widespread example of a new type of web based attack, where unsanitized data from web users could lead to execution of code on a web server. Because the example code was installed by default, attacks were widespread and led to a number of security advisories in early 1996.&lt;ref&gt;{{cite web |title=phf CGI Script fails to guard against newline characters |url=https://www.kb.cert.org/vuls/id/20276/ |website=Software Engineering Institute CERT Coordination Center |accessdate=21 November 2019}}&lt;/ref&gt;

== Alternatives ==
Calling a command generally means the invocation of a newly created [[Process (computing)|process]] on the server. Starting the process can consume much more time and memory than the actual work of generating the output, especially when the program still needs to be [[interpret]]ed or [[compiler|compiled]].
If the command is called often, the resulting workload can quickly overwhelm the server.

The [[computational overhead|overhead]] involved in process creation can be reduced by techniques such as [[FastCGI]] that &quot;prefork&quot; interpreter processes, or by running the application code entirely within the web server, using extension modules such as [[mod_perl]] or [[mod_php]]. Another way to reduce the overhead is to use precompiled CGI programs, e.g. by writing them in languages such as [[C (programming language)|C]] or [[C++]], rather than interpreted or compiled-on-the-fly languages such as [[Perl]] or [[PHP]], or by implementing the page generating software as a custom webserver module.

Alternative approaches include:

* Extensions such as [[Apache modules]], [[Netscape Server Application Programming Interface|NSAPI]] plugins, and [[ISAPI]] plugins allow third-party software to run on the web server.  [[Web 2.0]] allows to transfer data from the client to the server without using HTML forms and without the user noticing.&lt;ref&gt;{{cite thesis |author=Enrico Marino |date=11 September 2018 |title=Information Management in the Distributed Web |type=phd |publisher=[[Roma Tre University]] |url=http://phd.dia.uniroma3.it/wp-content/uploads/2018/03/Phd-Thesis-Enrico-Marino.pdf |access-date=11 February 2019}}&lt;/ref&gt;
* [[FastCGI]] reduces overhead by allowing a single, long-running process to handle more than one user request. Unlike converting an application to a web server plug-in, FastCGI applications remain independent of the web server.
* [[Simple Common Gateway Interface]] or SCGI is designed to be easier to implement, yet it reduces latency in some operations compared to CGI. 
* Replacement of the architecture for dynamic websites can also be used. This is the approach taken by [[Java EE]], which runs Java code in a Java servlet container in order to serve dynamic content and optionally static content. This approach replaces the overhead of generating and destroying processes with the much lower overhead of generating and destroying [[Thread (computer science)|threads]], and also exposes the programmer to the library that comes with [[Java Platform, Standard Edition]] on which the version of Java EE in use is based.

The optimal configuration for any Web application depends on application-specific details, amount of traffic, and complexity of the transaction; these tradeoffs need to be analyzed to determine the best implementation for a given task and time budget.  [[Web_framework|Web Frameworks]] offer an alternative to using CGI scripts to interact with user agents.

== See also ==
* [[CGI.pm]]
* [[DOS Gateway Interface]] (DGI)
* [[FastCGI]]
* [[Perl Web Server Gateway Interface]]
* [[Rack (web server interface)]]
* [[Server Side Includes]]
* [[Web Server Gateway Interface]]

== References ==
{{Reflist}}

== External links ==
* [https://www.gnu.org/software/cgicc/ GNU cgicc], a C++ class library for writing CGI applications
* [https://metacpan.org/pod/CGI CGI], a standard Perl module for CGI request parsing and HTML response generation
* [http://www.cgi101.com/learn/ CGI Programming 101: Learn CGI Today!], a CGI tutorial

{{Web interfaces}}

{{Use dmy dates|date=July 2012}}

[[Category:Servers (computing)]]
[[Category:Web 1.0]]
[[Category:Web technology]]
[[Category:Network protocols]]
[[Category:Articles with example Python code]]</text>
      <sha1>k8z10d6ac88joff23v4tcxd1ef66gdk</sha1>
    </revision>
  </page>
