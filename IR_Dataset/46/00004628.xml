  <page>
    <title>Bilinear transform</title>
    <ns>0</ns>
    <id>4628</id>
    <revision>
      <id>936849926</id>
      <parentid>926464682</parentid>
      <timestamp>2020-01-21T11:29:30Z</timestamp>
      <contributor>
        <username>Wellset</username>
        <id>19960916</id>
      </contributor>
      <minor />
      <comment>/* General second-order biquad transformation */ fixed link to Direct form I</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{refimprove|date=June 2009}}
The '''bilinear transform''' (also known as '''[[Arnold Tustin|Tustin]]'s method''') is used in [[digital signal processing]] and discrete-time [[control theory]] to transform continuous-time system representations to discrete-time and vice versa.

The bilinear transform is a special case of a [[conformal map]]ping (namely, a [[MÃ¶bius transformation]]), often used to convert a [[transfer function]] &lt;math&gt; H_a(s) \ &lt;/math&gt; of a [[linear]], [[time-invariant]] ([[LTI system theory|LTI]]) filter in the [[continuous function|continuous]]-time domain (often called an [[analog filter]]) to a transfer function &lt;math&gt; H_d(z) \ &lt;/math&gt; of a linear, shift-invariant filter in the [[discrete signal|discrete]]-time domain (often called a [[digital filter]] although there are analog filters constructed with [[switched capacitor]]s that are discrete-time filters). It maps positions on the &lt;math&gt; j \omega \ &lt;/math&gt; axis, &lt;math&gt; Re[s]=0 \ &lt;/math&gt;, in the [[s-plane]] to the [[unit circle]], &lt;math&gt; |z| = 1 \ &lt;/math&gt;, in the [[complex plane|z-plane]].  Other bilinear transforms can be used to warp the [[frequency response]] of any discrete-time linear system (for example to approximate the non-linear frequency resolution of the human auditory system) and are implementable in the discrete domain by replacing a system's unit delays &lt;math&gt; \left( z^{-1} \right) \ &lt;/math&gt; with first order [[all-pass filter]]s.

The transform preserves [[BIBO stability|stability]] and maps every point of the [[frequency response]] of the continuous-time filter, &lt;math&gt; H_a(j \omega_a) \ &lt;/math&gt; to a corresponding point in the frequency response of the discrete-time filter, &lt;math&gt; H_d(e^{j \omega_d T}) \ &lt;/math&gt; although to a somewhat different frequency, as shown in the [[#Frequency warping|Frequency warping]] section below.  This means that for every feature that one sees in the frequency response of the analog filter, there is a corresponding feature, with identical gain and phase shift, in the frequency response of the digital filter but, perhaps, at a somewhat different frequency.  This is barely noticeable at low frequencies but is quite evident at frequencies close to the [[Nyquist frequency]].

== Discrete-time approximation ==
The bilinear transform is a first-order approximation of the natural logarithm function that is an exact mapping of the ''z''-plane to the ''s''-plane.  When the [[Laplace transform]] is performed on a discrete-time signal (with each element of the discrete-time sequence attached to a correspondingly delayed [[Dirac delta function|unit impulse]]), the result is precisely the [[Z transform]] of the discrete-time sequence with the substitution of

:&lt;math&gt;
\begin{align}
z &amp;= e^{sT}   \\
  &amp;= \frac{e^{sT/2}}{e^{-sT/2}} \\
  &amp;\approx \frac{1 + s T / 2}{1 - s T / 2}
\end{align}
&lt;/math&gt;

where &lt;math&gt; T \ &lt;/math&gt; is the [[numerical integration]] step size of the [[trapezoidal rule]] used in the bilinear transform derivation;&lt;ref&gt;{{cite book |title=Discrete Time Signal Processing Third Edition |last=Oppenheim |first=Alan |year=2010 |publisher=Pearson Higher Education, Inc. |location=Upper Saddle River, NJ |isbn=978-0-13-198842-2 |page=504}}&lt;/ref&gt; or, in other words, the sampling period. The above bilinear approximation can be solved for &lt;math&gt; s \ &lt;/math&gt; or a similar approximation for &lt;math&gt; s = (1/T) \ln(z) \  \ &lt;/math&gt; can be performed.

The inverse of this mapping (and its first-order bilinear [[Logarithm#Power series|approximation]]) is

:&lt;math&gt;
\begin{align}
s &amp;= \frac{1}{T} \ln(z)  \\
  &amp;= \frac{2}{T} \left[\frac{z-1}{z+1} + \frac{1}{3} \left( \frac{z-1}{z+1} \right)^3  + \frac{1}{5} \left( \frac{z-1}{z+1} \right)^5  + \frac{1}{7} \left( \frac{z-1}{z+1} \right)^7 + \cdots \right] \\
  &amp;\approx  \frac{2}{T} \frac{z - 1}{z + 1} \\
  &amp;=  \frac{2}{T} \frac{1 - z^{-1}}{1 + z^{-1}}
\end{align}
&lt;/math&gt;

The bilinear transform essentially uses this first order approximation and substitutes into the continuous-time transfer function, &lt;math&gt; H_a(s) \ &lt;/math&gt;

:&lt;math&gt;s \leftarrow \frac{2}{T} \frac{z - 1}{z + 1}.&lt;/math&gt;

That is

:&lt;math&gt;H_d(z) = H_a(s) \bigg|_{s = \frac{2}{T} \frac{z - 1}{z + 1}}= H_a \left( \frac{2}{T} \frac{z-1}{z+1} \right). \ &lt;/math&gt;

== Stability and minimum-phase property preserved ==
A continuous-time causal filter is [[BIBO stability|stable]] if the [[Pole (complex analysis)|poles]] of its transfer function fall in the left half of the [[complex number|complex]] [[s-plane]]. A discrete-time causal filter is stable if the poles of its transfer function fall inside the [[unit circle]] in the [[complex plane|complex z-plane]]. The bilinear transform maps the left half of the complex s-plane to the interior of the unit circle in the z-plane. Thus, filters designed in the continuous-time domain that are stable are converted to filters in the discrete-time domain that preserve that stability.

Likewise, a continuous-time filter is [[minimum-phase]] if the [[Zero (complex analysis)|zeros]] of its transfer function fall in the left half of the complex s-plane. A discrete-time filter is minimum-phase if the zeros of its transfer function fall inside the unit circle in the complex z-plane. Then the same mapping property assures that continuous-time filters that are minimum-phase are converted to discrete-time filters that preserve that property of being minimum-phase.

== Example ==
As an example take a simple [[low-pass]] [[RC filter]].  This continuous-time filter has a transfer function

:&lt;math&gt;\begin{align}
H_a(s) &amp;= \frac{1/sC}{R+1/sC} \\
&amp;= \frac{1}{1 + RC s}.
\end{align}&lt;/math&gt;

If we wish to implement this filter as a digital filter, we can apply the bilinear transform by substituting for &lt;math&gt;s&lt;/math&gt; the formula above; after some reworking, we get the following filter representation:

:{|
|-
|&lt;math&gt;H_d(z) \ &lt;/math&gt;
|&lt;math&gt; =H_a \left( \frac{2}{T} \frac{z-1}{z+1}\right) \ &lt;/math&gt;
|-
|
|&lt;math&gt;= \frac{1}{1 + RC \left( \frac{2}{T} \frac{z-1}{z+1}\right)} \ &lt;/math&gt;
|-
|
|&lt;math&gt;= \frac{1 + z}{(1 - 2 RC / T) + (1 + 2RC / T) z} \ &lt;/math&gt;
|-
|
|&lt;math&gt;= \frac{1 + z^{-1}}{(1 + 2RC / T) + (1 - 2RC / T) z^{-1}}. \ &lt;/math&gt;
|}

The coefficients of the denominator are the 'feed-backward' coefficients and the coefficients of the numerator are the 'feed-forward' coefficients used to implement a real-time [[digital filter]].

== Transformation for a general first-order continuous-time filter ==
It is possible to relate the coefficients of a continuous-time, analog filter with those of a similar discrete-time digital filter created through the bilinear transform process. Transforming a general, first-order continuous-time filter with the given transfer function

:&lt;math&gt;H_a(s) = \frac{b_0 s + b_1}{a_0 s + a_1} = \frac{b_0 + b_1 s^{-1}}{a_0 + a_1 s^{-1}}&lt;/math&gt;

using the bilinear transform (without prewarping any frequency specification) requires the substitution of

:&lt;math&gt;s \leftarrow K \frac{1 - z^{-1}}{1 + z^{-1}}&lt;/math&gt;

where

:&lt;math&gt;K \triangleq \frac{2}{T} &lt;/math&gt;.

However, if the frequency warping compensation as described below is used in the bilinear transform, so that both analog and digital filter gain and phase agree at frequency &lt;math&gt;\omega_0&lt;/math&gt;, then

:&lt;math&gt;K \triangleq \frac{\omega_0}{\tan\left(\frac{\omega_0 T}{2}\right)} &lt;/math&gt;.

This results in a discrete-time digital filter with coefficients expressed in terms of the coefficients of the original continuous time filter:
:&lt;math&gt;H_d(z)=\frac{(b_0 K + b_1) + (-b_0 K + b_1)z^{-1}}{(a_0 K + a_1) + (-a_0 K + a_1)z^{-1}}&lt;/math&gt;

Normally the constant term in the denominator must be normalized to 1 before deriving the corresponding [[difference equation]].  This results in

:&lt;math&gt;H_d(z)=\frac{\frac{b_0 K + b_1}{a_0 K + a_1} + \frac{-b_0 K + b_1}{a_0 K + a_1}z^{-1}}{1 + \frac{-a_0 K + a_1}{a_0 K + a_1}z^{-1}}. &lt;/math&gt;

The difference equation (using the [[Digital filter#Direct Form I|Direct Form I]]) is

:&lt;math&gt;
y[n] = \frac{b_0 K + b_1}{a_0 K + a_1} \cdot x[n] + \frac{-b_0 K + b_1}{a_0 K + a_1} \cdot x[n-1] - \frac{-a_0 K + a_1}{a_0 K + a_1} \cdot y[n-1] \ .
&lt;/math&gt;

== General second-order biquad transformation ==
A similar process can be used for a general second-order filter with the given transfer function

:&lt;math&gt;H_a(s) = \frac{b_0 s^2 + b_1 s + b_2}{a_0 s^2 + a_1 s + a_2} = \frac{b_0 + b_1 s^{-1} + b_2 s^{-2}}{a_0 + a_1 s^{-1} + a_2 s^{-2}} \ . &lt;/math&gt;

This results in a discrete-time [[digital biquad filter]] with coefficients expressed in terms of the coefficients of the original continuous time filter:
:&lt;math&gt;H_d(z)=\frac{(b_0 K^2 + b_1 K + b_2) + (2b_2 - 2b_0 K^2)z^{-1} + (b_0 K^2 - b_1 K + b_2)z^{-2}}{(a_0 K^2 + a_1 K + a_2) + (2a_2 - 2a_0 K^2)z^{-1} + (a_0 K^2 - a_1 K + a_2)z^{-2}}&lt;/math&gt;

Again, the constant term in the denominator is generally normalized to 1 before deriving the corresponding [[difference equation]].  This results in

:&lt;math&gt;H_d(z)=\frac{\frac{b_0 K^2 + b_1 K + b_2}{a_0 K^2 + a_1 K + a_2} + \frac{2b_2 - 2b_0 K^2}{a_0 K^2 + a_1 K + a_2}z^{-1} + \frac{b_0 K^2 - b_1 K + b_2}{a_0 K^2 + a_1 K + a_2}z^{-2}}{1 + \frac{2a_2 - 2a_0 K^2}{a_0 K^2 + a_1 K + a_2}z^{-1} + \frac{a_0 K^2 - a_1 K + a_2}{a_0 K^2 + a_1 K + a_2}z^{-2}}. &lt;/math&gt;

The difference equation (using the [[Digital filter#Direct form I|Direct form I]]) is

:&lt;math&gt;
y[n] = \frac{b_0 K^2 + b_1 K + b_2}{a_0 K^2 + a_1 K + a_2} \cdot x[n] + \frac{2b_2 - 2b_0 K^2}{a_0 K^2 + a_1 K + a_2} \cdot x[n-1] + \frac{b_0 K^2 - b_1 K + b_2}{a_0 K^2 + a_1 K + a_2} \cdot x[n-2] - \frac{2a_2 - 2a_0 K^2}{a_0 K^2 + a_1 K + a_2} \cdot y[n-1] - \frac{a_0 K^2 - a_1 K + a_2}{a_0 K^2 + a_1 K + a_2} \cdot y[n-2] \ .
&lt;/math&gt;

== Frequency warping ==
To determine the frequency response of a continuous-time filter, the [[transfer function]] &lt;math&gt; H_a(s) &lt;/math&gt; is evaluated at &lt;math&gt;s = j \omega_a &lt;/math&gt; which is on the &lt;math&gt; j \omega &lt;/math&gt; axis.  Likewise, to determine the frequency response of a discrete-time filter, the transfer function &lt;math&gt; H_d(z) &lt;/math&gt; is evaluated at &lt;math&gt;z = e^{ j \omega_d T} &lt;/math&gt; which is on the unit circle, &lt;math&gt; |z| = 1 &lt;/math&gt;.  The bilinear transform maps the &lt;math&gt; j \omega &lt;/math&gt; axis of the ''s''-plane (of which is the domain of &lt;math&gt; H_a(s) &lt;/math&gt;) to the unit circle of the ''z''-plane, &lt;math&gt; |z| = 1 &lt;/math&gt; (which is the domain of &lt;math&gt; H_d(z) &lt;/math&gt;), but it is '''not''' the same mapping &lt;math&gt; z = e^{sT} &lt;/math&gt; which also maps the &lt;math&gt; j \omega &lt;/math&gt; axis to the unit circle.  When the actual frequency of &lt;math&gt; \omega_d &lt;/math&gt; is input to the discrete-time filter designed by use of the bilinear transform, then it is desired to know at what frequency, &lt;math&gt; \omega_a &lt;/math&gt;, for the continuous-time filter that this &lt;math&gt; \omega_d &lt;/math&gt; is mapped to.

:&lt;math&gt;H_d(z) = H_a \left( \frac{2}{T} \frac{z-1}{z+1}\right) &lt;/math&gt;

:{|
|-
|&lt;math&gt;H_d(e^{ j \omega_d T}) &lt;/math&gt;
|&lt;math&gt;= H_a \left( \frac{2}{T} \frac{e^{ j \omega_d T} - 1}{e^{ j \omega_d T} + 1}\right) &lt;/math&gt;
|-
|
|&lt;math&gt;= H_a \left( \frac{2}{T} \cdot \frac{e^{j \omega_d T/2} \left(e^{j \omega_d T/2} - e^{-j \omega_d T/2}\right)}{e^{j \omega_d T/2} \left(e^{j \omega_d T/2} + e^{-j \omega_d T/2 }\right)}\right) &lt;/math&gt;
|-
|
|&lt;math&gt;= H_a \left( \frac{2}{T} \cdot \frac{\left(e^{j \omega_d T/2} - e^{-j \omega_d T/2}\right)}{\left(e^{j \omega_d T/2} + e^{-j \omega_d T/2 }\right)}\right) &lt;/math&gt;
|-
|
|&lt;math&gt;= H_a \left(j \frac{2}{T} \cdot \frac{ \left(e^{j \omega_d T/2} - e^{-j \omega_d T/2}\right) /(2j)}{\left(e^{j \omega_d T/2} + e^{-j \omega_d T/2 }\right) / 2}\right) &lt;/math&gt;
|-
|
|&lt;math&gt;= H_a \left(j \frac{2}{T} \cdot \frac{ \sin(\omega_d T/2) }{ \cos(\omega_d T/2) }\right) &lt;/math&gt;
|-
|
|&lt;math&gt;= H_a \left(j \frac{2}{T} \cdot \tan \left( \omega_d T/2 \right) \right) &lt;/math&gt;
|}

This shows that every point on the unit circle in the discrete-time filter z-plane, &lt;math&gt;z = e^{ j \omega_d T}&lt;/math&gt; is mapped to a point on the &lt;math&gt;j \omega&lt;/math&gt; axis on the continuous-time filter s-plane, &lt;math&gt;s = j \omega_a&lt;/math&gt;. That is, the discrete-time to continuous-time frequency mapping of the bilinear transform is

:&lt;math&gt; \omega_a = \frac{2}{T} \tan \left( \omega_d \frac{T}{2} \right) &lt;/math&gt;

and the inverse mapping is

:&lt;math&gt; \omega_d = \frac{2}{T} \arctan \left( \omega_a \frac{T}{2} \right). &lt;/math&gt;

The discrete-time filter behaves at frequency &lt;math&gt;\omega_d&lt;/math&gt; the same way that the continuous-time filter behaves at frequency &lt;math&gt; (2/T) \tan(\omega_d T/2) &lt;/math&gt;.  Specifically, the gain and phase shift that the discrete-time filter has at frequency &lt;math&gt;\omega_d&lt;/math&gt; is the same gain and phase shift that the continuous-time filter has at frequency &lt;math&gt;(2/T) \tan(\omega_d T/2)&lt;/math&gt;.  This means that every feature, every &quot;bump&quot; that is visible in the frequency response of the continuous-time filter is also visible in the discrete-time filter, but at a different frequency.  For low frequencies (that is, when &lt;math&gt;\omega_d \ll 2/T&lt;/math&gt; or &lt;math&gt;\omega_a \ll 2/T&lt;/math&gt;), then the features are mapped to a ''slightly'' different frequency; &lt;math&gt;\omega_d \approx \omega_a &lt;/math&gt;.

One can see that the entire continuous frequency range

: &lt;math&gt; -\infty &lt; \omega_a &lt; +\infty &lt;/math&gt;

is mapped onto the fundamental frequency interval

: &lt;math&gt; -\frac{\pi}{T} &lt; \omega_d &lt; +\frac{\pi}{T}. &lt;/math&gt;

The continuous-time filter frequency &lt;math&gt; \omega_a = 0 &lt;/math&gt; corresponds to the discrete-time filter frequency &lt;math&gt; \omega_d = 0 &lt;/math&gt; and the continuous-time filter frequency &lt;math&gt; \omega_a = \pm \infty &lt;/math&gt; correspond to the discrete-time filter frequency &lt;math&gt; \omega_d = \pm \pi / T. &lt;/math&gt;

One can also see that there is a nonlinear relationship between &lt;math&gt; \omega_a \ &lt;/math&gt; and &lt;math&gt; \omega_d.&lt;/math&gt;  This effect of the bilinear transform is called '''frequency warping'''. The continuous-time filter can be designed to compensate for this frequency warping by setting &lt;math&gt; \omega_a = \frac{2}{T} \tan \left( \omega_d \frac{T}{2} \right) &lt;/math&gt; for every frequency specification that the designer has control over (such as corner frequency or center frequency).  This is called '''pre-warping''' the filter design.

It is possible, however, to compensate for the frequency warping by pre-warping a frequency specification &lt;math&gt; \omega_0 &lt;/math&gt; (usually a resonant frequency or the frequency of the most significant feature of the frequency response) of the continuous-time system.  These pre-warped specifications may then be used in the bilinear transform to obtain the desired discrete-time system. When designing a digital filter as an approximation of a continuous time filter, the frequency response (both amplitude and phase) of the digital filter can be made to match the frequency response of the continuous filter at a specified frequency &lt;math&gt; \omega_0 &lt;/math&gt;, as well as matching at DC, if the following transform is substituted into the continuous filter transfer function.&lt;ref&gt;{{cite book |last=Astrom |first=Karl J. |date=1990 |title=Computer Controlled Systems, Theory and Design |edition=Second |publisher=Prentice-Hall |page=212 |isbn=0-13-168600-3}}&lt;/ref&gt; This is a modified version of Tustin's transform shown above.

:&lt;math&gt;s \leftarrow \frac{\omega_0}{\tan\left(\frac{\omega_0 T}{2}\right)} \frac{z - 1}{z + 1}.&lt;/math&gt;

However, note that this transform becomes the original transform

:&lt;math&gt;s \leftarrow \frac{2}{T} \frac{z - 1}{z + 1}&lt;/math&gt;

as &lt;math&gt; \omega_0 \to 0 &lt;/math&gt;.

The main advantage of the warping phenomenon is the absence of aliasing distortion of the frequency response characteristic, such as observed with [[Impulse invariance]].

==See also==
* [[Impulse invariance]]
* [[Matched Z-transform method]]

==References==
{{reflist}}

==External links==
* [http://ocw.mit.edu/courses/mechanical-engineering/2-161-signal-processing-continuous-and-discrete-fall-2008/lecture-notes/lecture_19.pdf MIT OpenCourseWare Signal Processing: Continuous to Discrete Filter Design]
* [http://web.cecs.pdx.edu/~tymerski/ece452/6.pdf Lecture Notes on Discrete Equivalents]
* [https://www.native-instruments.com/fileadmin/ni_media/downloads/pdf/VAFilterDesign_2.1.0.pdf#page=69 The Art of VA Filter Design]

{{DSP}}

{{DEFAULTSORT:Bilinear Transform}}
[[Category:Digital signal processing]]
[[Category:Transforms]]
[[Category:Control theory]]</text>
      <sha1>idpoyuwqk1n2jxgfgyto9d0f8trf8tm</sha1>
    </revision>
  </page>
