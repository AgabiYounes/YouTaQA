  <page>
    <title>Ackermann function</title>
    <ns>0</ns>
    <id>2925</id>
    <revision>
      <id>915049537</id>
      <parentid>905400971</parentid>
      <timestamp>2019-09-10T22:32:21Z</timestamp>
      <contributor>
        <username>Monkbot</username>
        <id>20483999</id>
      </contributor>
      <minor />
      <comment>/* Proof that the Ackermann function is not primitive recursive */[[User:Monkbot/task 16: remove replace deprecated dead-url params|Task 16]]: replaced (1×) / removed (0×) deprecated |dead-url= and |deadurl= with |url-status=;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">In [[computability theory]], the '''Ackermann function''', named after [[Wilhelm Ackermann]], is one of the simplest&lt;ref&gt;{{citation|title=Understanding Formal Methods|first1=Jean-Francois|last1=Monin|first2=M. G.|last2=Hinchey|publisher=Springer|year=2003|isbn=9781852332471|page=61|url=https://books.google.com/books?id=rUudIPZD-B0C&amp;pg=PA61|quote=There are total functions that cannot be defined by a primitive recursive presentation, but they are not that easy to find. One of the simplest is the Ackermann function.}}&lt;/ref&gt; and earliest-discovered examples of a [[total function|total]] [[computable function]] that is not [[Primitive recursive function|primitive recursive]]. All primitive recursive functions are total and computable, but the Ackermann function illustrates that not all total computable functions are primitive recursive.

After Ackermann's publication&lt;ref name=&quot;Ack&quot;&gt;{{cite journal | author=Wilhelm Ackermann | journal=[[Mathematische Annalen]] | title=Zum Hilbertschen Aufbau der reellen Zahlen | year=1928 | volume=99 | pages=118–133 | url=http://gdz.sub.uni-goettingen.de/en/dms/loader/img/?PPN=PPN235181684_0099&amp;DMDID=DMDLOG_0009 | doi=10.1007/BF01459088}}&lt;/ref&gt; of his function (which had three nonnegative integer arguments), many authors modified it to suit various purposes, so that today &quot;the Ackermann function&quot; may refer to any of numerous variants of the original function. One common version, the two-argument '''Ackermann–Péter function''', is defined as follows for nonnegative integers ''m'' and ''n'':

:&lt;math&gt; A(m, n) =
\begin{cases}
n+1 &amp; \mbox{if } m = 0 \\
A(m-1, 1) &amp; \mbox{if } m &gt; 0 \mbox{ and } n = 0 \\
A(m-1, A(m, n-1)) &amp; \mbox{if } m &gt; 0 \mbox{ and } n &gt; 0.
\end{cases}
&lt;/math&gt;

Its value grows rapidly, even for small inputs. For example, {{nowrap|''A''(4, 2)}} is an integer of 19,729 decimal digits&lt;ref&gt;[http://www.kosara.net/thoughts/ackermann42.html Decimal expansion of A(4,2)] {{webarchive |url=https://web.archive.org/web/20080317104411/http://www.kosara.net/thoughts/ackermann42.html |date=March 17, 2008 }}&lt;/ref&gt; (equivalent to 2&lt;sup&gt;65536&lt;/sup&gt;&amp;minus;3, or 2&lt;sup&gt;2&lt;sup&gt;2&lt;sup&gt;2&lt;sup&gt;2&lt;/sup&gt;&lt;/sup&gt;&lt;/sup&gt;&lt;/sup&gt;&amp;minus;3).

==History==
In the late 1920s, the mathematicians [[Gabriel Sudan]] and [[Wilhelm Ackermann]], students of [[David Hilbert]], were studying the foundations of computation. Both Sudan and Ackermann are credited&lt;ref&gt;{{cite journal | author=Cristian Calude, [[Solomon Marcus]] and Ionel Tevy | journal = Historia Math. | title=The first example of a recursive function which is not primitive recursive | date=November 1979 | pages=380–84 | volume=6 | issue=4 | doi=10.1016/0315-0860(79)90024-7}}&lt;/ref&gt; with discovering [[total function|total]] [[computable function]]s (termed simply &quot;recursive&quot; in some references) that are not [[primitive recursive function|primitive recursive]]. Sudan published the lesser-known [[Sudan function]], then shortly afterwards and independently, in 1928, Ackermann published his function &lt;math&gt;\varphi&lt;/math&gt; (the Greek letter ''[[phi]]''). Ackermann's three-argument function, &lt;math&gt;\varphi(m, n, p)&lt;/math&gt;, is defined such that for ''p'' = 0, 1, 2, it reproduces the basic operations of [[addition]], [[multiplication]], and [[exponentiation]] as
:&lt;math&gt;\varphi(m, n, 0) = m+n,&lt;/math&gt;
:&lt;math&gt;\varphi(m, n, 1) = m\cdot n,&lt;/math&gt;
:&lt;math&gt;\varphi(m, n, 2) = m^n,&lt;/math&gt;
and for ''p'' &gt; 2 it extends these basic operations in a way that can be compared to the [[hyperoperation]]s:
:&lt;math&gt;\varphi(m, n, 3) = m\uparrow^2 (n+1),\,\!&lt;/math&gt;
:&lt;math&gt;\varphi(m, n, p) \gtrapprox m\uparrow^{p - 1}(n+1)\ \ (p \ge 4).\,\!&lt;/math&gt;
(Aside from its historic role as a total-computable-but-not-primitive-recursive function, Ackermann's original function is seen to extend the basic arithmetic operations beyond exponentiation, although not as seamlessly as do variants of Ackermann's function that are specifically designed for that purpose—such as [[Reuben Goodstein|Goodstein's]] [[hyperoperation]] sequence.)

In ''On the Infinite'', David Hilbert hypothesized that the Ackermann function was not primitive recursive, but it was Ackermann, Hilbert's personal secretary and former student, who actually proved the hypothesis in his paper ''On Hilbert's Construction of the Real Numbers''.&lt;ref name=&quot;Ack&quot;/&gt;&lt;ref&gt;von Heijenoort. [http://mathgate.info/cebrown/notes/vonHeijenoort.php From Frege To Gödel] {{webarchive |url=https://web.archive.org/web/20080504224223/http://mathgate.info/cebrown/notes/vonHeijenoort.php |date=May 4, 2008 }}, 1967.&lt;/ref&gt;

[[Rózsa Péter]] and [[Raphael Robinson]] later developed a two-variable version of the Ackermann function that became preferred by many authors.&lt;ref&gt;{{cite journal | author=Raphael M. Robinson | title=Recursion and Double Recursion | journal=[[Bulletin of the American Mathematical Society]] | year=1948 | volume=54 | pages=987–93 | url=http://projecteuclid.org/DPubS?verb=Display&amp;version=1.0&amp;service=UI&amp;handle=euclid.bams/1183512393&amp;page=record | doi=10.1090/S0002-9904-1948-09121-2 | issue=10}}&lt;/ref&gt;

==Definition and properties==
Ackermann's original three-argument function &lt;math&gt;\varphi(m, n, p)&lt;/math&gt; is defined [[recursion|recursively]] as follows for nonnegative integers ''m'', ''n'', and ''p'':

:&lt;math&gt; 
\begin{array}{lr}
\varphi(m, n, 0) = m + n \\
\varphi(m, 0, 1) = 0 \\
\varphi(m, 0, 2) = 1 \\
\varphi(m, 0, p) = m \text{ for } p &gt; 2 \\
\varphi(m, n, p) = \varphi(m, \varphi(m, n-1, p), p - 1) \text{ for } n &gt; 0 \text{ and } p &gt; 0.
\end{array}
&lt;/math&gt;

Of the various two-argument versions, the one developed by Péter and Robinson (called &quot;the&quot; Ackermann function by some authors) is defined for nonnegative integers ''m'' and ''n'' as follows:

:&lt;math&gt; A(m, n) =
\begin{cases}
n+1 &amp; \mbox{if } m = 0 \\
A(m-1, 1) &amp; \mbox{if } m &gt; 0 \mbox{ and } n = 0 \\
A(m-1, A(m, n-1)) &amp; \mbox{if } m &gt; 0 \mbox{ and } n &gt; 0.
\end{cases}
&lt;/math&gt;

It may not be immediately obvious that the evaluation of &lt;math&gt; A(m, n)&lt;/math&gt; always terminates. However, the recursion is bounded because in each recursive application either ''m'' decreases, or ''m'' remains the same and ''n'' decreases. Each time that ''n'' reaches zero, ''m'' decreases, so ''m'' eventually reaches zero as well. (Expressed more technically, in each case the pair (''m'', ''n'') decreases in the [[lexicographic order]] on pairs, which is a [[well-order]]ing, just like the ordering of single non-negative integers; this means one cannot go down in the ordering infinitely many times in succession.) However, when ''m'' decreases there is no upper bound on how much ''n'' can increase—and it will often increase greatly.

The Péter-Ackermann function can also be expressed in terms of various other versions of the Ackermann function:
* the indexed version of [[Knuth's up-arrow notation]] (extended to integer indices ≥ −2):
::&lt;math&gt;A(m,n)=2\uparrow^{m-2} (n+3) - 3.&lt;/math&gt;
:The part of the definition {{nowrap|1=''A''(''m'', 0) = ''A''(''m'' − 1, 1)}} corresponds to &lt;math&gt;2\uparrow^{m+1} 3=2\uparrow^m 4.&lt;/math&gt;

* [[Conway chained arrow notation]]:
::&lt;math&gt;A(m,n)=(2\rightarrow(n+3)\rightarrow(m-2))-3&lt;/math&gt; for &lt;math&gt;m\geq3&lt;/math&gt;
:hence
::&lt;math&gt;2\rightarrow n\rightarrow m=A(m+2,n-3)+3&lt;/math&gt; for &lt;math&gt;n&gt;2&lt;/math&gt;.
:({{nowrap|1=''n'' = 1}} and {{Nowrap|1=''n'' = 2}} would correspond with {{nowrap|1=''A''(''m'', −2) = −1}} and {{nowrap|1=''A''(''m'', −1) = 1}}, which could logically be added.)
* Using the [[hyperoperation]]s notation, {{nowrap|''A''(''m'', ''n'')}} can be expressed as {{nowrap|2[''m''](''n'' − 3) − 3}}, for {{nowrap|''m'' &gt; 1}}.

For small values of ''m'' like 1, 2, or 3, the Ackermann function grows relatively slowly with respect to ''n'' (at most [[exponential growth|exponentially]]). For {{nowrap|''m'' ≥ 4}}, however, it grows much more quickly; even {{nowrap|''A''(4, 2)}} is about 2{{e|19728}}, and the decimal expansion of {{nowrap|''A''(4, 3)}} is very large by any typical measure.

One interesting aspect of the Ackermann function is that the only arithmetic operations it ever uses are addition and subtraction of 1. Its properties come solely from the power of unlimited recursion. This also implies that its running time is at least proportional to its output, and so is also extremely huge. In actuality, for most cases the running time is far larger than the output; see below.

A single-argument version {{nowrap|1=''f''(''n'') = ''A''(''n'', ''n'')}} that increases both ''m'' and ''n'' at the same time dwarfs every primitive recursive function, including very fast-growing functions such as the [[exponential function]], the factorial function, multi- and [[superfactorial]] functions, and even functions defined using Knuth's up-arrow notation (except when the indexed up-arrow is used). It can be seen that ''f''(''n'') is roughly comparable to ''f''&lt;sub&gt;''ω''&lt;/sub&gt;(''n'') in the [[fast-growing hierarchy]]. This extreme growth can be exploited to show that ''f'', which is obviously computable on a machine with infinite memory such as a [[Turing machine]] and so is a [[computable function]], grows faster than any primitive recursive function and is therefore not primitive recursive.

In a category with [[Exponential object|exponentials]], using the isomorphism &lt;math&gt;((X \times Y) \rightarrow Z) \cong (X \rightarrow (Y \rightarrow Z))&lt;/math&gt; (in computer science, this is called [[currying]]), the Ackermann function may be defined via primitive recursion over higher-order functionals as follows:

:&lt;math&gt;
\begin{array}{lcl}
\operatorname{Ack}(0) &amp; = &amp; \operatorname{S} \\
\operatorname{Ack}(m+1) &amp; = &amp; \operatorname{Iter}(\operatorname{Ack}(m))
\end{array}
&lt;/math&gt;

where {{math|S(''n'') {{=}} ''n'' + 1}} is the usual [[successor function]] and Iter denotes the [[functional power]] operator, defined by primitive recursion as well:

:&lt;math&gt;
\begin{array}{lcl}
\operatorname{Iter}(f)(0) &amp; = &amp; f(1) \\
\operatorname{Iter}(f)(n+1) &amp; = &amp; f(\operatorname{Iter}(f)(n)).
\end{array}
&lt;/math&gt;
The function &lt;math&gt;\mathrm{Ack}&lt;/math&gt; defined in this way agrees with the Ackermann function &lt;math&gt;A&lt;/math&gt; defined above: &lt;math&gt;\mathrm{Ack}(m)(n)=A(m,n)&lt;/math&gt;.
[[File:Ackerman(3,3).png|thumb|399x399px|Number of recursions before the return of Ackerman(3,3)]]
&lt;br /&gt;

==Example expansions==
To see how the Ackermann function grows so quickly, it helps to expand out some simple expressions using the rules in the original definition. For example, one can fully evaluate &lt;math&gt;A(1, 2)&lt;/math&gt; in the following way:

:&lt;math&gt;\begin{align}
A(1,2) &amp; = A(0, A(1, 1)) \\
&amp; = A(0, A(0, A(1, 0))) \\
&amp; = A(0, A(0, A(0, 1))) \\
&amp; = A(0, A(0, 2)) \\
&amp; = A(0, 3) \\
&amp; = 4.
\end{align}&lt;/math&gt;

To demonstrate how &lt;math&gt;A(4, 3)&lt;/math&gt;'s computation results in many steps and in a large number:
:&lt;math&gt;\begin{align}
A(4, 3) &amp; = A(3, A(4, 2)) \\
&amp; = A(3, A(3, A(4, 1))) \\
&amp; = A(3, A(3, A(3, A(4, 0)))) \\
&amp; = A(3, A(3, A(3, A(3, 1)))) \\
&amp; = A(3, A(3, A(3, A(2, A(3, 0))))) \\
&amp; = A(3, A(3, A(3, A(2, A(2, 1))))) \\
&amp; = A(3, A(3, A(3, A(2, A(1, A(2, 0)))))) \\
&amp; = A(3, A(3, A(3, A(2, A(1, A(1, 1)))))) \\
&amp; = A(3, A(3, A(3, A(2, A(1, A(0, A(1, 0))))))) \\
&amp; = A(3, A(3, A(3, A(2, A(1, A(0, A(0, 1))))))) \\
&amp; = A(3, A(3, A(3, A(2, A(1, A(0, 2)))))) \\
&amp; = A(3, A(3, A(3, A(2, A(1, 3))))) \\
&amp; = A(3, A(3, A(3, A(2, A(0, A(1, 2)))))) \\
&amp; = A(3, A(3, A(3, A(2, A(0, A(0, A(1, 1))))))) \\
&amp; = A(3, A(3, A(3, A(2, A(0, A(0, A(0, A(1, 0)))))))) \\
&amp; = A(3, A(3, A(3, A(2, A(0, A(0, A(0, A(0, 1)))))))) \\
&amp; = A(3, A(3, A(3, A(2, A(0, A(0, A(0, 2)) )) )) ) \\
&amp; = A(3, A(3, A(3, A(2, A(0, A(0, 3)))))) \\
&amp; = A(3, A(3, A(3, A(2, A(0, 4)))))  \\
&amp; = A(3, A(3, A(3, A(2, 5)))) \\
&amp; = \ldots \\
&amp; = A(3, A(3, A(3, 13))) \\
&amp; = \ldots \\
&amp; = A(3, A(3, 65533)) \\
&amp; = \ldots \\
&amp; = A(3, 2^{65536} - 3) \\
&amp; = \ldots \\
&amp; = 2^{2^{ \overset{65536}{} }} - 3. \\
\end{align}&lt;/math&gt;

== Table of values ==
Computing the Ackermann function can be restated in terms of an infinite table. First, place the natural numbers along the top row. To determine a number in the table, take the number immediately to the left. Then use that number to look up the required number in the column given by that number and one row up. If there is no number to its left, simply look at the column headed &quot;1&quot; in the previous row. Here is a small upper-left portion of the table:

{| class=&quot;wikitable&quot;
|+ Values of ''A''(''m'',&amp;nbsp;''n'')
|-
! {{diagonal split header|''m''|''n''}}
! 0
! 1
! 2
! 3
! 4
! ''n''
|-
! 0
| 1 || 2 || 3 || 4 || 5 || &lt;math&gt;n + 1&lt;/math&gt;
|-
! 1
| 2 || 3 || 4 || 5 || 6 || &lt;math&gt;n + 2 = 2 + (n + 3) - 3&lt;/math&gt;
|-
! 2
| 3 || 5 || 7 || 9 || 11 || &lt;math&gt;2n + 3 = 2\cdot(n + 3) - 3&lt;/math&gt;
|-
! 3
| 5 || 13 || 29 || 61 || 125 || &lt;math&gt;2^{(n + 3)} - 3&lt;/math&gt;
|-
! 4
| 13 &lt;br /&gt;&lt;br /&gt;&lt;math&gt;={2^{2^{2}}}-3&lt;/math&gt;&lt;br /&gt;&lt;math&gt;=2\uparrow\uparrow 3 - 3&lt;/math&gt;
| 65533 &lt;br /&gt;&lt;br /&gt;&lt;math&gt;={2^{2^{2^{2}}}}-3&lt;/math&gt;&lt;br /&gt;&lt;math&gt;=2\uparrow\uparrow 4 - 3&lt;/math&gt;
| 2&lt;sup&gt;65536&lt;/sup&gt;&amp;nbsp;−&amp;nbsp;3 &lt;br /&gt;&lt;br /&gt;&lt;math&gt;={2^{2^{2^{2^{2}}}}}-3&lt;/math&gt;&lt;br /&gt;&lt;math&gt;=2\uparrow\uparrow 5 - 3&lt;/math&gt;
| &lt;math&gt;{2^{2^{65536}}} - 3&lt;/math&gt; &lt;br /&gt;&lt;br /&gt;&lt;math&gt;={2^{2^{2^{2^{2^{2}}}}}}-3&lt;/math&gt;&lt;br /&gt;&lt;math&gt;=2\uparrow\uparrow 6 - 3&lt;/math&gt;
| &lt;math&gt;{2^{2^{2^{65536}}}} - 3&lt;/math&gt; &lt;br /&gt;&lt;br /&gt;&lt;math&gt;={2^{2^{2^{2^{2^{2^{2}}}}}}}-3&lt;/math&gt;&lt;br /&gt;&lt;math&gt;=2\uparrow\uparrow 7 - 3&lt;/math&gt;
| &lt;math&gt;\begin{matrix}\underbrace{{2^2}^{{\cdot}^{{\cdot}^{{\cdot}^2}}}}_{n+3} - 3\end{matrix}&lt;/math&gt;&lt;br /&gt;&lt;br /&gt;&lt;math&gt;=2\uparrow\uparrow (n+3) - 3&lt;/math&gt;
|-
! 5
| 65533 &lt;br /&gt;&lt;math&gt;=2\uparrow\uparrow(2\uparrow\uparrow 2) - 3&lt;/math&gt;&lt;br /&gt;&lt;math&gt;=2\uparrow\uparrow\uparrow 3 - 3&lt;/math&gt;
| &lt;math&gt;2\uparrow\uparrow\uparrow 4 - 3&lt;/math&gt;
| &lt;math&gt;2\uparrow\uparrow\uparrow 5 - 3&lt;/math&gt;
| &lt;math&gt;2\uparrow\uparrow\uparrow 6 - 3&lt;/math&gt;
| &lt;math&gt;2\uparrow\uparrow\uparrow 7 - 3&lt;/math&gt;
| &lt;math&gt;2\uparrow\uparrow\uparrow (n+3) - 3&lt;/math&gt;
|-
! 6
| &lt;math&gt;2\uparrow\uparrow\uparrow\uparrow 3 - 3&lt;/math&gt;
| &lt;math&gt;2\uparrow\uparrow\uparrow\uparrow 4 - 3&lt;/math&gt;
| &lt;math&gt;2\uparrow\uparrow\uparrow\uparrow 5 - 3&lt;/math&gt;
| &lt;math&gt;2\uparrow\uparrow\uparrow\uparrow 6 - 3&lt;/math&gt;
| &lt;math&gt;2\uparrow\uparrow\uparrow\uparrow 7 - 3&lt;/math&gt;
| &lt;math&gt;2\uparrow\uparrow\uparrow\uparrow (n+3) - 3&lt;/math&gt;
|-
! m
| &lt;math&gt;(2\rightarrow(3)\rightarrow(m-2))-3&lt;/math&gt;
| &lt;math&gt;(2\rightarrow(4)\rightarrow(m-2))-3&lt;/math&gt;
| &lt;math&gt;(2\rightarrow(5)\rightarrow(m-2))-3&lt;/math&gt;
| &lt;math&gt;(2\rightarrow(6)\rightarrow(m-2))-3&lt;/math&gt;
| &lt;math&gt;(2\rightarrow(7)\rightarrow(m-2))-3&lt;/math&gt;
| &lt;math&gt;(2\rightarrow(n+3)\rightarrow(m-2))-3&lt;/math&gt;
|}

The numbers here which are only expressed with recursive exponentiation or [[Knuth's up-arrow notation|Knuth arrows]] are very large and would take up too much space to notate in plain decimal digits.

Despite the large values occurring in this early section of the table, some even larger numbers have been defined, such as [[Graham's number]], which cannot be written with any small number of Knuth arrows. This number is constructed with a technique similar to applying the Ackermann function to itself recursively.

This is a repeat of the above table, but with the values replaced by the relevant expression from the function definition to show the pattern clearly:

{| class=&quot;wikitable&quot;
|+ Values of ''A''(''m'',&amp;nbsp;''n'')
|-
! {{diagonal split header|''m''|''n''}}
! 0
! 1
! 2
! 3
! 4
! n
|-
! 0
| 0 + 1 || 1 + 1 || 2 + 1 || 3 + 1 || 4 + 1 || ''n'' + 1
|-
! 1
| ''A''(0, 1) || ''A''(0, ''A''(1, 0))&lt;br /&gt;= ''A''(0, 2) || ''A''(0, ''A''(1, 1))&lt;br /&gt;= ''A''(0, 3) || ''A''(0, ''A''(1, 2))&lt;br /&gt;= ''A''(0, 4) || ''A''(0, ''A''(1, 3))&lt;br /&gt;= ''A''(0, 5) || ''A''(0, ''A''(1, ''n''−1))
|-
! 2
| ''A''(1, 1) || ''A''(1, ''A''(2, 0))&lt;br /&gt;= ''A''(1, 3) || ''A''(1, ''A''(2, 1))&lt;br /&gt;= ''A''(1, 5) || ''A''(1, ''A''(2, 2))&lt;br /&gt;= ''A''(1, 7) || ''A''(1, ''A''(2, 3))&lt;br /&gt;= ''A''(1, 9) || ''A''(1, ''A''(2, ''n''−1))
|-
! 3
| ''A''(2, 1) || ''A''(2, ''A''(3, 0))&lt;br /&gt;= ''A''(2, 5) || ''A''(2, ''A''(3, 1))&lt;br /&gt;= ''A''(2, 13) || ''A''(2, ''A''(3, 2))&lt;br /&gt;= ''A''(2, 29) || ''A''(2, ''A''(3, 3))&lt;br /&gt;= ''A''(2, 61) || ''A''(2, ''A''(3, ''n''−1))
|-
! 4
| ''A''(3, 1) || ''A''(3, ''A''(4, 0))&lt;br /&gt;= ''A''(3, 13) || ''A''(3, ''A''(4, 1))&lt;br /&gt;= ''A''(3, 65533) || ''A''(3, ''A''(4, 2)) || ''A''(3, ''A''(4, 3)) || ''A''(3, ''A''(4, ''n''−1))
|-
! 5
| ''A''(4, 1) || ''A''(4, ''A''(5, 0)) || ''A''(4, ''A''(5, 1)) || ''A''(4, ''A''(5, 2)) || ''A''(4, ''A''(5, 3)) || ''A''(4, ''A''(5, ''n''−1))
|-
! 6
| ''A''(5, 1) || ''A''(5, ''A''(6, 0)) || ''A''(5, ''A''(6, 1)) || ''A''(5, ''A''(6, 2)) || ''A''(5, ''A''(6, 3)) || ''A''(5, ''A''(6, ''n''−1))
|}

== Proof that the Ackermann function is not primitive recursive ==
In  a sense, the Ackermann function grows faster than any [[primitive recursive function]] and therefore is not itself primitive recursive. 

Specifically, one shows that to every primitive recursive function &lt;math&gt;f(x_1,\ldots,x_n)&lt;/math&gt; there exists a non-negative integer &lt;math&gt;t&lt;/math&gt; such that for all non-negative integers &lt;math&gt;x_1,\ldots,x_n&lt;/math&gt;,
:&lt;math&gt;f(x_1,\ldots,x_n)&lt;A(t,\max_i x_i).&lt;/math&gt;
Once this is established, it follows that &lt;math&gt;A&lt;/math&gt; itself is not primitive recursive, since otherwise putting &lt;math&gt;x_1=x_2=t&lt;/math&gt; would lead to the contradiction &lt;math&gt;A(t,t)&lt;A(t,t)&lt;/math&gt;.

The proof&lt;ref&gt;{{Cite web|url=http://planetmath.org/ackermannfunctionisnotprimitiverecursive|title=Ackermann function is not primitive recursive {{!}} planetmath.org|last=Woo|first=Chi|date=2009-12-17|website=planetmath.org|language=en|archive-url=https://web.archive.org/web/20130509202634/http://planetmath.org/ackermannfunctionisnotprimitiverecursive|archive-date=2013-05-09|url-status=dead}}&lt;/ref&gt; proceeds as follows: define the class &lt;math&gt;\mathcal{A}&lt;/math&gt; of all functions that grow slower than the Ackermann function
:&lt;math&gt;\mathcal{A}=\left\{ f \mid \exists t\ \forall x_1\cdots \forall x_n:\ f(x_1,\ldots,x_n)&lt;A(t, \max_i x_i) \right\}   &lt;/math&gt;
and show that &lt;math&gt;\mathcal{A}&lt;/math&gt; contains all primitive recursive functions. The latter is achieved by showing that &lt;math&gt;\mathcal{A}&lt;/math&gt; contains the constant functions, the successor function, the projection functions and that it is closed under the operations of function composition and primitive recursion.

== Inverse ==
Since the function {{nowrap|1=&amp;nbsp;''f''(''n'') = ''A''(''n'', ''n'')}} considered above grows very rapidly, its [[inverse function]], ''f''{{i sup|−1}}, grows very slowly. This '''inverse Ackermann function''' ''f''&lt;sup&gt;−1&lt;/sup&gt; is usually denoted by '''''α'''''. In fact, ''α''(''n'') is less than 5 for any practical input size ''n'', since {{nowrap|''A''(4, 4)}} is on the order of &lt;math&gt;2^{2^{2^{2^{16}}}}&lt;/math&gt;.

This inverse appears in the time [[computational complexity theory|complexity]] of some [[algorithm]]s, such as the [[disjoint-set data structure]] and [[Bernard Chazelle|Chazelle]]'s algorithm for [[minimum spanning tree]]s. Sometimes Ackermann's original function or other variations are used in these settings, but they all grow at similarly high rates. In particular, some modified functions simplify the expression by eliminating the −3 and similar terms.

A two-parameter variation of the inverse Ackermann function can be defined as follows, where &lt;math&gt;\lfloor x \rfloor&lt;/math&gt; is the [[floor function]]:
:&lt;math&gt;\alpha(m,n) = \min\{i \geq 1 : A(i,\lfloor m/n \rfloor) \geq \log_2 n\}.&lt;/math&gt;
This function arises in more precise analyses of the algorithms mentioned above, and gives a more refined time bound. In the disjoint-set data structure, ''m'' represents the number of operations while ''n'' represents the number of elements; in the minimum spanning tree algorithm, ''m'' represents the number of edges while ''n'' represents the number of vertices.
Several slightly different definitions of {{nowrap|''α''(''m'', ''n'')}} exist; for example, {{nowrap|log&lt;sub&gt;2&lt;/sub&gt; ''n''}} is sometimes replaced by ''n'', and the floor function is sometimes replaced by a [[ceiling function|ceiling]].

Other studies might define an inverse function of one where m is set to a constant, such that the inverse applies to a particular row.&lt;ref&gt;[http://cat.inist.fr/?aModele=afficheN&amp;cpsidt=15618233 An inverse-Ackermann style lower bound for the online minimum spanning tree verification problem] November 2002&lt;/ref&gt;

==Use as benchmark==
The Ackermann function, due to its definition in terms of extremely deep recursion, can be used as a benchmark of a [[compiler]]'s ability to optimize recursion. The first published use of Ackermann's function in this way was in 1970 by Dragoş Vaida&lt;ref&gt;{{cite  journal|last=Vaida|first=Dragoş|date=1970|title=Compiler Validation for an Algol-like Language|journal=Bulletin Mathématique de la Société des Sciences Mathématiques de la République Socialiste de Roumanie, Nouvelle Série|volume=14 (60)|issue=4|pages=487–502|jstor=43679758}}&lt;/ref&gt;
and, almost simultaneously, in 1971, by Yngve Sundblad.&lt;ref&gt;{{cite  journal|last=Sundblad|first=Yngve|date=1971-03-01|title=The Ackermann function. A theoretical, computational, and formula manipulative study|journal=BIT Numerical Mathematics|volume=11|issue=1|pages=107–119|publisher=Kluwer Academic Publishers|doi=10.1007/BF01935330}}&lt;/ref&gt;

Sundblad's seminal paper was taken up by Brian Wichmann (co-author of the [[Whetstone (benchmark)|Whetstone benchmark]]) in a trilogy of papers written between 1975 and 1982.&lt;ref&gt;{{cite web | title=Ackermann's Function: A Study In The Efficiency Of Calling Procedures | year = 1975 | url=http://history.dcs.ed.ac.uk/archive/docs/Imp_Benchmarks/ack.pdf}}&lt;/ref&gt;&lt;ref&gt;{{cite web | title=How to Call Procedures, or Second Thoughts on Ackermann's Function | year = 1977 | url=http://history.dcs.ed.ac.uk/archive/docs/Imp_Benchmarks/ackpe.pdf}}&lt;/ref&gt;&lt;ref&gt;{{cite web | title=Latest results from the procedure calling test, Ackermann's function | year = 1982 | url=http://history.dcs.ed.ac.uk/archive/docs/Imp_Benchmarks/acklt.pdf}}&lt;/ref&gt;

==See also==
&lt;!-- keep alphabetical --&gt;
* [[Computability theory]]
* [[Double recursion]]
* [[Fast-growing hierarchy]]
* [[Goodstein function]]
* [[Primitive recursive function]]
* [[Recursion (computer science)]]
&lt;!-- keep alphabetical --&gt;

==References==
{{reflist|30em}}

==External links==
* {{springer|title=Ackermann function|id=p/a120110}}
* {{mathworld | urlname = AckermannFunction | title = Ackermann function}}
* {{DADS|Ackermann's function|ackermann}}
* [http://www.gfredericks.com/main/sandbox/arith/ackermann An animated Ackermann function calculator]
* [[Scott Aaronson]], ''[http://www.scottaaronson.com/writings/bignumbers.html Who can name the biggest number?]'' (1999)
* [http://www-users.cs.york.ac.uk/~susan/cyc/a/ackermnn.htm Ackermann functions]. Includes a table of some values.
* [http://forum.wolframscience.com/showthread.php?s=&amp;threadid=579 Hyper-operations: Ackermann's Function and New Arithmetical Operation]
* [http://www.mrob.com/pub/math/largenum.html Robert Munafo's Large Numbers] describes several variations on the definition of ''A''.
* Gabriel Nivasch, [https://web.archive.org/web/20070821224819/http://yucs.org/~gnivasch/alpha/index.html Inverse Ackermann without pain] on the inverse Ackermann function.
* Raimund Seidel, ''[http://cgi.di.uoa.gr/~ewcg06/invited/Seidel.pdf Understanding the inverse Ackermann function]'' (PDF presentation).
* [http://rosettacode.org/wiki/Ackermann_Function The Ackermann function written in different programming languages], (on [[Rosetta Code]])
* [http://www.geocities.com/hjsmithh/Ackerman/index.html Ackermann's Function] ([https://web.archive.org/web/20091026171012/http://www.geocities.com/hjsmithh/Ackerman/index.html Archived] 2009-10-24)—Some study and programming by Harry J. Smith.

{{Hyperoperations}}
{{Large numbers}}

[[Category:Arithmetic]]
[[Category:Large integers]]
[[Category:Special functions]]
[[Category:Theory of computation]]
[[Category:Computability theory]]</text>
      <sha1>dsfnnjz8orh0fbnxlqthcqopk6je94p</sha1>
    </revision>
  </page>
