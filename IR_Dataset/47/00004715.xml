  <page>
    <title>Boolean satisfiability problem</title>
    <ns>0</ns>
    <id>4715</id>
    <revision>
      <id>942892961</id>
      <parentid>942890879</parentid>
      <timestamp>2020-02-27T14:50:17Z</timestamp>
      <contributor>
        <username>AnomieBOT</username>
        <id>7611264</id>
      </contributor>
      <minor />
      <comment>Dating maintenance tags: {{Clarify span}} {{Cn}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{short description|Problem of determining if a Boolean formula could be made true}}
{{Redirect|3SAT|the Central European television network|3sat}}

In [[logic]] and [[computer science]], the '''Boolean satisfiability problem''' (sometimes called '''propositional satisfiability problem''' and abbreviated '''SATISFIABILITY''' or '''SAT''') is the problem of determining if there exists an [[Interpretation (logic)|interpretation]] that [[Satisfiability|satisfies]] a given [[Boolean logic|Boolean]] [[Formula (mathematical logic)|formula]]. In other words, it asks whether the variables of a given Boolean formula can be consistently replaced by the values TRUE or FALSE in such a way that the formula [[Validity (logic)|evaluates to TRUE]]. If this is the case, the formula is called ''satisfiable''. On the other hand, if no such assignment exists, the function expressed by the formula is [[Contradiction#Contradiction in formal logic|FALSE]] for all possible variable assignments and the formula is ''unsatisfiable''. For example, the formula &quot;''a'' AND NOT ''b''&quot; is satisfiable because one can find the values ''a''&amp;nbsp;=&amp;nbsp;TRUE and ''b''&amp;nbsp;=&amp;nbsp;FALSE, which make (''a'' AND NOT ''b'')&amp;nbsp;=&amp;nbsp;TRUE. In contrast, &quot;''a'' AND NOT ''a''&quot; is unsatisfiable.

SAT is the first problem that was proven to be [[NP-complete]]; see [[Cook–Levin theorem]]. This means that all problems in the complexity class [[NP (complexity)|NP]], which includes a wide range of natural decision and optimization problems, are at most as difficult to solve as SAT. There is no known algorithm that efficiently solves each SAT problem, and it is generally believed that no such algorithm exists; yet this belief has not been proven mathematically, and resolving the question of whether SAT has a [[polynomial-time]] algorithm is equivalent to the [[P versus NP problem]], which is a famous open problem in the theory of computing.

Nevertheless, as of 2007, heuristic SAT-algorithms are able to solve problem instances involving tens of thousands of variables and &lt;!---&quot;clauses&quot; hasn't been introduced here:---&gt;formulas consisting of millions of symbols,&lt;ref name=&quot;Codish.Ohrimenko.Stuckey.2007&quot;/&gt; which is sufficient for many practical SAT problems from, e.g., [[artificial intelligence]], [[circuit design]], and [[automatic theorem proving]].

==Basic definitions and terminology==
A ''[[propositional logic]] formula'', also called ''Boolean expression'', is built from [[Variable (mathematics)|variables]], operators AND ([[Logical conjunction|conjunction]], also denoted by ∧), OR ([[logical disjunction|disjunction]], ∨), NOT ([[negation]], ¬), and parentheses.
A formula is said to be ''satisfiable'' if it can be made TRUE by assigning appropriate [[logical value]]s (i.e. TRUE, FALSE) to its variables.
The ''Boolean satisfiability problem'' (SAT) is, given a formula, to check whether it is satisfiable.
This [[decision problem]] is of central importance in many areas of [[computer science]], including [[theoretical computer science]], [[computational complexity theory|complexity theory]], [[algorithmics]], [[cryptography]] and [[artificial intelligence]].

There are several special cases of the Boolean satisfiability problem in which the formulas are required to have a particular structure. A ''literal'' is either a variable, called ''positive literal'', or the negation of a variable, called ''negative literal''.
A ''clause'' is a disjunction of literals (or a single literal). A clause is called a ''[[Horn clause]]'' if it contains at most one positive literal.
A formula is in ''[[conjunctive normal form]]'' (CNF) if it is a conjunction of clauses (or a single clause).
For example, {{math|size=100%|''x''&lt;sub&gt;1&lt;/sub&gt;}} is a positive literal, {{math|size=100%|¬''x''&lt;sub&gt;2&lt;/sub&gt;}} is a negative literal, {{math|size=100%|''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ¬''x''&lt;sub&gt;2&lt;/sub&gt;}} is a clause. The formula {{math|size=100%|(''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ¬''x''&lt;sub&gt;2&lt;/sub&gt;) ∧ (¬''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ''x''&lt;sub&gt;2&lt;/sub&gt; ∨ ''x''&lt;sub&gt;3&lt;/sub&gt;) ∧ ¬''x''&lt;sub&gt;1&lt;/sub&gt;}} is  in conjunctive normal form; its first and third clauses are Horn clauses, but its second clause is not. The formula is satisfiable, by choosing ''x''&lt;sub&gt;1&lt;/sub&gt;&amp;nbsp;=&amp;nbsp;FALSE, ''x''&lt;sub&gt;2&lt;/sub&gt;&amp;nbsp;=&amp;nbsp;FALSE, and ''x''&lt;sub&gt;3&lt;/sub&gt; arbitrarily, since (FALSE ∨ ¬FALSE) ∧ (¬FALSE ∨ FALSE ∨ ''x''&lt;sub&gt;3&lt;/sub&gt;) ∧ ¬FALSE evaluates to (FALSE ∨ TRUE) ∧ (TRUE ∨ FALSE ∨ ''x''&lt;sub&gt;3&lt;/sub&gt;) ∧ TRUE, and in turn to TRUE ∧ TRUE ∧ TRUE (i.e. to TRUE). In contrast, the CNF formula ''a'' ∧ ¬''a'', consisting of two clauses of one literal, is unsatisfiable, since for ''a''=TRUE or ''a''=FALSE it evaluates to TRUE ∧ ¬TRUE (i.e., FALSE) or FALSE ∧ ¬FALSE (i.e., again FALSE), respectively.

For some versions of the SAT problem,&lt;!---need not list them in detail here---(viz. [[#Exactly-1 3-satisfiability|Exactly-1 3-satisfiability]], [[#XOR-satisfiability|XOR-satisfiability]], and, more general, [[#Schaefer's dichotomy theorem|Schaefer's dichotomy theorem]], discussed below),---&gt; it is useful to define the notion of a ''generalized conjunctive normal form'' formula, viz. as a conjunction of arbitrarily many ''generalized clauses'', the latter being of the form {{math|''R''(''l''&lt;sub&gt;1&lt;/sub&gt;,...,''l''&lt;sub&gt;''n''&lt;/sub&gt;)}} for some boolean operator ''R'' and (ordinary) literals {{mvar|''l''&lt;sub&gt;''i''&lt;/sub&gt;}}. Different sets of allowed boolean operators lead to different problem versions.&lt;!---, see [[#Complexity and restricted versions|below]].---&gt; As an example, ''R''(¬''x'',''a'',''b'') is a generalized clause, and ''R''(¬''x'',''a'',''b'') ∧ ''R''(''b'',''y'',''c'') ∧ ''R''(''c'',''d'',¬''z'') is a generalized conjunctive normal form. This formula is used [[#Exactly-1 3-satisfiability|below]], with ''R'' being the ternary operator that is TRUE just when exactly one of its arguments is.
&lt;!---need not explain that already here---If ''R'' is the ternary operator that is TRUE just if exactly one of its arguments is, then a satisfying assignment for the latter formula can be found starting from every possible combination of truth values for ''x'', ''y'', ''z'', except ''x''&amp;nbsp;=&amp;nbsp;''y''&amp;nbsp;=&amp;nbsp;''z''&amp;nbsp;=&amp;nbsp;FALSE, and choosing the values of ''a'', ''b'', ''c'', ''d'' appropriately; cf. the left table under [[#Exactly-1 3-satisfiability|Exactly-1 3-satisfiability]] below.---&gt;

Using the laws of [[Boolean algebra (structure)|Boolean algebra]], every propositional logic formula can be transformed into an equivalent conjunctive normal form, which may, however, be exponentially longer. For example, transforming the formula
(''x''&lt;sub&gt;1&lt;/sub&gt;∧''y''&lt;sub&gt;1&lt;/sub&gt;) ∨ (''x''&lt;sub&gt;2&lt;/sub&gt;∧''y''&lt;sub&gt;2&lt;/sub&gt;) ∨ ... ∨ (''x''&lt;sub&gt;''n''&lt;/sub&gt;∧''y''&lt;sub&gt;''n''&lt;/sub&gt;)
into conjunctive normal form yields
:{{math|(''x''&lt;sub&gt;1&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;''x''&lt;sub&gt;2&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;…&amp;nbsp;∨&amp;nbsp;''x''&lt;sub&gt;''n''&lt;/sub&gt;) ∧}}
:{{math|(''y''&lt;sub&gt;1&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;''x''&lt;sub&gt;2&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;…&amp;nbsp;∨&amp;nbsp;''x''&lt;sub&gt;''n''&lt;/sub&gt;) ∧}}
:{{math|(''x''&lt;sub&gt;1&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;''y''&lt;sub&gt;2&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;…&amp;nbsp;∨&amp;nbsp;''x''&lt;sub&gt;''n''&lt;/sub&gt;) ∧}}
:{{math|(''y''&lt;sub&gt;1&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;''y''&lt;sub&gt;2&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;…&amp;nbsp;∨&amp;nbsp;''x''&lt;sub&gt;''n''&lt;/sub&gt;) ∧ ... ∧}}
:{{math|(''x''&lt;sub&gt;1&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;''x''&lt;sub&gt;2&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;…&amp;nbsp;∨&amp;nbsp;''y''&lt;sub&gt;''n''&lt;/sub&gt;) ∧}}
:{{math|(''y''&lt;sub&gt;1&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;''x''&lt;sub&gt;2&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;…&amp;nbsp;∨&amp;nbsp;''y''&lt;sub&gt;''n''&lt;/sub&gt;) ∧}}
:{{math|(''x''&lt;sub&gt;1&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;''y''&lt;sub&gt;2&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;…&amp;nbsp;∨&amp;nbsp;''y''&lt;sub&gt;''n''&lt;/sub&gt;) ∧}}
:{{math|(''y''&lt;sub&gt;1&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;''y''&lt;sub&gt;2&lt;/sub&gt;&amp;nbsp;∨&amp;nbsp;…&amp;nbsp;∨&amp;nbsp;''y''&lt;sub&gt;''n''&lt;/sub&gt;)}};
while the former is a disjunction of ''n'' conjunctions of 2 variables, the latter consists of 2&lt;sup&gt;''n''&lt;/sup&gt; clauses of ''n'' variables.

==Complexity and restricted versions==

===Unrestricted satisfiability (SAT)===
{{Main article|Cook–Levin theorem}}

SAT was the first known [[NP-complete]] problem, as proved by [[Stephen Cook]] at the [[University of Toronto]] in 1971&lt;ref&gt;{{Cite journal | last1 = Cook | first1 = Stephen A. | authorlink1=Stephen Cook| title = The Complexity of Theorem-Proving Procedures | pages = 151–158 | year = 1971 | url=http://www.cs.toronto.edu/~sacook/homepage/1971.pdf| doi = 10.1145/800157.805047| journal = Proceedings of the 3rd Annual ACM [[Symposium on Theory of Computing]]}}&lt;/ref&gt; and independently by [[Leonid Levin]] at the [[Russian Academy of Sciences#The Academy of Sciences of the USSR|National Academy of Sciences]] in 1973.&lt;ref&gt;{{cite journal|last=Levin|first=Leonid|authorlink=Leonid Levin|title = Universal search problems (Russian: Универсальные задачи перебора, Universal'nye perebornye zadachi)|journal = Problems of Information Transmission (Russian: Проблемы передачи информа́ции, Problemy Peredachi Informatsii)|volume = 9|issue = 3|pages = 115–116|year = 1973}} [http://www.mathnet.ru/php/getFT.phtml?jrnid=ppi&amp;paperid=914&amp;volume=9&amp;year=1973&amp;issue=3&amp;fpage=115&amp;what=fullt&amp;option_lang=eng (pdf)] {{in lang|ru}}, translated into English by {{cite journal|last=Trakhtenbrot|first=B. A.|title = A survey of Russian approaches to ''perebor'' (brute-force searches) algorithms|journal = Annals of the History of Computing |volume = 6|issue = 4|pages = 384–400|year = 1984|doi=10.1109/MAHC.1984.10036}}&lt;/ref&gt; Until that time, the concept of an NP-complete problem did not even exist.
The proof shows how every decision problem in the [[complexity class]] [[NP (complexity)|NP]] can be [[reduction (complexity)|reduced]] to the SAT problem for CNF&lt;ref group=note&gt;The SAT problem for ''arbitrary'' formulas is NP-complete, too, since it is easily shown to be in NP, and it cannot be easier than SAT for CNF formulas.&lt;/ref&gt; formulas, sometimes called '''CNFSAT'''.
A useful property of Cook's reduction is that it preserves the number of accepting answers. For example, deciding whether a given [[Graph (discrete mathematics)|graph]] has a [[Graph coloring#Vertex coloring|3-coloring]] is another problem in NP; if a graph has 17 valid 3-colorings, the SAT formula produced by the Cook–Levin reduction will have 17 satisfying assignments.

NP-completeness only refers to the run-time of the worst case instances.  Many of the instances that occur in practical applications can be solved much more quickly.  See [[#Algorithms for solving SAT|Algorithms for solving SAT]] below.

SAT is trivial if the formulas are restricted to those in '''[[disjunctive normal form]]''', that is, they are disjunction of conjunctions of literals. Such a formula is indeed satisfiable if and only if at least one of its conjunctions is satisfiable, and a conjunction is satisfiable if and only if it does not contain both ''x'' and NOT ''x'' for some variable ''x''. This can be checked in linear time. Furthermore, if they are restricted to being in '''full disjunctive normal form''', in which every variable appears exactly once in every conjunction, they can be checked in constant time (each conjunction represents one satisfying assignment).  But it can take exponential time and space to convert a general SAT problem to disjunctive normal form; for an example exchange &quot;∧&quot; and &quot;∨&quot; in the [[#Basic definitions and terminology|above]] exponential blow-up example for conjunctive normal forms.

===3-satisfiability===
[[File:Sat reduced to Clique from Sipser.svg|thumb|The 3-SAT instance (''x''∨''x''∨''y'') ∧ (¬''x''∨¬''y''∨¬''y'') ∧ (¬''x''∨''y''∨''y'') reduced to a [[clique problem]]. The green vertices form a 3-clique and correspond to the satisfying assignment ''x''=FALSE, ''y''=TRUE.]]
Like the satisfiability problem for arbitrary formulas, determining the satisfiability of a formula in conjunctive normal form where each clause is limited to at most three literals is NP-complete also; this problem is called '''3-SAT''', '''3CNFSAT''', or '''3-satisfiability'''.
To reduce the unrestricted SAT problem to 3-SAT, transform each clause {{math|''l''&lt;sub&gt;1&lt;/sub&gt; ∨ ⋯ ∨ ''l''&lt;sub&gt;''n''&lt;/sub&gt;}} to a conjunction of ''n'' − 2 clauses
:{{math|(''l''&lt;sub&gt;1&lt;/sub&gt; ∨ ''l''&lt;sub&gt;2&lt;/sub&gt; ∨ ''x''&lt;sub&gt;2&lt;/sub&gt;) ∧ }}
:{{math|(¬''x''&lt;sub&gt;2&lt;/sub&gt; ∨ ''l''&lt;sub&gt;3&lt;/sub&gt; ∨ ''x''&lt;sub&gt;3&lt;/sub&gt;) ∧ }}
:{{math|(¬''x''&lt;sub&gt;3&lt;/sub&gt; ∨ ''l''&lt;sub&gt;4&lt;/sub&gt; ∨ ''x''&lt;sub&gt;4&lt;/sub&gt;) ∧ ⋯ ∧ }}
:{{math|(¬''x''&lt;sub&gt;''n'' − 3&lt;/sub&gt; ∨ ''l''&lt;sub&gt;''n'' − 2&lt;/sub&gt; ∨ ''x''&lt;sub&gt;''n'' − 2&lt;/sub&gt;) ∧ }}
:{{math|(¬''x''&lt;sub&gt;''n'' − 2&lt;/sub&gt; ∨ ''l''&lt;sub&gt;''n'' − 1&lt;/sub&gt; ∨ ''l''&lt;sub&gt;''n''&lt;/sub&gt;)}}
where {{math|''x''&lt;sub&gt;2&lt;/sub&gt;,&amp;thinsp;⋯&amp;thinsp;,&amp;thinsp;''x''&lt;sub&gt;''n'' − 2&lt;/sub&gt;}} are fresh variables not occurring elsewhere.
Although the two formulas are not [[logically equivalent]], they are [[equisatisfiable]]. The formula resulting from transforming all clauses is at most 3 times as long as its original, i.e. the length growth is polynomial.&lt;ref name=&quot;Aho.Hopcroft.Ullman.1974&quot;&gt;{{cite book|author1=Alfred V. Aho |author2=John E. Hopcroft |author3=Jeffrey D. Ullman | title=The Design and Analysis of Computer Algorithms|url=https://archive.org/details/designanalysisof00ahoarich |url-access=registration | year=1974| publisher=Addison-Wesley}}; here: Thm.10.4&lt;/ref&gt;

3-SAT is one of [[Karp's 21 NP-complete problems]], and it is used as a starting point for proving that other problems are also [[NP-hard]].&lt;ref group=note&gt;i.e. at least as hard as every other problem in NP. A decision problem is NP-complete if and only if it is in NP and is NP-hard.&lt;/ref&gt; This is done by [[polynomial-time reduction]] from 3-SAT to the other problem. An example of a problem where this method has been used is the [[clique problem]]: given a CNF formula consisting of ''c'' clauses, the corresponding [[Graph (discrete mathematics)|graph]] consists of a vertex for each literal, and an edge between each two non-contradicting&lt;ref group=note&gt;i.e. such that one literal is not the negation of the other&lt;/ref&gt; literals from different clauses, cf. picture. The graph has a ''c''-clique if and only if the formula is satisfiable.{{refn|Aho, Hopcroft, Ullman&lt;ref name=&quot;Aho.Hopcroft.Ullman.1974&quot;/&gt; (1974); Thm.10.5}}

There is a simple randomized algorithm due to Schöning (1999) that runs in time (4/3)&lt;sup&gt;''n''&lt;/sup&gt; where ''n'' is the number of variables in the 3-SAT proposition, and succeeds with high probability to correctly decide 3-SAT.&lt;ref name=&quot;Schoning.1999&quot;&gt;{{cite book | last1 = Schöning | first1 = Uwe| chapter = A Probabilistic Algorithm for ''k''-SAT and Constraint Satisfaction Problems | title = Proc. 40th Ann. Symp. Foundations of Computer Science| pages = 410–414 | date=Oct 1999 | url=http://homepages.cwi.nl/~rdewolf/schoning99.pdf| doi = 10.1109/SFFCS.1999.814612}}&lt;/ref&gt;

The [[exponential time hypothesis]] asserts that no algorithm can solve 3-SAT (or indeed ''k''-SAT for any ''k &gt; 2'') in {{math|exp([[Small o notation#Little-o notation|''o'']](''n''))}} time (i.e., fundamentally faster than exponential in ''n'').

Selman, Mitchell, and Levesque (1996) give empirical data on the difficulty of randomly generated 3-SAT formulas, depending on their size parameters.
Difficulty is measured in number recursive calls made by a [[#Algorithms for solving SAT|DPLL algorithm]].&lt;ref&gt;{{cite journal|author1=Bart Selman |author2=David Mitchell |author3=Hector Levesque | title=Generating Hard Satisfiability Problems| journal=Artificial Intelligence| year=1996| volume=81| pages=17–29| url=http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=3CBEAB7E11BF4B2283E9F383810060C1?doi=10.1.1.37.7362&amp;rep=rep1&amp;type=pdf| doi=10.1016/0004-3702(95)00045-3}}&lt;/ref&gt;

3-satisfiability can be generalized to '''k-satisfiability''' ('''k-SAT''', also '''k-CNF-SAT'''), when formulas in CNF are considered with each clause containing up to ''k'' literals.
However, since for any ''k''≥3, this problem can neither be easier than 3-SAT nor harder than SAT, and the latter two are NP-complete, so must be k-SAT.

Some authors restrict k-SAT to CNF formulas with '''exactly k literals'''. This doesn't lead to a different complexity class either, as each clause {{math|''l''&lt;sub&gt;1&lt;/sub&gt; ∨ ⋯ ∨ ''l''&lt;sub&gt;''j''&lt;/sub&gt;}} with ''j''&lt;''k'' literals can be padded with fixed dummy variables to
{{math|''l''&lt;sub&gt;1&lt;/sub&gt; ∨ ⋯ ∨ ''l''&lt;sub&gt;''j''&lt;/sub&gt; ∨ ''d''&lt;sub&gt;''j''+1&lt;/sub&gt; ∨ ⋯ ∨ ''d''&lt;sub&gt;''k''&lt;/sub&gt;}}.
After padding all clauses, 2&lt;sup&gt;''k''&lt;/sup&gt;-1 extra clauses&lt;ref group=note&gt;viz. all [[Canonical form (Boolean algebra)#Maxterms|maxterms]] that can be built with {{math|''d''&lt;sub&gt;1&lt;/sub&gt;,⋯,''d''&lt;sub&gt;''k''&lt;/sub&gt;}}, except {{math|''d''&lt;sub&gt;1&lt;/sub&gt;∨⋯∨''d''&lt;sub&gt;''k''&lt;/sub&gt;}}&lt;/ref&gt; have to be appended to ensure that only {{math|1=''d''&lt;sub&gt;1&lt;/sub&gt;=⋯=''d''&lt;sub&gt;''k''&lt;/sub&gt;=FALSE}} can lead to a satisfying assignment. Since ''k'' doesn't depend on the formula length, the extra clauses lead to a constant increase in length. For the same reason, it does not matter whether '''duplicate literals''' are allowed in clauses (like e.g. {{math|¬''x'' ∨ ¬''y'' ∨ ¬''y''}}), or not.

===Exactly-1 3-satisfiability===
[[File:Schaefer's 3-SAT to 1-in-3-SAT reduction.gif|thumb|x100px|'''Left:''' Schaefer's reduction of a 3-SAT clause ''x''∨''y''∨''z''. The result of ''R'' is {{fontcolor|#00a000|TRUE (1)}} if exactly one of its arguments is TRUE, and {{fontcolor|#a00000|FALSE (0)}} otherwise. All 8 combinations of values for ''x'',''y'',''z'' are examined, one per line. The fresh variables ''a'',...,''f'' can be chosen to satisfy all clauses (exactly one {{fontcolor|#00a000|green}} argument for each ''R'') in all lines except the first, where ''x''∨''y''∨''z'' is FALSE. '''Right:''' A simpler reduction with the same properties.]]
A variant of the 3-satisfiability problem is the '''one-in-three 3-SAT''' (also known variously as '''1-in-3-SAT''' and '''exactly-1 3-SAT''').
Given a conjunctive normal form with three literals per clause, the problem is to determine whether there exists a truth assignment to the variables so that each clause has ''exactly'' one TRUE literal (and thus exactly two FALSE literals). In contrast, ordinary 3-SAT requires that every clause has ''at least'' one TRUE literal.
Formally, a one-in-three 3-SAT problem is given as a generalized conjunctive normal form with all generalized clauses using a ternary operator ''R'' that is TRUE just if exactly one of its arguments is. When all literals of a one-in-three 3-SAT formula are positive, the satisfiability problem is called '''one-in-three positive 3-SAT'''.

One-in-three 3-SAT, together with its positive case, is listed as NP-complete problem &quot;LO4&quot; in the standard reference, ''Computers and Intractability: A Guide to the Theory of NP-Completeness''
by [[Michael R. Garey]] and [[David S. Johnson]].  One-in-three 3-SAT was proved to be NP-complete by [[Thomas Jerome Schaefer]] as a special case of [[Schaefer's dichotomy theorem]], which asserts that any problem generalizing Boolean satisfiability in a certain way is either in the class P or is NP-complete.&lt;ref name=&quot;schaefer&quot;&gt;{{Cite conference | last1 = Schaefer | first1 = Thomas J. | last2 = | first2 =  | year = 1978 | title = The complexity of satisfiability problems | booktitle = Proceedings of the 10th Annual ACM Symposium on Theory of Computing | place = San Diego, California | journal =  | volume =  | issue =  | pages = 216–226 | publisher =  | jstor =  | url = http://www.ccs.neu.edu/home/lieber/courses/csg260/f06/materials/papers/max-sat/p216-schaefer.pdf | accessdate = }}&lt;/ref&gt;

Schaefer gives a construction allowing an easy polynomial-time reduction from 3-SAT to one-in-three 3-SAT.  Let &quot;(''x'' or ''y'' or ''z'')&quot; be a clause in a 3CNF formula.  Add six fresh boolean variables ''a'', ''b'', ''c'', ''d'', ''e'', and ''f'', to be used to simulate this clause and no other.
&lt;!---now introduced already above---Let ''R''(''u'',''v'',''w'') be a predicate that is TRUE if and only if exactly one of the booleans ''u'', ''v'', and ''w''
is TRUE.---&gt;
Then the formula ''R''(''x'',''a'',''d'') ∧ ''R''(''y'',''b'',''d'') ∧ ''R''(''a'',''b'',''e'') ∧ ''R''(''c'',''d'',''f'') ∧ ''R''(''z'',''c'',FALSE) is satisfiable by some setting of the fresh variables if and only if at least one of ''x'', ''y'', or ''z'' is TRUE, see picture (left).  Thus any 3-SAT instance with ''m'' clauses and ''n'' variables may be converted into an [[equisatisfiable]] one-in-three 3-SAT instance with 5''m'' clauses and ''n''+6''m'' variables.&lt;ref&gt;(Schaefer, 1978), p.222, Lemma 3.5&lt;/ref&gt;
Another reduction involves only four fresh variables and three clauses: ''R''(¬''x'',''a'',''b'') ∧ ''R''(''b'',''y'',''c'') ∧ R(''c'',''d'',¬''z''), see picture (right).

===Not-all-equal 3-satisfiability===
{{main|Not-all-equal 3-satisfiability}}
Another variant is the '''not-all-equal 3-satisfiability''' problem (also called '''NAE3SAT''').
Given a conjunctive normal form with three literals per clause, the problem is to determine if an assignment to the variables exists such that in no clause all three literals have the same truth value. This problem is NP-complete, too, even if no negation symbols are admitted, by Schaefer's dichotomy theorem.&lt;ref name=&quot;schaefer&quot;/&gt;

===2-satisfiability===
{{Main article|2-satisfiability}}

SAT is easier if the number of literals in a clause is limited to at most 2, in which case the problem is called '''[[2-SAT]]'''. This problem can be solved in polynomial time, and in fact is [[NL-complete|complete]] for the complexity class [[NL (complexity)|NL]]. If additionally all OR operations in literals are changed to [[Exclusive or|XOR]] operations, the result is called '''exclusive-or 2-satisfiability''', which is a problem complete for the complexity class [[SL (complexity)|SL]] = [[L (complexity)|L]].

===Horn-satisfiability===
{{Main article|Horn-satisfiability}}

The problem of deciding the satisfiability of a given conjunction of [[Horn clause]]s is called '''Horn-satisfiability''', or '''HORN-SAT'''.
It can be solved in polynomial time by a single step of the [[Unit propagation]] algorithm, which produces the single minimal model of the set of Horn clauses (w.r.t. the set of literals assigned to TRUE).
Horn-satisfiability is [[P-complete]]. It can be seen as [[P (complexity)|P's]] version of the Boolean satisfiability problem.
Also, deciding the truth of quantified Horn formulas can be done in polynomial time.
&lt;ref name=&quot;buningkarpinski&quot;&gt;{{Cite journal | last1 = Buning | first1 = H.K. | last2 = Karpinski| first2 =  Marek| last3=Flogel|first3=A.|year = 1995 | title = Resolution for Quantified Boolean Formulas | place =  | journal = Information and Computation | volume = 117 | issue = 1 | pages = 12–18 | publisher = Elsevier | jstor =  | doi= 10.1006/inco.1995.1025| accessdate = }}&lt;/ref&gt;

Horn clauses are of interest because they are able to express [[Entailment|implication]] of one variable from a set of other variables. Indeed, one such clause ¬''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ... ∨ ¬''x''&lt;sub&gt;''n''&lt;/sub&gt; ∨ ''y'' can be rewritten as ''x''&lt;sub&gt;1&lt;/sub&gt; ∧ ... ∧ ''x''&lt;sub&gt;''n''&lt;/sub&gt; → ''y'', that is, if ''x''&lt;sub&gt;1&lt;/sub&gt;,...,''x''&lt;sub&gt;''n''&lt;/sub&gt; are all TRUE, then ''y'' needs to be TRUE as well.

A generalization of the class of Horn formulae is that of renameable-Horn formulae, which is the set of formulae that can be placed in Horn form by replacing some variables with their respective negation.
For example, (''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ¬''x''&lt;sub&gt;2&lt;/sub&gt;) ∧ (¬''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ''x''&lt;sub&gt;2&lt;/sub&gt; ∨ ''x''&lt;sub&gt;3&lt;/sub&gt;) ∧ ¬''x''&lt;sub&gt;1&lt;/sub&gt; is not a Horn formula, but can be renamed to the Horn formula (''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ¬''x''&lt;sub&gt;2&lt;/sub&gt;) ∧ (¬''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ''x''&lt;sub&gt;2&lt;/sub&gt; ∨ ¬''y''&lt;sub&gt;3&lt;/sub&gt;) ∧ ¬''x''&lt;sub&gt;1&lt;/sub&gt; by introducing ''y''&lt;sub&gt;3&lt;/sub&gt; as negation of ''x''&lt;sub&gt;3&lt;/sub&gt;.
In contrast, no renaming of (''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ¬''x''&lt;sub&gt;2&lt;/sub&gt; ∨ ¬''x''&lt;sub&gt;3&lt;/sub&gt;) ∧ (¬''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ''x''&lt;sub&gt;2&lt;/sub&gt; ∨ ''x''&lt;sub&gt;3&lt;/sub&gt;) ∧ ¬''x''&lt;sub&gt;1&lt;/sub&gt; leads to a Horn formula.
Checking the existence of such a replacement can be done in linear time; therefore, the satisfiability of such formulae is in P as it can be solved by first performing this replacement and then checking the satisfiability of the resulting Horn formula.

{| style=&quot;float:right&quot;
| [[File:Boolean satisfiability vs true literal counts.png|thumb|x200px|A formula with 2 clauses may be unsatisfied (red), 3-satisfied (green), xor-3-satisfied (blue), or/and 1-in-3-satisfied (yellow), depending on the TRUE-literal count in the 1st (hor) and 2nd (vert) clause.]]
|}

===XOR-satisfiability===

{| align=&quot;right&quot; class=&quot;wikitable collapsible collapsed&quot; style=&quot;text-align:left; margin: 1em&quot;
|-
! Solving an XOR-SAT example&lt;BR&gt;by [[Gaussian elimination]]
|-
|
{| align=&quot;left&quot; class=&quot;collapsible collapsed&quot; style=&quot;text-align:left&quot;
|-
! Given formula
|-
| (&quot;⊕&quot; means XOR, the {{color|#ff8080|red clause}} is optional)
|-
| (''a''⊕''c''⊕''d'') ∧ (''b''⊕¬''c''⊕''d'') ∧ (''a''⊕''b''⊕¬''d'') ∧ (''a''⊕¬''b''⊕¬''c'') {{color|#ff8080|∧ (¬''a''⊕''b''⊕''c'')}}
|}
|-
|
{| align=&quot;left&quot; class=&quot;collapsible collapsed&quot; style=&quot;text-align:left&quot;
|-
! colspan=&quot;9&quot; | Equation system
|-
| colspan=&quot;9&quot; | (&quot;1&quot; means TRUE, &quot;0&quot; means FALSE)
|-
| colspan=&quot;9&quot; | Each clause leads to one equation.
|-
|  || ''a'' || ⊕ ||   || ''c'' || ⊕ ||   || ''d'' || = 1
|-
|  || ''b'' || ⊕ || ¬ || ''c'' || ⊕ ||   || ''d'' || = 1
|-
|  || ''a'' || ⊕ ||   || ''b'' || ⊕ || ¬ || ''d'' || = 1
|-
|  || ''a'' || ⊕ || ¬ || ''b'' || ⊕ || ¬ || ''c'' || = 1
|-
|  {{color|#ff8080|¬}} || {{color|#ff8080|''a''}} || {{color|#ff8080|⊕}} || || {{color|#ff8080|''b''}} || {{color|#ff8080|⊕}} || || {{color|#ff8080|''c''}} || {{color|#ff8080| ≃ 1}}
|}
|-
|
{| align=&quot;left&quot; class=&quot;collapsible collapsed&quot; style=&quot;text-align:left&quot;
|-
! colspan=&quot;6&quot; | Normalized equation system
|-
| colspan=&quot;6&quot; | using properties of [[Boolean rings]] (¬''x''=1⊕''x'', ''x''⊕''x''=0)
|-
| ''a'' || ⊕ || ''c'' || ⊕ || ''d'' || = '''1'''
|-
| ''b'' || ⊕ || ''c'' || ⊕ || ''d'' || = '''0'''
|-
| ''a'' || ⊕ || ''b'' || ⊕ || ''d'' || = '''0'''
|-
| ''a'' || ⊕ || ''b'' || ⊕ || ''c'' || = '''1'''
|-
| {{color|#ff8080|''a''}} || {{color|#ff8080|⊕}}  || {{color|#ff8080|''b''}} || {{color|#ff8080|⊕}} || {{color|#ff8080|''c''}} || {{color|#ff8080| ≃ '''0'''}}
|-
| colspan=&quot;6&quot; | (If the {{color|#ff8080|red equation}} is present, {{color|#ff8080|it}} contradicts
|-
| colspan=&quot;6&quot; | the last black one, so the system is unsolvable.
|-
| colspan=&quot;6&quot; | Therefore, Gauss' algorithm is
|-
| colspan=&quot;6&quot; | used only for the black equations.)
|}
|-
|
{| align=&quot;left&quot; class=&quot;collapsible collapsed&quot; style=&quot;text-align:left&quot;
|-
! colspan=&quot;6&quot; | Associated coefficient matrix
|-
| &amp;nbsp;
|-
! ''a'' !! ''b'' !! ''c'' !! ''d'' !!   !! line
|-
| &amp;nbsp;
|-
| 1 || 0 || 1 || 1
! 1
| A
|-
| 0 || 1 || 1 || 1
! 0
| B
|-
| 1 || 1 || 0 || 1
! 0
| C
|-
| 1 || 1 || 1 || 0
! 1
| D
|}
|-
|
{| align=&quot;left&quot; class=&quot;collapsible collapsed&quot; style=&quot;text-align:left&quot;
|-
! colspan=&quot;6&quot; |Transforming to echelon form
|-
| &amp;nbsp;
|-
! ''a'' !! ''b'' !! ''c'' !! ''d'' !!   !! operation
|-
| &amp;nbsp;
|-
| 1 || 0 || 1 || 1
! 1
| A
|-
| 1 || 1 || 0 || 1
! 0
| C
|-
| 1 || 1 || 1 || 0
! 1
| D
|-
| 0 || 1 || 1 || 1
! 0
| B (swapped)
|-
| &amp;nbsp;
|-
| 1 || 0 || 1 || 1
! 1
| A
|-
| 0 || 1 || 1 || 0
! 1
| E = C⊕A
|-
| 0 || 1 || 0 || 1
! 0
| F = D⊕A
|-
| 0 || 1 || 1 || 1
! 0
| B
|-
| &amp;nbsp;
|-
| 1 || 0 || 1 || 1
! 1
| A
|-
| 0 || 1 || 1 || 0
! 1
| E
|-
| 0 || 0 || 1 || 1
! 1
| G = F⊕E
|-
| 0 || 0 || 0 || 1
! 1
| H = B⊕E
|}
|-
|
{| align=&quot;left&quot; class=&quot;collapsible collapsed&quot; style=&quot;text-align:left&quot;
|-
! colspan=&quot;6&quot; | Transforming to diagonal form
|-
| &amp;nbsp;
|-
! ''a'' !! ''b'' !! ''c'' !! ''d'' !!   !! operation
|-
| &amp;nbsp;
|-
| 1 || 0 || 1 || 0
! 0
| I = A⊕H
|-
| 0 || 1 || 1 || 0
! 1
| E
|-
| 0 || 0 || 1 || 0
! 0
| J = G⊕H
|-
| 0 || 0 || 0 || 1
! 1
| H
|-
| &amp;nbsp;
|-
| 1 || 0 || 0 || 0
! 0
| K = I⊕J
|-
| 0 || 1 || 0 || 0
! 1
| L = E⊕J
|-
| 0 || 0 || 1 || 0
! 0
| J
|-
| 0 || 0 || 0 || 1
! 1
| H
|-
|}
|-
|
{| align=&quot;left&quot; class=&quot;collapsible collapsed&quot; style=&quot;text-align:left&quot;
|-
! Solution:
|-
| If the {{color|#ff8080|red clause}} is present: || Unsolvable
|-
| Else: || ''a'' = 0 = FALSE
|-
| || ''b'' = 1 = TRUE
|-
| || ''c'' = 0 = FALSE
|-
| || ''d'' = 1 = TRUE
|-
| colspan=&quot;2&quot; | '''As a consequence:'''
|-
| colspan=&quot;2&quot; | ''R''(''a'',''c'',''d'') ∧ ''R''(''b'',¬''c'',''d'') ∧ ''R''(''a'',''b'',¬''d'') ∧ ''R''(''a'',¬''b'',¬''c'') {{color|#ff8080|∧ ''R''(¬''a'',''b'',''c'')}}
|-
| colspan=&quot;2&quot; | is not 1-in-3-satisfiable,
|-
| colspan=&quot;2&quot; | while (''a''∨''c''∨''d'') ∧ (''b''∨¬''c''∨''d'') ∧ (''a''∨''b''∨¬''d'') ∧ (''a''∨¬''b''∨¬''c'')
|-
| colspan=&quot;2&quot; |  is 3-satisfiable with ''a''=''c''=FALSE and ''b''=''d''=TRUE.
|}
|}

Another special case is the class of problems where each clause contains XOR (i.e. [[exclusive or]]) rather than (plain) OR operators.&lt;ref group=note&gt;Formally, generalized conjunctive normal forms with a ternary boolean operator ''R'' are employed, which is TRUE just if 1 or 3 of its arguments is. An input clause with more than 3 literals can be transformed into an equisatisfiable conjunction of clauses á 3 literals similar to [[#3-satisfiability|above]]; i.e. XOR-SAT can be reduced to XOR-3-SAT.&lt;/ref&gt;
This is in [[P (complexity class)|P]], since an XOR-SAT formula can also be viewed as a system of linear equations mod 2, and can be solved in cubic time by [[Gaussian elimination]];&lt;ref&gt;{{citation|title=The Nature of Computation|first1=Cristopher|last1=Moore|author1-link=Cristopher Moore|first2=Stephan|last2=Mertens|publisher=Oxford University Press|year=2011|isbn=9780199233212|page=366|url=https://books.google.com/books?id=z4zMiZyAE1kC&amp;pg=PA366}}.&lt;/ref&gt; see the box for an example. This recast is based on the [[Boolean algebra (structure)#Boolean rings|kinship between Boolean algebras and Boolean rings]], and the fact that arithmetic modulo two forms a [[finite field]]. Since ''a'' XOR ''b'' XOR ''c'' evaluates to TRUE if and only if exactly 1 or 3 members of {''a'',''b'',''c''} are TRUE, each solution of the 1-in-3-SAT problem for a given CNF formula is also a solution of the XOR-3-SAT problem, and in turn each solution of XOR-3-SAT is a solution of 3-SAT, cf. picture. As a consequence, for each CNF formula, it is possible to solve the XOR-3-SAT problem defined by the formula, and based on the result infer either that the 3-SAT problem is solvable or that the 1-in-3-SAT problem is unsolvable.

Provided that the [[P = NP problem|complexity classes P and NP are not equal]], neither 2-, nor Horn-, nor XOR-satisfiability is NP-complete, unlike SAT.

===Schaefer's dichotomy theorem===
{{Main article|Schaefer's dichotomy theorem}}
The restrictions above (CNF, 2CNF, 3CNF, Horn, XOR-SAT) bound the considered formulae to be conjunctions of subformulae; each restriction states a specific form for all subformulae: for example, only binary clauses can be subformulae in 2CNF.

Schaefer's dichotomy theorem states that, for any restriction to Boolean operators that can be used to form these subformulae, the corresponding satisfiability problem is in P or NP-complete.  The membership in P of the satisfiability of 2CNF, Horn, and XOR-SAT formulae are special cases of this theorem.&lt;ref name=&quot;schaefer&quot;/&gt;

==Extensions of SAT==
An extension that has gained significant popularity since 2003 is '''[[satisfiability modulo theories]]''' ('''SMT''') that can enrich CNF formulas with linear constraints, arrays, all-different constraints, [[uninterpreted function]]s,&lt;ref name=&quot;Bryant.German.Velev.1999&quot;&gt;R. E. Bryant, S. M. German, and M. N. Velev, [http://portal.acm.org/citation.cfm?id=709275 Microprocessor Verification Using Efficient Decision Procedures for a Logic of Equality with Uninterpreted Functions], in Analytic Tableaux and Related Methods, pp.&amp;nbsp;1–13, 1999.&lt;/ref&gt; ''etc.'' Such extensions typically remain NP-complete, but very efficient solvers are now available that can handle many such kinds of constraints.

The satisfiability problem becomes more difficult if both &quot;for all&quot; ([[∀]]) and &quot;there exists&quot; ([[∃]]) [[Quantifier (logic)|quantifier]]s are allowed to bind the Boolean variables.
An example of such an expression would be {{math|size=100%|∀''x'' ∀''y'' ∃''z'' (''x'' ∨ ''y'' ∨ ''z'') ∧ (¬''x'' ∨ ¬''y'' ∨ ¬''z'')}}; it is valid, since for all values of ''x'' and ''y'', an appropriate value of ''z'' can be found, viz. ''z''=TRUE if both ''x'' and ''y'' are FALSE, and ''z''=FALSE else.
SAT itself (tacitly) uses only ∃ quantifiers.
If only ∀ quantifiers are allowed instead, the so-called '''[[Tautology (logic)|tautology]] problem''' is obtained, which is [[co-NP-complete]].
If both quantifiers are allowed, the problem is called the '''[[quantified Boolean formula problem]]''' ('''QBF'''), which can be shown to be [[PSPACE-complete]]. It is widely believed that PSPACE-complete problems are strictly harder than any problem in NP, although this has not yet been proved. Using highly parallel ''[[P system]]s'', QBF-SAT problems can be solved in linear time.&lt;ref&gt;{{Cite journal | last1 = Alhazov | first1 = Artiom | last2 = Martín-Vide | first2 = Carlos | last3 = Pan | first3 = Linqiang | title = Solving a PSPACE-Complete Problem by Recognizing P Systems with Restricted Active Membranes | url = http://dl.acm.org/citation.cfm?id=2371013 | journal = Fundamenta Informaticae | volume = 58 | pages = 67–77 | year = 2003 }}&lt;/ref&gt;

Ordinary SAT asks if there is at least one variable assignment that makes the formula true. A variety of variants deal with the number of such assignments:
* '''MAJ-SAT''' asks if the majority of all assignments make the formula TRUE. It is known to be complete for [[PP (complexity)|PP]], a probabilistic class.
* '''[[Sharp-SAT|#SAT]]''', the problem of counting how many variable assignments satisfy a formula, is a counting problem, not a decision problem, and is [[Sharp-P-complete|#P-complete]].
* '''UNIQUE SAT'''&lt;ref&gt;{{Cite journal|last=Blass|first=Andreas|last2=Gurevich|first2=Yuri|date=1982-10-01|title=On the unique satisfiability problem|url=http://www.sciencedirect.com/science/article/pii/S0019995882904399|journal=Information and Control|volume=55|issue=1|pages=80–88|doi=10.1016/S0019-9958(82)90439-9|issn=0019-9958}}&lt;/ref&gt; is the problem of determining whether a formula has exactly one assignment. It is complete for [[US (complexity)|US]]&lt;ref&gt;{{Cite web|url=https://complexityzoo.uwaterloo.ca/Complexity_Zoo:U#US|title=Complexity Zoo:U - Complexity Zoo|website=complexityzoo.uwaterloo.ca|access-date=2019-12-05}}&lt;/ref&gt;, the [[complexity class]] describing problems solvable by a non-deterministic polynomial time [[Turing machine]] that accepts when there is exactly one nondeterministic accepting path and rejects otherwise.
*'''UNAMBIGUOUS-SAT''' is the name given to the satisfiability problem when the input is [[Promise problem|restricted]] to formulas having at most one satisfying assignment. The problem is also called '''USAT'''&lt;ref&gt;{{Cite book |url=https://www.springer.com/gp/book/9781846282973 |chapter=Supplementary Lecture F: Unique Satisfiability |title=Theory of Computation |last=Kozen |first=Dexter C. |date=2006 |publisher=Springer-Verlag |isbn=9781846282973 |series=Texts in Computer Science |location=London |page=180 |language=en}}&lt;/ref&gt;. A solving algorithm for UNAMBIGUOUS-SAT is allowed to exhibit any behavior, including endless looping, on a formula having several satisfying assignments. Although this problem seems easier, Valiant and Vazirani have [[Valiant-Vazirani theorem|shown]]&lt;ref&gt;{{Cite journal | last1 = Valiant | first1 = L. | last2 = Vazirani | first2 = V.| doi = 10.1016/0304-3975(86)90135-0 | title = NP is as easy as detecting unique solutions | url = http://www.cs.princeton.edu/courses/archive/fall05/cos528/handouts/NP_is_as.pdf| journal = Theoretical Computer Science | volume = 47 | pages = 85–93 | year = 1986 | pmid =  | pmc = }}&lt;/ref&gt; that if there is a practical (i.e. [[Bounded-error probabilistic polynomial|randomized polynomial-time]]) algorithm to solve it, then all problems in [[NP (complexity class)|NP]] can be solved just as easily.
* '''MAX-SAT''', the [[maximum satisfiability problem]], is an [[FNP (complexity)|FNP]] generalization of SAT. It asks for the maximum number of clauses, which can be satisfied by any assignment. It has efficient [[approximation algorithm]]s, but is NP-hard to solve exactly. Worse still, it is [[APX]]-complete, meaning there is no [[polynomial-time approximation scheme]] (PTAS) for this problem unless P=NP.
*'''WMSAT''' is the problem of finding an assignment of minimum weight that satisfy a monotone Boolean formula (i.e. a formula without any negation). Weights of propositional variables are given in the input of the problem. The weight of an assignment is the sum of weights of true variables. That problem is NP-complete (see Th. 1 of &lt;ref&gt;{{Cite journal|last=Buldas|first=Ahto|last2=Lenin|first2=Aleksandr|last3=Willemson|first3=Jan|last4=Charnamord|first4=Anton|date=2017|editor-last=Obana|editor-first=Satoshi|editor2-last=Chida|editor2-first=Koji|title=Simple Infeasibility Certificates for Attack Trees|url=https://link.springer.com/chapter/10.1007/978-3-319-64200-0_3|journal=Advances in Information and Computer Security|series=Lecture Notes in Computer Science|language=en|publisher=Springer International Publishing|pages=39–55|doi=10.1007/978-3-319-64200-0_3|isbn=9783319642000}}&lt;/ref&gt;).

Other generalizations include satisfiability for [[first-order predicate calculus|first]]- and [[second-order logic]], [[constraint satisfaction problem]]s, [[0-1 integer programming]].

==Self-reducibility==
The SAT problem is '''self-reducible''', that is, each algorithm which correctly answers if an instance of SAT is solvable can be used to find a satisfying assignment. First, the question is asked on the given formula Φ. If the answer is &quot;no&quot;, the formula is unsatisfiable. Otherwise, the question is asked on the partly instantiated formula Φ[[substitution (logic)|{''x''&lt;sub&gt;1&lt;/sub&gt;=TRUE}]], i.e. Φ with the first variable ''x''&lt;sub&gt;1&lt;/sub&gt; replaced by TRUE, and simplified accordingly. If the answer is &quot;yes&quot;, then ''x''&lt;sub&gt;1&lt;/sub&gt;=TRUE, otherwise ''x''&lt;sub&gt;1&lt;/sub&gt;=FALSE. Values of other variables can be found subsequently in the same way. In total, ''n''+1 runs of the algorithm are required, where ''n'' is the number of distinct variables in Φ.

This property of self-reducibility is used in several theorems in complexity theory:

: [[NP (complexity)|NP]] ⊆ [[P/poly]] ⇒ [[PH (complexity)|PH]] = [[Polynomial hierarchy#Definitions|Σ&lt;sub&gt;2&lt;/sub&gt;]] &amp;nbsp; ([[Karp–Lipton theorem]])
: [[NP (complexity)|NP]] ⊆ [[BPP (complexity)|BPP]] ⇒ [[NP (complexity)|NP]] = [[RP (complexity)|RP]]
: [[P (complexity)|P]] = [[NP (complexity)|NP]] ⇒ [[FP (complexity)|FP]] = [[FNP (complexity)|FNP]]

==Algorithms for solving SAT==

Since the SAT problem is NP-complete, only algorithms with exponential worst-case complexity are known for it. In spite of this, efficient and scalable algorithms for SAT were developed during the 2000s and have contributed to dramatic advances in our ability to automatically solve problem instances involving tens of thousands of variables and millions of constraints (i.e. clauses).&lt;ref name=&quot;Codish.Ohrimenko.Stuckey.2007&quot;&gt;{{citation|title=Principles and Practice of Constraint Programming – CP 2007|series=Lecture Notes in Computer Science|volume=4741|year=2007|pages=544–558|contribution=Propagation = Lazy Clause Generation|first1=Olga|last1=Ohrimenko|first2=Peter J.|last2=Stuckey|first3=Michael|last3=Codish|doi=10.1007/978-3-540-74970-7_39|quote=modern SAT solvers can often handle problems with millions of constraints and hundreds of thousands of variables|citeseerx=10.1.1.70.5471}}.&lt;/ref&gt; Examples of such problems in [[electronic design automation]] (EDA) include [[formal equivalence checking]], [[model checking]], [[formal verification]] of [[microprocessor|pipelined microprocessors]],&lt;ref name=&quot;Bryant.German.Velev.1999&quot;/&gt; [[automatic test pattern generation]], [[routing (electronic design automation)|routing]] of [[FPGA]]s,&lt;ref&gt;{{Cite journal | last1 = Gi-Joon Nam | last2 = Sakallah | first2 = K. A. | last3 = Rutenbar | first3 = R. A. | title = A new FPGA detailed routing approach via search-based Boolean satisfiability | journal = IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems | volume = 21 | issue = 6 | pages = 674 | year = 2002 | url = http://cs-rutenbar.web.engr.illinois.edu/wp-content/uploads/2012/10/rutenbar-sattranscad02.pdf| doi = 10.1109/TCAD.2002.1004311}}&lt;/ref&gt; [[Automated planning and scheduling|planning]], and [[Scheduling algorithm|scheduling problems]], and so on. A SAT-solving engine is now considered to be an essential component in the [[electronic design automation|EDA]] toolbox.

A DPLL SAT solver employs a systematic backtracking search procedure to explore the (exponentially sized) space of variable assignments looking for satisfying assignments. The basic search procedure was proposed in two seminal papers in the early 1960s (see references below) and is now commonly referred to as the [[Davis–Putnam–Logemann–Loveland algorithm]] (&quot;DPLL&quot; or &quot;DLL&quot;).&lt;ref&gt;{{Cite journal | last1 = Davis | first1 = M. | last2 = Putnam | first2 = H. | title = A Computing Procedure for Quantification Theory | journal = Journal of the ACM | volume = 7 | issue = 3 | pages = 201 | year = 1960 | doi = 10.1145/321033.321034}}&lt;/ref&gt;&lt;ref&gt;{{Cite journal | last1 = Davis | first1 = M. |authorlink1=Martin Davis (mathematician)| last2 = Logemann | first2 = G. | last3 = Loveland | first3 = D. | title = A machine program for theorem-proving | journal = [[Communications of the ACM]]| volume = 5 | issue = 7 | pages = 394–397 | year = 1962 | url = http://www.ensiie.fr/~blazy/ipr/article2.pdf| doi = 10.1145/368273.368557}}&lt;/ref&gt; Many modern approaches to practical SAT solving base on the DPLL algorithm and share the same structure. Often they only improve the efficiency of certain classes of SAT problems such as instances that appear in industrial applications or randomly generated instances.&lt;ref name=&quot;:3&quot; /&gt; Theoretically, exponential lower bounds have been proved for the DPLL family of algorithms.{{cn|date=February 2020}}

Algorithms that are not part of the DPLL family include [[stochastic]] [[Local search (constraint satisfaction)|local search]] algorithms. One example is [[WalkSAT]]. Stochastic methods try to find a satisfying interpretation but cannot deduce that a SAT instance is unsatisfiable, as opposed to complete algorithms, such as DPLL.&lt;ref name=&quot;:3&quot; /&gt;

In contrast, randomized algorithms like the PPSZ algorithm by Paturi, Pudlak, Saks, and Zane set variables in a random order according to some heuristics, for example bounded-width [[Resolution (logic)|resolution]]. If the heuristic can't find the correct setting, the variable is assigned randomly. The PPSZ algorithm has a {{clarify span|runtime|I guess, for randomized algorithm, 'runtime' means 'expected runtime' or something similar, rather than 'worst case runtime'? Please qualify, and add a link to the definition, if possible.|date=February 2020}} of &lt;math&gt;O(1.308^n)&lt;/math&gt; for 3-SAT. This was the best-known runtime for this problem until a recent improvement by Hansen, Kaplan, Zamir and Zwick that has a runtime of &lt;math&gt;O(1.307^n)&lt;/math&gt; for 3-SAT and currently the best known runtime for k-SAT, for all values of k. In the setting with many satisfying assignments the randomized algorithm by Schöning has a better bound.&lt;ref name=&quot;Schoning.1999&quot;/&gt;&lt;ref name=&quot;ppsz_algorithm&quot;&gt;[http://dl.acm.org/citation.cfm?id=1066101 &quot;An improved exponential-time algorithm for k-SAT&quot;], Paturi, Pudlak, Saks, Zani&lt;/ref&gt;&lt;ref name=&quot;biased_ppsz_algorithm&quot;&gt;[http://dl.acm.org/citation.cfm?id=3316359 &quot;Faster k-SAT algorithms using biased-PPSZ&quot;], Hansen, Kaplan, Zamir, Zwick&lt;/ref&gt;

Modern SAT solvers (developed in the 2000s) come in two flavors: &quot;conflict-driven&quot; and &quot;look-ahead&quot;. Both approaches descend from DPLL.&lt;ref name=&quot;:3&quot;&gt;{{Citation|last=Zhang|first=Lintao|title=The Quest for Efficient Boolean Satisfiability Solvers|date=2002|url=http://dx.doi.org/10.1007/3-540-45657-0_2|work=Computer Aided Verification|pages=17–36|publisher=Springer Berlin Heidelberg|isbn=978-3-540-43997-4|access-date=2020-02-27|last2=Malik|first2=Sharad}}&lt;/ref&gt; Conflict-driven solvers, such as [[conflict-driven clause learning]] (CDCL), augment the basic DPLL search algorithm with efficient conflict analysis, clause learning, non-[[chronological backtracking]] (a.k.a. [[backjumping]]), as well as [[&quot;two-watched-literals&quot; unit propagation]], adaptive branching, and random restarts. These &quot;extras&quot; to the basic systematic search have been empirically shown to be essential for handling the large SAT instances that arise in [[electronic design automation]] (EDA).&lt;ref&gt;{{Cite journal | last1 = Vizel | first1 = Y. | last2 = Weissenbacher | first2 = G. | last3 = Malik | first3 = S. | journal = Proceedings of the IEEE | volume = 103 | issue = 11 | year = 2015 | doi = 10.1109/JPROC.2015.2455034|title=Boolean Satisfiability Solvers and Their Applications in Model Checking}}&lt;/ref&gt; Well known implementations include [[Chaff algorithm|Chaff]]&lt;ref&gt;{{Cite book|last1=Moskewicz|first1=M. W.|title=Proceedings of the 38th conference on Design automation (DAC)|last2=Madigan|first2=C. F.|last3=Zhao|first3=Y.|last4=Zhang|first4=L.|last5=Malik|first5=S.|year=2001|isbn=1581132972|pages=530|chapter=Chaff: Engineering an Efficient SAT Solver|doi=10.1145/378239.379017|chapter-url=http://www.princeton.edu/~chaff/publication/DAC2001v56.pdf}}&lt;/ref&gt; and [[GRASP (SAT solver)|GRASP]]&lt;ref&gt;{{Cite journal|last1=Marques-Silva|first1=J. P.|last2=Sakallah|first2=K. A.|year=1999|title=GRASP: a search algorithm for propositional satisfiability|url=http://embedded.eecs.berkeley.edu/Alumni/wjiang/ee219b/grasp.pdf|journal=IEEE Transactions on Computers|volume=48|issue=5|pages=506|doi=10.1109/12.769433}}&lt;/ref&gt;. Look-ahead solvers have especially strengthened reductions (going beyond unit-clause propagation) and the heuristics, and they are generally stronger than conflict-driven solvers on hard instances (while conflict-driven solvers can be much better on large instances which actually have an easy instance inside).

Modern SAT solvers are also having significant impact on the fields of software verification, constraint solving in artificial intelligence, and operations research, among others. Powerful solvers are readily available as [[free and open source software]]. In particular, the conflict-driven [http://minisat.se/ MiniSAT], which was relatively successful at the [http://www.satcompetition.org/ 2005 SAT competition], only has about 600 lines of code. A modern Parallel SAT solver is ManySAT&lt;ref&gt;http://www.cril.univ-artois.fr/~jabbour/manysat.htm&lt;/ref&gt;. It can achieve super linear speed-ups on important classes of problems. An example for look-ahead solvers is [https://web.archive.org/web/20111026165915/http://www.st.ewi.tudelft.nl/sat/march_dl.php march_dl], which won a prize at the [http://www.satcompetition.org/ 2007 SAT competition].

Certain types of large random satisfiable instances of SAT can be solved by [[survey propagation]] (SP). Particularly in [[hardware design]] and [[hardware verification|verification]] applications, satisfiability and other logical properties of a given propositional formula are sometimes decided based on a representation of the formula as a [[binary decision diagram]] (BDD).

Almost all SAT solvers include time-outs, so they will terminate in reasonable time even if they cannot find a solution.
Different SAT solvers will find different instances easy or hard, and some excel at proving unsatisfiability, and others at finding solutions.
All of these behaviors can be seen in the SAT solving contests.&lt;ref&gt;{{cite web|url=http://www.satcompetition.org/ |title=The international SAT Competitions web page|accessdate=2007-11-15}}&lt;/ref&gt;

=== Parallel SAT-Solving ===
[[Parallel algorithm|Parallel]] SAT solvers come in three categories: Portfolio, [[Divide-and-conquer algorithm|Divide-and-conquer]] and parallel [[Local search (constraint satisfaction)|local search]] algorithms. With parallel portfolios, multiple different SAT solvers run concurrently. Each of them solves a copy of the SAT instance, whereas divide-and-conquer algorithms divide the problem between the processors. Different approaches exist to parallelize local search algorithms.

The [http://www.satcompetition.org/ International SAT Solver Competition] has a parallel track reflecting recent advances in parallel SAT solving. In 2016&lt;ref&gt;{{Cite web|url=https://baldur.iti.kit.edu/sat-competition-2016/index.php?cat=tracks|title=SAT Competition 2016|website=baldur.iti.kit.edu|access-date=2020-02-13}}&lt;/ref&gt;, 2017&lt;ref&gt;{{Cite web|url=https://baldur.iti.kit.edu/sat-competition-2017/index.php?cat=tracks|title=SAT Competition 2017|website=baldur.iti.kit.edu|access-date=2020-02-13}}&lt;/ref&gt; and 2018&lt;ref&gt;{{Cite web|url=http://sat2018.forsyte.tuwien.ac.at/index.php?cat=tracks|title=SAT Competition 2018|website=sat2018.forsyte.tuwien.ac.at|access-date=2020-02-13}}&lt;/ref&gt;, the benchmarks were run on a [[Shared memory|shared-memory]] system with 24 [[Central processing unit|processing cores]], therefore solvers intended for [[distributed memory]] or [[manycore processors]] might have fallen short.
==== Portfolios ====
In general there is no SAT solver that performs better than all other solvers on all SAT problems. An algorithm might perform well for problem instances others struggle with, but will do worse with other instances. Furthermore, given a SAT instance, there is no reliable way to predict which algorithm will solve this instance particularly fast. These limitations motivate the parallel portfolio approach. A portfolio is a set of different algorithms or different configurations of the same algorithm. All solvers in a parallel portfolio run on different processors to solve of the same problem. If one solver terminates, the portfolio solver reports the problem to be satisfiable or unsatisfiable according to this one solver. All other solvers are terminated. Diversifying portfolios by including a variety of solvers, each performing well on a different set of problems, increases the robustness of the solver.&lt;ref name=&quot;:1&quot;&gt;{{Citation|last=Balyo|first=Tomáš|title=Parallel Satisfiability|date=2018|url=http://dx.doi.org/10.1007/978-3-319-63516-3_1|work=Handbook of Parallel Constraint Reasoning|pages=3–29|publisher=Springer International Publishing|isbn=978-3-319-63515-6|access-date=2020-02-07|last2=Sinz|first2=Carsten}}&lt;/ref&gt;

Many solvers internally use a [[Random number generation|random number generator]]. Diversifying their [[Random seed|seeds]] is a simple way to diversify a portfolio. Other diversification strategies involve enabling, disabling or diversifying certain heuristics in the sequential solver.&lt;ref&gt;{{Cite web|url=https://baldur.iti.kit.edu/sat-race-2010/descriptions/solver_1+2+3+6.pdf|title=Lingeling, Plingeling, PicoSAT and PrecoSAT at SAT Race 2010|last=Biere|first=Armin|website=SAT-RACE 2010|format=PDF|url-status=live}}&lt;/ref&gt; 

One drawback of parallel portfolios is the amount of duplicate work. If clause learning is used in the sequential solvers, sharing learned clauses between parallel running solvers can reduce duplicate work and increase performance. Yet, even merely running a portfolio of the best solvers in parallel makes a competitive parallel solver. An example of such a solver is PPfolio&lt;ref&gt;{{Cite web|url=http://www.cril.univ-artois.fr/~roussel/ppfolio/|title=ppfolio solver|website=www.cril.univ-artois.fr|access-date=2019-12-29}}&lt;/ref&gt;&lt;ref&gt;{{Cite web|url=http://www.cril.univ-artois.fr/SAT11/results/ranking.php?idev=58|title=SAT 2011 Competition: 32 cores track: ranking of solvers|website=www.cril.univ-artois.fr|access-date=2020-02-13}}&lt;/ref&gt;. It was designed to find a lower bound for the performance a parallel SAT solver should be able to deliver. Despite the large amount of duplicate work due to lack of optimizations, it performed well on a shared memory machine. HordeSat&lt;ref&gt;{{Citation|last=Balyo|first=Tomáš|title=HordeSat: A Massively Parallel Portfolio SAT Solver|date=2015|url=http://dx.doi.org/10.1007/978-3-319-24318-4_12|work=Lecture Notes in Computer Science|pages=156–172|publisher=Springer International Publishing|isbn=978-3-319-24317-7|access-date=2019-12-29|last2=Sanders|first2=Peter|last3=Sinz|first3=Carsten}}&lt;/ref&gt; is a parallel portfolio solver for large clusters of computing nodes. It uses differently configured instances of the same sequential solver at its core. Particularly for hard SAT instances HordeSat can produce linear speedups and therefore reduce runtime significantly.

In recent years parallel portfolio SAT solvers have dominated the parallel track of the [http://www.satcompetition.org/ International SAT Solver Competitions]. Notable examples of such solvers include Plingeling and painless-mcomsps.&lt;ref&gt;{{Cite web|url=http://sat2018.forsyte.tuwien.ac.at/|title=SAT Competition 2018|website=sat2018.forsyte.tuwien.ac.at|access-date=2020-02-13}}&lt;/ref&gt;

==== Divide-and-Conquer ====

In contrast to parallel portfolios, parallel Divide-and-Conquer tries to split the search space between the processing elements. Divide-and-conquer algorithms, such as the sequential DPLL, already apply the technique of splitting the search space, hence their extension towards a parallel algorithm is straight forward. However, due to techniques like unit propagation, following a division, the partial problems may differ significantly in complexity. Thus the DPLL algorithm typically does not process each part of the search space in the same amount of time, yielding a challenging [[Load balancing (computing)|load balancing]] problem.&lt;ref name=&quot;:1&quot; /&gt;[[File:Cube and Conquer example.svg|alt=Tree illustrating the look-ahead phase and the resulting cubes.|thumb|348x348px|Cube phase for the formula &lt;math&gt;F&lt;/math&gt;. The decision heuristic chooses which variables (circles) to assign. After the cutoff heuristic decides to stop further branching, the partial problems (rectangles) are solved independently using CDCL.]]
Due to non-chronological backtracking, parallelization of conflict-driven clause learning is more difficult. One way to overcome this is the [[Cube-and-Conquer]] paradigm.&lt;ref name=&quot;:0&quot;&gt;{{Citation|last=Heule|first=Marijn J. H.|title=Cube and Conquer: Guiding CDCL SAT Solvers by Lookaheads|date=2012|url=http://dx.doi.org/10.1007/978-3-642-34188-5_8|work=Hardware and Software: Verification and Testing|pages=50–65|publisher=Springer Berlin Heidelberg|isbn=978-3-642-34187-8|access-date=2019-12-30|last2=Kullmann|first2=Oliver|last3=Wieringa|first3=Siert|last4=Biere|first4=Armin}}&lt;/ref&gt; It suggests solving in two phases. In the &quot;cube&quot; phase the Problem is divided into many thousands, up to millions, of sections. This is done by a look-ahead solver, that finds a set of partial configurations called &quot;cubes&quot;. A cube can also be seen as a [[Logical conjunction|conjunction]] of a subset of variables of the original formula. In conjunction with the formula, each of the cubes forms a new formula. These formulas can be solved independently and concurrently by conflict-driven solvers. As the [[Logical disjunction|disjunction]] of these formulas is [[Logical equivalence|equivalent]] to the original formula, the problem is reported to be satisfiable, if one of the formulas is satisfiable. The look-ahead solver is favorable for small but hard problems&lt;ref&gt;{{Cite book|last=Heule|first=Marijn J. H.|title=Handbook of Satisfiability|last2=van Maaren|first2=Hans|publisher=IOS Press|year=2009|isbn=978-1-58603-929-5|location=|pages=155-184|chapter=Look-Ahead Based SAT Solvers|chapter-url=https://www.cs.utexas.edu/~marijn/publications/p01c05_lah.pdf}}&lt;/ref&gt;, so it is used to gradually divide the problem into multiple sub-problems. These sub-problems are easier but still large which is the ideal form for a conflict-driven solver. Furthermore look-ahead solvers consider the entire problem whereas conflict-driven solvers make decisions based on information that is much more local. There are three heuristics involved in the cube phase. The variables in the cubes are chosen by the decision heuristic. The direction heuristic decides which variable assignment (true or false) to explore first. In satisfiable problem instances, choosing a satisfiable branch first is beneficial. The cutoff heuristic decides when to stop expanding a cube and instead forward it to a sequential conflict-driven solver. Preferably the cubes are similarly complex to solve.&lt;ref name=&quot;:0&quot; /&gt;

Treengeling is an example for a parallel solver that applies the Cube-and-Conquer paradigm. Since its introduction in 2012 it has had multiple successes at the [http://www.satcompetition.org/ International SAT Solver Competition]. Cube-and-Conquer was used to solve the [[Boolean Pythagorean triples problem]].&lt;ref name=&quot;:2&quot;&gt;{{Citation|last=Heule|first=Marijn J. H.|title=Solving and Verifying the Boolean Pythagorean Triples Problem via Cube-and-Conquer|date=2016|url=http://dx.doi.org/10.1007/978-3-319-40970-2_15|work=Theory and Applications of Satisfiability Testing – SAT 2016|pages=228–245|publisher=Springer International Publishing|isbn=978-3-319-40969-6|access-date=2019-12-31|last2=Kullmann|first2=Oliver|last3=Marek|first3=Victor W.}}&lt;/ref&gt;

==== Local search ====
One strategy towards a parallel local search algorithm for SAT solving is trying multiple variable flips concurrently on different processing units.&lt;ref&gt;{{Citation|last=Roli|first=Andrea|title=Criticality and Parallelism in Structured SAT Instances|date=2002|url=http://dx.doi.org/10.1007/3-540-46135-3_51|work=Lecture Notes in Computer Science|pages=714–719|publisher=Springer Berlin Heidelberg|isbn=978-3-540-44120-5|access-date=2020-02-07}}&lt;/ref&gt; Another is to apply the aforementioned portfolio approach, however clause sharing is not possible since local search solvers do not produce clauses. Alternatively, it is possible to share the configurations that are produced locally. These configurations can be used to guide the production of a new initial configuration when a local solver decides to restart its search.&lt;ref&gt;{{Citation|last=Arbelaez|first=Alejandro|title=Improving Parallel Local Search for SAT|date=2011|url=http://dx.doi.org/10.1007/978-3-642-25566-3_4|work=Lecture Notes in Computer Science|pages=46–60|publisher=Springer Berlin Heidelberg|isbn=978-3-642-25565-6|access-date=2020-02-13|last2=Hamadi|first2=Youssef}}&lt;/ref&gt;

==See also==
*[[Unsatisfiable core]]
*[[Satisfiability modulo theories]]
*[[Sharp-SAT|Counting SAT]]
*[[Planar SAT]]
*[[Karloff–Zwick algorithm]]
*[[Circuit satisfiability]]

==Notes==
{{Reflist|group=note}}

==References==
{{Reflist|30em}}
References are ordered by date of publication:
{{refbegin|colwidth=30em}}
* {{cite book|author = Michael R. Garey|author2 = David S. Johnson|author-link = Michael R. Garey|author2-link = David S. Johnson|last-author-amp = yes| year = 1979 | title = [[List of important publications in theoretical computer science#Computers and Intractability: A Guide to the Theory of NP-Completeness|Computers and Intractability: A Guide to the Theory of NP-Completeness]] | publisher = W.H. Freeman | isbn = 0-7167-1045-5}} A9.1: LO1 – LO7, pp.&amp;nbsp;259 – 260.
* {{Cite book | last1 = Marques-Silva | first1 = J. | last2 = Glass | first2 = T. | chapter = Combinational equivalence checking using satisfiability and recursive learning | title = Design, Automation and Test in Europe Conference and Exhibition, 1999. Proceedings (Cat. No. PR00078) | pages = 145 | year = 1999 | isbn = 0-7695-0078-1 | chapter-url= http://eprints.soton.ac.uk/265003/1/jpms-date99a.pdf| doi = 10.1109/DATE.1999.761110}}
* {{Cite journal | last1 = Clarke | first1 = E. | last2 = Biere | first2 = A. | last3 = Raimi | first3 = R. | last4 = Zhu | first4 = Y. | journal = Formal Methods in System Design | volume = 19 | pages = 7 | year = 2001 | doi = 10.1023/A:1011276507260|title=Bounded Model Checking Using Satisfiability Solving}}
* {{Cite journal | last1 = Giunchiglia | first1 = E. | last2 = Tacchella | first2 = A. | editor1-last = Giunchiglia | editor1-first = Enrico | editor2-first = Armando | title = Theory and Applications of Satisfiability Testing | series = Lecture Notes in Computer Science | volume = 2919 | year = 2004 | isbn = 978-3-540-20851-8 | doi = 10.1007/b95238 | editor2-last = Tacchella}}
* {{Cite journal | last1 = Babic | first1 = D. | last2 = Bingham | first2 = J. | last3 = Hu | first3 = A. J. | title = B-Cubing: New Possibilities for Efficient SAT-Solving | journal = IEEE Transactions on Computers | volume = 55 | issue = 11 | pages = 1315 | year = 2006 | url = http://www.domagoj-babic.com/uploads/Pubs/TCOM06/tcom06.pdf| doi = 10.1109/TC.2006.175}}
* {{Cite book | last1 = Rodriguez | first1 = C. | last2 = Villagra | first2 = M. | last3 = Baran | first3 = B. | chapter = Asynchronous team algorithms for Boolean Satisfiability | title = 2007 2nd Bio-Inspired Models of Network, Information and Computing Systems | pages = 66 | year = 2007 | chapter-url = http://www.cc.pol.una.py/lcca/publicaciones/optimizacion/2007/Asynchronous%20Team%20Algorithms%20for%20Boolean%20Satisfiability.pdf| doi = 10.1109/BIMNICS.2007.4610083}}
* {{cite book|editor1=Frank Van Harmelen |editor2=Vladimir Lifschitz |editor3=Bruce Porter |title=Handbook of knowledge representation|year=2008|publisher=Elsevier|isbn=978-0-444-52211-5|pages=89–134|author1=Carla P. Gomes|author1-link=Carla Gomes |author2=Henry Kautz |author3=Ashish Sabharwal |author4=Bart Selman |chapter=Satisfiability Solvers|doi=10.1016/S1574-6526(07)03002-7|series=Foundations of Artificial Intelligence|volume=3}}
* {{Cite journal | last1 = Vizel | first1 = Y. | last2 = Weissenbacher | first2 = G. | last3 = Malik | first3 = S. | journal = Proceedings of the IEEE | volume = 103 | issue = 11 | year = 2015 | doi = 10.1109/JPROC.2015.2455034|title=Boolean Satisfiability Solvers and Their Applications in Model Checking}}
{{refend}}

==External links==
{{commons category}}
[http://www.cril.univ-artois.fr/~roussel/satgame/satgame.php?lang=eng SAT Game] - try solving a Boolean satisfiability problem yourself

===SAT problem format===
A SAT problem is often described in the [http://www.domagoj-babic.com/uploads/ResearchProjects/Spear/dimacs-cnf.pdf DIMACS-CNF] format: an input file in which each line represents a single disjunction. For example, a file with the two lines
 1 -5 4 0
 -1 5 3 4 0
represents the formula &quot;(''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ¬''x''&lt;sub&gt;5&lt;/sub&gt; ∨ ''x''&lt;sub&gt;4&lt;/sub&gt;) ∧ (¬''x''&lt;sub&gt;1&lt;/sub&gt; ∨ ''x''&lt;sub&gt;5&lt;/sub&gt; ∨ ''x''&lt;sub&gt;3&lt;/sub&gt; ∨ ''x''&lt;sub&gt;4&lt;/sub&gt;)&quot;.

Another common format for this formula is the 7-bit [[ASCII]] representation &quot;(x1 | ~x5 | x4) &amp; (~x1 | x5 | x3 | x4)&quot;.
* [http://users.ics.aalto.fi/tjunttil/bcsat/ BCSAT] is a tool that converts input files in human-readable format to the DIMACS-CNF format.

===Online SAT solvers===
* BoolSAT – Solves formulas in the DIMACS-CNF format or in a more human-friendly format: &quot;a and not b or a&quot;. Runs on a server.
* [http://logictools.org Logictools] – Provides different solvers in javascript for learning, comparison and hacking. Runs in the browser.
* [http://www.msoos.org/2013/09/minisat-in-your-browser/ minisat-in-your-browser] – Solves formulas in the DIMACS-CNF format. Runs in the browser.
* [http://satrennespa.irisa.fr/ SATRennesPA] – Solves formulas written in a user-friendly way. Runs on a server.
* [http://somerby.net/mack/logic somerby.net/mack/logic] – Solves formulas written in symbolic logic. Runs in the browser.

===Offline SAT solvers===
* [http://minisat.se/ MiniSAT] – DIMACS-CNF format and OPB format for its companion Pseudo-Boolean constraint solver MiniSat+
* [http://fmv.jku.at/lingeling/ Lingeling] – won a gold medal in a 2011 SAT competition.
** [http://fmv.jku.at/picosat/ PicoSAT] – an earlier solver from the Lingeling group.
* [http://www.sat4j.org/ Sat4j] – DIMACS-CNF format. Java source code available.
* [http://www.labri.fr/~lsimon/glucose Glucose] – DIMACS-CNF format.
* [http://reasoning.cs.ucla.edu/rsat/home.html RSat] – won a gold medal in a 2007 SAT competition.
* [http://ubcsat.dtompkins.com/ UBCSAT]. Supports unweighted and weighted clauses, both in the DIMACS-CNF format. C source code hosted on [https://github.com/dtompkins/ubcsat GitHub].
* [https://web.archive.org/web/20120115195721/http://www.msoos.org/cryptominisat2 CryptoMiniSat] – won a gold medal in a 2011 SAT competition. C++ source code hosted on [https://github.com/msoos/cryptominisat GitHub]. Tries to put many useful features of MiniSat 2.0 core, PrecoSat ver 236, and Glucose into one package, adding many new features
* [http://www.domagoj-babic.com/index.php/ResearchProjects/Spear Spear] – Supports bit-vector arithmetic. Can use the DIMACS-CNF format or the [http://www.domagoj-babic.com/uploads/ResearchProjects/Spear/spear-format.pdf Spear format].
** [http://www.domagoj-babic.com/index.php/ResearchProjects/HyperSAT HyperSAT] – Written to experiment with B-cubing search space pruning. Won 3rd place in a 2005 SAT competition. An earlier and slower solver from the developers of Spear.
* [http://logic.pdmi.ras.ru/~basolver/ BASolver]
* [http://argo.matf.bg.ac.rs/?content=downloads ArgoSAT]
* [http://dudka.cz/fss Fast SAT Solver] – based on [[genetic algorithm]]s.
* [http://www.princeton.edu/~chaff/zchaff.html zChaff] – not supported anymore.
* [http://users.ics.aalto.fi/tjunttil/bcsat/ BCSAT] – human-readable boolean circuit format (also converts this format to the DIMACS-CNF format and automatically links to MiniSAT or zChaff).
* [https://github.com/IRIFrance/gini gini] – Go language SAT solver with related tools.
* [https://github.com/crillab/gophersat gophersat] – Go language SAT solver that can also deal with pseudo-boolean and MAXSAT problems.
* CLP(B) – Boolean Constraint Logic Programming, for example [[SWI-Prolog#Constraint Logic Programming Libraries (CLP)|SWI-Prolog]].

===SAT applications===
* [http://www.mqasem.net/sat/winsat/ WinSAT v2.04]: A Windows-based SAT application made particularly for researchers.

===Conferences===
* [http://www.satisfiability.org/ International Conference on Theory and Applications of Satisfiability Testing]

===Publications===
* [https://web.archive.org/web/20060219180520/http://jsat.ewi.tudelft.nl/ Journal on Satisfiability, Boolean Modeling and Computation]
* [https://web.archive.org/web/20060210192113/http://www.ictp.trieste.it/~zecchina/SP/ Survey Propagation]

===Benchmarks===
* [http://www.nlsde.buaa.edu.cn/~kexu/benchmarks/benchmarks.htm Forced Satisfiable SAT Benchmarks]
* [http://www.cs.ubc.ca/~babic/index_benchmarks.htm Software Verification Benchmarks]
* [http://www.aloul.net/benchmarks.html Fadi Aloul SAT Benchmarks]
SAT solving in general:
* http://www.satlive.org
* http://www.satisfiability.org

===Evaluation of SAT solvers===
* [http://www.maxsat.udl.cat/ Yearly evaluation of SAT solvers]
* [http://www.maxsat.udl.cat/08/ms08.pdf SAT solvers evaluation results for 2008]
* [http://www.satcompetition.org International SAT Competitions]
* [http://www.satcompetition.org/2002/onlinereport/node2.html History]

More information on SAT:
* [http://www.mqasem.net/sat/sat SAT and MAX-SAT for the Lay-researcher]
* [https://yurichev.com/writings/SAT_SMT_by_example.pdf SAT/SMT by Example]
----

''This article includes material from a column in the ACM [http://www.sigda.org SIGDA] [https://web.archive.org/web/20070208034716/http://www.sigda.org/newsletter/index.html e-newsletter] by [http://www.eecs.umich.edu/~karem Prof. Karem Sakallah] &lt;br /&gt;
Original text is available [https://web.archive.org/web/20070708233347/http://www.sigda.org/newsletter/2006/eNews_061201.html here]''

{{Logic}}

{{DEFAULTSORT:Boolean Satisfiability Problem}}
[[Category:Boolean algebra]]
[[Category:Electronic design automation]]
[[Category:Formal methods]]
[[Category:Logic in computer science]]
[[Category:NP-complete problems]]
[[Category:Satisfiability problems]]</text>
      <sha1>9ue9uc3r5q30vdrl8axxzitvlh7njn1</sha1>
    </revision>
  </page>
