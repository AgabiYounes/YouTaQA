  <page>
    <title>Decision problem</title>
    <ns>0</ns>
    <id>8336</id>
    <revision>
      <id>873678788</id>
      <parentid>870574261</parentid>
      <timestamp>2018-12-14T12:44:54Z</timestamp>
      <contributor>
        <username>Balon Greyjoy</username>
        <id>20164867</id>
      </contributor>
      <minor />
      <comment>v2.0 - [[WP:WCW]] project (Reference list missing)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{about|decision problems in complexity theory|the decision problem in formal logic|Entscheidungsproblem|analysis of the process of making choices|Decision theory}}
[[Image:Decision Problem.svg|thumb|200px|A ''decision problem'' has only two possible outputs (''yes'' or ''no'') on any input.]]
In [[computability theory]] and [[computational complexity theory]], a '''decision problem''' is a problem that can be posed as a [[yes-no question]] of the input values. An example of a decision problem is deciding whether a given natural number is [[prime]]. Another is the problem &quot;given two numbers ''x'' and ''y'', does ''x'' evenly divide ''y''?&quot;.  The answer is either 'yes' or 'no' depending upon the values of ''x'' and ''y''. A method for solving a decision problem, given in the form of an [[algorithm]], is called a '''decision procedure''' for that problem. A decision procedure for the decision problem &quot;given two numbers ''x'' and ''y'', does ''x'' evenly divide ''y''?&quot; would give the steps for determining whether ''x'' evenly divides ''y''. One such algorithm is [[long division]]. If the remainder is zero the answer is 'yes', otherwise it is 'no'. A decision problem which can be solved by an algorithm is called ''decidable''.

Decision problems typically appear in mathematical questions of [[decidability (logic)|decidability]], that is, the question of the existence of an [[effective method]] to determine the existence of some object or its membership in a set; some of the most important problems in mathematics are [[undecidable problem|undecidable]].

The field of computational complexity categorizes ''decidable'' decision problems by how difficult they are to solve. &quot;Difficult&quot;, in this sense, is described in terms of the [[computational resource]]s needed by the most efficient algorithm for a certain problem. The field of [[recursion theory]], meanwhile, categorizes ''undecidable'' decision problems by [[Turing degree]], which is a measure of the noncomputability inherent in any solution.

==Definition==
A ''decision problem'' is a yes-or-no question on an [[infinite set]] of inputs. It is traditional to define the decision problem as the set of possible inputs together with the set of inputs for which the answer is ''yes''.&lt;ref&gt;{{cite web|url=https://www.cs.stanford.edu/~trevisan/cs254-10/lecture02.pdf|title=CS254: Computational Complexity: Lecture 2}}&lt;/ref&gt;

These inputs can be natural numbers, but can also be values of some other kind, like binary [[string (computer science)|string]]s or strings over some other [[Alphabet (computer science)|alphabet]]. The subset of strings for which the problem returns &quot;yes&quot; is a [[formal language]], and often decision problems are defined as formal languages.

Using an encoding such as [[GÃ¶del numbering]]s, any string can be encoded as a natural number, via which a decision problem can be defined as a subset of the natural numbers.

==Examples==
A classic example of a decidable decision problem is the set of prime numbers. It is possible to effectively decide whether a given natural number is prime by testing every possible nontrivial factor. Although much more efficient methods of [[primality testing]] are known, the existence of any effective method is enough to establish decidability.

== Decidability ==

{{main|Undecidable problem|Decidability (logic)}}

A decision problem ''A'' is ''decidable'' or ''effectively solvable'' if ''A'' is a [[recursive set]].  A problem is ''partially decidable'', ''semidecidable'', ''solvable'', or ''provable'' if ''A'' is a [[recursively enumerable set]].  Problems that are not decidable are ''undecidable''. For those it is not possible to create an algorithm, efficient or otherwise, that solves them.

The [[halting problem]] is an important undecidable decision problem; for more examples, see [[list of undecidable problems]].

== Complete problems ==

{{main|Complete problem}}

Decision problems can be ordered according to [[many-one reduction|many-one reducibility]] and related to feasible reductions such as [[polynomial-time reduction]]s. A decision problem ''P'' is said to be ''[[complete problem|complete]]'' for a set of decision problems ''S'' if ''P'' is a member of ''S'' and every problem in ''S'' can be reduced to ''P''. Complete decision problems are used in [[computational complexity theory]] to characterize [[complexity class]]es of decision problems. For example, the [[Boolean satisfiability problem]] is complete for the class [[NP (complexity)|NP]] of decision problems under polynomial-time reducibility.

==Function problems==
{{main|function problem}}

Decision problems are closely related to [[function problem]]s, which can have answers that are more complex than a simple 'yes' or 'no'.  A corresponding function problem is &quot;given two numbers ''x'' and ''y'', what is ''x'' divided by ''y''?&quot;.

A [[function problem]] consists of a [[partial function]] ''f''; the informal &quot;problem&quot; is to compute the values of ''f'' on the inputs for which it is defined.

Every function problem can be turned into a decision problem; the decision problem is just the graph of the associated function.   (The graph of a function ''f'' is the set of pairs (''x'',''y'') such that ''f''(''x'') = ''y''.)  If this decision problem were effectively solvable then the function problem would be as well.  This reduction does not respect computational complexity, however.  For example, it is possible for the graph of a function to be decidable in polynomial time (in which case running time is computed as a function of the pair (''x'',''y'') ) when the function is not computable in [[polynomial time]] (in which case running time is computed as a function of ''x'' alone).  The function ''f''(''x'') = ''2''&lt;sup&gt;''x''&lt;/sup&gt; has this property.

Every decision problem can be converted into the function problem of computing the [[indicator function|characteristic function]] of the set associated to the decision problem.   If this function is computable then the associated decision problem is decidable. However, this reduction is more liberal than the standard reduction used in computational complexity (sometimes called polynomial-time many-one reduction); for example, the complexity of the characteristic functions of an [[NP-complete]] problem and its [[co-NP-complete]] [[Complement (complexity)|complement]] is exactly the same even though the underlying decision problems may not be considered equivalent in some typical models of computation.

==Optimization problems==
{{main|Optimization problem}}

Unlike decision problems, for which there is only one correct answer for each input, optimization problems are concerned with finding the ''best'' answer to a particular input.  Optimization problems arise naturally in many applications, such as the [[traveling salesman problem]] and many questions in [[linear programming]].

There are standard techniques for transforming function and optimization problems into decision problems. For example, in the traveling salesman problem, the optimization problem is to produce a tour with minimal weight. The associated decision problem is: for each ''N'', to decide whether the graph has any tour with weight less than ''N''.  By repeatedly answering the decision problem, it is possible to find the minimal weight of a tour.

Because the theory of decision problems is very well developed, research in complexity theory has typically focused on decision problems. Optimization problems themselves are still of interest in computability theory, as well as in fields such as [[operations research]].

== See also ==
* [[ALL (complexity)]]
* [[Computational problem]]
* [[Decidability (logic)]] &amp;ndash; for the problem of deciding whether a formula is a consequence of a [[logical theory]].
* [[Search problem]]
* [[Counting problem (complexity)]]
* [[Word problem (mathematics)]]

== References ==
* Kozen, D.C. (2012), ''[https://books.google.com/books?id=Vo3fBwAAQBAJ&amp;printsec=frontcover#v=onepage&amp;q=%22decision%20problem%22&amp;f=false Automata and Computability]'', Springer.
* [[Hartley Rogers, Jr]]., ''The Theory of Recursive Functions and Effective Computability'', MIT Press, {{ISBN|0-262-68052-1}} (paperback), {{ISBN|0-07-053522-1}}
* [[Michael Sipser|Sipser, M.]] (1996), ''Introduction to the Theory of Computation'', PWS Publishing Co.
* Robert I. Soare (1987), ''Recursively Enumerable Sets and Degrees'', Springer-Verlag, {{ISBN|0-387-15299-7}}
* [[Daniel Kroening]] &amp; Ofer Strichman, ''Decision procedures'', Springer, {{ISBN|978-3-540-74104-6}}
* Aaron Bradley &amp; [[Zohar Manna]], ''The calculus of computation'', Springer, {{ISBN|978-3-540-74112-1}}
{{reflist}}

{{Authority control}}

[[Category:Computational problems]]
[[Category:Computability theory]]

[[de:Entscheidungsproblem]]</text>
      <sha1>nmkszeu71rt6k5zfo5g295am58ow6ws</sha1>
    </revision>
  </page>
