  <page>
    <title>Design pattern</title>
    <ns>0</ns>
    <id>8745</id>
    <revision>
      <id>933523244</id>
      <parentid>933511171</parentid>
      <timestamp>2020-01-01T14:31:08Z</timestamp>
      <contributor>
        <username>Biogeographist</username>
        <id>18201938</id>
      </contributor>
      <comment>Undid revision 933511171 by [[Special:Contributions/2A02:C7F:BE37:3600:64C8:45E0:C134:9FCB|2A02:C7F:BE37:3600:64C8:45E0:C134:9FCB]] ([[User talk:2A02:C7F:BE37:3600:64C8:45E0:C134:9FCB|talk]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{Redirect|Design patterns|the book|Design Patterns}}

A '''design pattern''' is the re-usable form of a solution to a design problem. The idea was introduced by the architect [[Christopher Alexander]]&lt;ref name=&quot;Alexander, A Pattern Language&quot; &gt;[[#Alexander, A Pattern Language|Alexander, A Pattern Language]]&lt;/ref&gt; and has been adapted for various other disciplines, notably [[software engineering]].&lt;ref name=&quot;Gang of Four&quot; &gt;[[#Gang of Four|Gamma ''et al.'']], 1994, Design Patterns (the &quot;[[Design Patterns (book)|Gang of Four]]&quot; book)&lt;/ref&gt;

== Details ==

An organized collection of design patterns that relate to a particular field is called a [[pattern language]]. This language gives a common terminology for discussing the situations designers are faced with.

{{quote|The elements of this language are entities called patterns. Each pattern describes a problem that occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice.  — Christopher Alexander&lt;ref name=&quot;Alexander, A Pattern Language&quot;/&gt;}}

Documenting a pattern requires explaining why a particular situation causes problems, and how the components of the pattern relate to each other to give the solution.&lt;ref&gt;{{cite web | accessdate = 2011-03-21 | author = James Maioriello | date = 2002-10-02 | title = What Are Design Patterns and Do I Need Them? | url = http://www.developer.com/design/article.php/1474561/What-Are-Design-Patterns-and-Do-I-Need-Them.htm}}&lt;/ref&gt; [[Christopher Alexander]] describes common design problems as arising from &quot;conflicting forces&quot; — such as the conflict between wanting a room to be sunny and wanting it not to overheat on summer afternoons. A pattern would not tell the designer how many windows to put in the room; instead, it would propose a set of values to guide the designer toward a decision that is best for their particular application. Alexander, for example, suggests that enough windows should be included to direct light all around the room. He considers this a good solution because he believes it increases the enjoyment of the room by its occupants. Other authors might come to different conclusions, if they place higher value on heating costs, or material costs. These values, used by the pattern's author to determine which solution is &quot;best&quot;, must also be documented within the pattern.

Pattern documentation should also explain when it is applicable. Since two houses may be very different from one another, a design pattern for houses must be broad enough to apply to both of them, but not so vague that it doesn't help the designer make decisions. The range of situations in which a pattern can be used is called its context. Some examples might be &quot;all houses&quot;, &quot;all two-story houses&quot;, or &quot;all places where people spend time&quot;.

For instance, in Christopher Alexander's work, bus stops and waiting rooms in a surgery center are both within the context for the pattern &quot;A PLACE TO WAIT&quot;.

== Examples ==

* [[Software design pattern]], in software design
* [[Architectural pattern]], for software architecture
* [[Interaction design pattern]], used in interaction design / human-computer interaction
* [[Pedagogical patterns]], in teaching
* [[Pattern gardening]], in gardening

Business models also have design patterns.&lt;ref&gt;{{cite article |vauthors=Mettler T, Eurich M |title=A &quot;design-pattern&quot;-based approach for analyzing e-health business models |journal=Health Policy &amp; Technology |volume=1 |issue=2 |pages=77–85 |year=2012 |doi=10.1016/j.hlpt.2012.04.005 }}&lt;/ref&gt;&lt;ref&gt;{{cite conference |vauthors=Sprenger M, Mettler T |title=On the Utility of E-Health Business Model Design Patterns |conference=European Conference on Information Systems |year=2016 |url=https://www.alexandria.unisg.ch/248256/ }}&lt;/ref&gt;

== See also ==
* [[Style guide]]
* [[Design paradigm]]
* [[Anti-pattern]]

== References ==
{{reflist}}

== Further reading ==
* {{cite book
  |first=Christopher  |last=Alexander
  |authorlink=Christopher Alexander
  |title=[[A Pattern Language|A Pattern Language: Towns, Buildings, Construction]]
  |publisher=[[Oxford University Press]]
  |year=1977
  |isbn=0-19-501919-9
  |ref=Alexander, A Pattern Language
}}
* {{cite book |author= [[Thomas Erl|Erl, Thomas]] |title=SOA Design Patterns |publisher=Prentice Hall/PearsonPTR |location=New York |year=2009 |pages=864 |isbn=0-13-613516-1 |oclc= |doi=}}
* Frank Buschmann, [[Kevlin Henney]], [[Douglas C. Schmidt]] [http://media.wiley.com/product_data/excerpt/28/04700590/0470059028.pdf &quot;On Patterns and Pattern Languages&quot;]
* {{cite book
  |title=[[Design Patterns (book)|Design Patterns: Elements of Reusable Object-Oriented Software]]
|first=Erich |last=Gamma
|first2=Richard |last2=Helm
|first3=Ralph |last3=Johnson
|first4=John |last4=Vlissides
  |publisher=Addison-Wesley
  |year=1994
  |isbn=0-201-63361-2
  |ref=Gang of Four
}} (Note: there is debate about whether the &quot;Gang of Four&quot; book actually contains any patterns in the Alexandrian's sense.)
* {{cite web
| accessdate = 2014-07-16
| author = James Coplien
| date = 2014-07-11
| title = Patterns: The Notion is Grounded in Alexander's Work
| quote = The GoF claims to take its pattern inspiration from Christopher Alexander (as they say in the front matter of the book), who popularized the term in the broader field of design. To Alexander a pattern: is always an element of pattern language; contributes to deep human feeling; and is always geometric in nature. At least some of the GoF patterns fail on at least one of these points, and several fail on all three. 
| url = https://stackoverflow.com/questions/12981021/are-there-any-patterns-in-gof/24664544#24664544}}
* Jenifer Tidwell. ''Designing Interfaces''
* [[Wolfgang Pree]]. ''Design Patterns for Object-Oriented Software Development''
* Leitner, Helmut (2015). ''Pattern Theory: Introduction and Perspectives on the Tracks of Christopher Alexander'', {{ISBN|1505637430}}.

== External links ==
* Examples of [http://www.designpattern.co.il Design Patterns] in java
* [http://javadesign-patterns.blogspot.com/ Java Design Patterns] Full Tutorial
* [http://codingplayground.blogspot.it/2009/01/design-patterns-c-full-collection-of.html Full collection of design patterns (Creational, Structural, Behavioural) in C++] by Antonio Gulli
* [https://tcorral.github.io/Design-Patterns-in-Javascript/ Design Patterns in Javascript] by Tomás Corral

{{Design}}

[[Category:Design patterns]]

[[ja:デザインパターン]]
[[pl:Wzorzec projektowy]]
[[tr:Tasarım örüntüsü]]
[[vi:Mẫu thiết kế]]
[[zh:设计模式]]</text>
      <sha1>3e24z4fvo8jvdk0ato13mggdqlasyfw</sha1>
    </revision>
  </page>
