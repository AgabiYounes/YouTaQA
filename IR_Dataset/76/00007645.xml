  <page>
    <title>Cyclone (programming language)</title>
    <ns>0</ns>
    <id>7645</id>
    <revision>
      <id>881762078</id>
      <parentid>881571083</parentid>
      <timestamp>2019-02-04T17:24:24Z</timestamp>
      <contributor>
        <username>AtlasDuane</username>
        <id>28310003</id>
      </contributor>
      <minor />
      <comment>Moved tag to the top of the page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{no footnotes|date=August 2015}}{{Infobox programming language
 | name                   = Cyclone
 | logo                   =
 | caption                =
 | file ext               =
 | paradigm               =
 | released               = {{start date|2002}}
 | designer               = AT&amp;T Labs
 | developer              =
 | latest release version = 1.0
 | latest release date    = {{start date and age|2006|05|08}}
 | latest preview version =
 | latest preview date    = &lt;!-- {{start date and age|YYYY|MM|DD}} --&gt;
 | typing                 =
 | implementations        =
 | dialects               =
 | influenced by          = [[C (programming language)|C]]
 | influenced             = [[Rust (programming language)|Rust]]
 | programming language   =
 | operating system       =
 | license                =
 | website                = {{URL|http://cyclone.thelanguage.org}}
 | wikibooks              =
 | discontinued           = yes
}}
The '''Cyclone''' [[programming language]] is intended to be a safe dialect of the [[C (programming language)|C language]]. Cyclone is designed to avoid [[buffer overflow]]s and other vulnerabilities that are possible in C programs, without losing the power and convenience of C as a tool for [[system programming]].

Cyclone development was started as a joint project of AT&amp;T Labs Research and [[Greg Morrisett]]'s group at Cornell in 2001. Version 1.0 was released on May 8, 2006.

==Language features==
Cyclone attempts to avoid some of the common pitfalls of [[C (programming language)|C]], while still maintaining its look and performance. To this end, Cyclone places the following limits on programs:
* &lt;code&gt;[[Null pointer|NULL]]&lt;/code&gt; checks are inserted to prevent [[segmentation fault]]s
* [[Pointer arithmetic]] is limited
* Pointers must be initialized before use (this is enforced by [[definite assignment analysis]])
* [[Dangling pointer]]s are prevented through region analysis and limits on [[Malloc|&lt;code&gt;free()&lt;/code&gt;]]
* Only &quot;safe&quot; casts and unions are allowed
* [[Control flow|&lt;code&gt;goto&lt;/code&gt;]] into scopes is disallowed
* [[Control flow|&lt;code&gt;switch&lt;/code&gt;]] labels in different scopes are disallowed
* Pointer-returning functions must execute &lt;code&gt;return&lt;/code&gt;
* [[Setjmp/longjmp|&lt;code&gt;setjmp&lt;/code&gt;]] and [[Setjmp/longjmp|&lt;code&gt;longjmp&lt;/code&gt;]] are not supported

To maintain the tool set that C programmers are used to, Cyclone provides the following extensions:
* Never-&lt;code&gt;NULL&lt;/code&gt; pointers do not require &lt;code&gt;NULL&lt;/code&gt; checks
* &quot;Fat&quot; pointers support pointer arithmetic with run-time [[bounds checking]]
* Growable regions support a form of safe manual memory management
* [[Garbage collection (computer science)|Garbage collection]] for heap-allocated values
* [[Tagged union]]s support type-varying arguments
* Injections help automate the use of tagged unions for programmers
* [[Polymorphism (computer science)|Polymorphism]] replaces some uses of [[void pointer|&lt;code&gt;void *&lt;/code&gt;]]
* varargs are implemented as fat pointers
* [[Exception handling|Exceptions]] replace some uses of &lt;code&gt;setjmp&lt;/code&gt; and &lt;code&gt;longjmp&lt;/code&gt;

For a better high-level introduction to Cyclone, the reasoning behind Cyclone and the source of these lists, see [http://www.cs.umd.edu/projects/cyclone/papers/cyclone-safety.pdf this paper].

Cyclone looks, in general, much like [[C (programming language)|C]], but it should be viewed as a C-like language.

===Pointer types===
Cyclone implements three kinds of [[pointer (computer science)|pointer]]:
* &lt;code&gt;*&lt;/code&gt; (the normal type)
* &lt;code&gt;@&lt;/code&gt; (the never-&lt;code&gt;NULL&lt;/code&gt; pointer), and
* &lt;code&gt;?&lt;/code&gt; (the only type with [[pointer arithmetic]] allowed, [[fat pointer|&quot;fat&quot; pointer]]s).
The purpose of introducing these new pointer types is to avoid common problems when using pointers. Take for instance a function, called &lt;code&gt;foo&lt;/code&gt; that takes a pointer to an int:
&lt;source lang=&quot;C&quot;&gt;
 int foo(int *);
&lt;/source&gt;
Although the person who wrote the function &lt;code&gt;foo&lt;/code&gt; could have inserted &lt;code&gt;NULL&lt;/code&gt; checks, let us assume that for performance reasons they did not. Calling &lt;code&gt;foo(NULL);&lt;/code&gt; will result in [[undefined behavior]] (typically, although not necessarily, a [[SIGSEGV]] [[Unix signal|signal]] being sent to the application). To avoid such problems, Cyclone introduces the &lt;code&gt;@&lt;/code&gt; pointer type, which can never be &lt;code&gt;NULL&lt;/code&gt;. Thus, the &quot;safe&quot; version of &lt;code&gt;foo&lt;/code&gt; would be:
&lt;source lang=&quot;C&quot;&gt;
 int foo(int @);
&lt;/source&gt;
This tells the Cyclone compiler that the argument to &lt;code&gt;foo&lt;/code&gt; should never be &lt;code&gt;NULL&lt;/code&gt;, avoiding the aforementioned undefined behavior. The simple change of &lt;code&gt;*&lt;/code&gt; to &lt;code&gt;@&lt;/code&gt; saves the programmer from having to write &lt;code&gt;NULL&lt;/code&gt; checks and the operating system from having to trap &lt;code&gt;NULL&lt;/code&gt; pointer dereferences.  This extra limit, however, can be a rather large stumbling block for most C programmers, who are used to being able to manipulate their pointers directly with arithmetic. Although this is desirable, it can lead to [[buffer overflow]]s and other &quot;off-by-one&quot;-style mistakes. To avoid this, the &lt;code&gt;?&lt;/code&gt; pointer type is delimited by a known bound, the size of the array. Although this adds overhead due to the extra information stored about the pointer, it improves safety and security. Take for instance a simple (and na√Øve) &lt;code&gt;strlen&lt;/code&gt; function, written in C:
&lt;source lang=&quot;C&quot;&gt;
 int strlen(const char *s)
 {
     int iter = 0;
     if (s == NULL)
        return 0;
     while (s[iter] != '\0') {
        iter++;
     }
     return iter;
 }
&lt;/source&gt;
This function assumes that the string being passed in is terminated by NULL (&lt;code&gt;'\0'&lt;/code&gt;). However, what would happen if &lt;code&gt;char&amp;nbsp;buf[6]&amp;nbsp;=&amp;nbsp;{'h','e','l','l','o','!'};&lt;/code&gt; were passed to this string? This is perfectly legal in C, yet would cause &lt;code&gt;strlen&lt;/code&gt; to iterate through memory not necessarily associated with the string &lt;code&gt;s&lt;/code&gt;. There are functions, such as &lt;code&gt;strnlen&lt;/code&gt; which can be used to avoid such problems, but these functions are not standard with every implementation of [[ANSI C]]. The Cyclone version of &lt;code&gt;strlen&lt;/code&gt; is not so different from the C version:
&lt;source lang=&quot;C&quot;&gt;
 int strlen(const char ? s)
 {
    int iter, n = s.size;
    if (s == NULL)
       return 0;
    for (iter = 0; iter &lt; n; iter++, s++) {
       if (*s == '\0')
          return iter;
    }
    return n;
 }
&lt;/source&gt;
Here, &lt;code&gt;strlen&lt;/code&gt; bounds itself by the length of the array passed to it, thus not going over the actual length. Each of the kinds of pointer type can be safely cast to each of the others, and arrays and strings are automatically cast to &lt;code&gt;?&lt;/code&gt; by the compiler. (Casting from &lt;code&gt;?&lt;/code&gt; to &lt;code&gt;*&lt;/code&gt; invokes a [[bounds checking|bounds check]], and casting from &lt;code&gt;?&lt;/code&gt; to &lt;code&gt;@&lt;/code&gt; invokes both a &lt;code&gt;NULL&lt;/code&gt; check and a bounds check. Casting from &lt;code&gt;*&lt;/code&gt; to &lt;code&gt;?&lt;/code&gt; results in no checks whatsoever; the resulting &lt;code&gt;?&lt;/code&gt; pointer has a size of 1.)

===Dangling pointers and region analysis===
Consider the following code, in C:
&lt;source lang=&quot;C&quot;&gt;
 char *itoa(int i)
 {
    char buf[20];
    sprintf(buf,&quot;%d&quot;,i);
    return buf;
 }
&lt;/source&gt;
Function &lt;code&gt;itoa&lt;/code&gt; allocates an array of chars &lt;code&gt;buf&lt;/code&gt; on the stack and returns a pointer to the start of &lt;code&gt;buf&lt;/code&gt;. However the memory used on the stack for &lt;code&gt;buf&lt;/code&gt; is deallocated when the function returns, so the returned value cannot be used safely outside of the function. While [[GNU Compiler Collection|gcc]] and other compilers will warn about such code, the following will typically compile without warnings:
&lt;source lang=&quot;C&quot;&gt;
 char *itoa(int i)
 {
    char buf[20], *z;
    sprintf(buf,&quot;%d&quot;,i);
    z = buf;
    return z;
 }
&lt;/source&gt;
[[GNU Compiler Collection|gcc]] can produce warnings for such code as a side-effect of option -O2 or -O3, but there are no guarantees that all such errors will be detected.
Cyclone does regional analysis of each segment of code, preventing dangling pointers, such as the one returned from this version of &lt;code&gt;itoa&lt;/code&gt;. All of the local variables in a given scope are considered to be part of the same region, separate from the heap or any other local region. Thus, when analyzing &lt;code&gt;itoa&lt;/code&gt;, the Cyclone compiler would see that &lt;code&gt;z&lt;/code&gt; is a pointer into the local stack, and would report an error.

==See also==
* [[C (programming language)|C]]
* [[ML (programming language)|ML]]
* [[Rust (programming language)|Rust]]

==References==

* [http://cyclone.thelanguage.org/wiki/User%20Manual Cyclone User Manual]
* [http://www.cs.umd.edu/~mwh/papers/cyclone-cuj.pdf Cyclone: a Type-safe Dialect of C] by Dan Grossman, Michael Hicks, Trevor Jim, and Greg Morrisett - published January 2005

==External links==
* [http://cyclone.thelanguage.org/ Cyclone Homepage]
* [https://web.archive.org/web/20111227232825/http://www.eecs.harvard.edu/~greg/cyclone/old_cyclone.html Old web site] since official web site is not available.
* [http://cyclone.thelanguage.org/wiki/Download Cyclone - Source code repositories]
* [http://cyclone.thelanguage.org/wiki/Frequently%20Asked%20Questions Cyclone - FAQ]
* [http://cyclone.thelanguage.org/wiki/Cyclone%20for%20C%20Programmers Cyclone for C programmers]

Presentations:
* [https://web.archive.org/web/20110607170455/http://www.cs.kent.ac.uk/people/staff/rej/morrisett-4.2.03.ppt Cyclone:  A Type-Safe Dialect of C]
* [http://www.cs.washington.edu/homes/djg/slides/grossman_cyclone_jpl_05.ppt Cyclone: A Memory-Safe C-Level Programming Language]

{{CProLang}}

{{DEFAULTSORT:Cyclone (Programming Language)}}
[[Category:C programming language family]]</text>
      <sha1>jxqqx95vzpyq1ljj5xe8v4y6so5ku1d</sha1>
    </revision>
  </page>
