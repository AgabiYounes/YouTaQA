  <page>
    <title>Checksum</title>
    <ns>0</ns>
    <id>7538</id>
    <revision>
      <id>934596414</id>
      <parentid>934595918</parentid>
      <timestamp>2020-01-07T12:09:37Z</timestamp>
      <contributor>
        <username>Feline Hymnic</username>
        <id>5609659</id>
      </contributor>
      <comment>/* Algorithms */ Add section anchor for forthcoming redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{short description|A small-size datum computed from digital data for detecting transmission errors}}
{{Multiple issues|
{{More citations needed|date=August 2012}}
{{one source|date=October 2018}}
}}

[[File:Checksum.svg|thumb|330px|right|Effect of a typical checksum function (the Unix &lt;tt&gt;[[cksum]]&lt;/tt&gt; utility)]]

A '''checksum''' is a small-sized [[datum]] derived from a block of [[digital data]] for the purpose of [[error detection|detecting errors]] that may have been introduced during its [[telecommunication|transmission]] or [[computer storage|storage]].  By themselves, checksums are often used to verify data integrity but are not relied upon to verify data [[authentication|authenticity]].

The [[algorithm|procedure]] which generates this checksum is called a '''checksum function''' or '''[[checksum algorithm]]'''. Depending on its design goals, a good checksum algorithm will usually output a significantly different value, even for small changes made to the input. This is especially true of [[cryptographic hash function]]s, which may be used to detect many data corruption errors and verify overall [[data integrity]]; if the computed checksum for the current data input matches the stored value of a previously computed checksum, there is a very high probability the data has not been accidentally altered or corrupted.

Checksum functions are related to [[hash function]]s, [[fingerprint (computing)|fingerprint]]s, [[randomization function]]s, and [[cryptographic hash function]]s.  However, each of those concepts has different applications and therefore different design goals. For instance, a function returning the start of a string can provide a hash appropriate for some applications but will never be a suitable checksum. Checksums are used as [[cryptographic primitive]]s in larger authentication algorithms. For cryptographic systems with these two specific design goals, see [[Hash-based message authentication code|HMAC]].

[[Check digit]]s and [[parity bit]]s are special cases of checksums, appropriate for small blocks of data (such as [[Social Security number]]s, [[bank account]] numbers, [[Word (data type)|computer word]]s, single [[byte]]s, etc.).  Some [[error-correcting code]]s are based on special checksums which not only detect common errors but also allow the original data to be recovered in certain cases.

==Algorithms==
===Parity byte or parity word===
The simplest checksum algorithm is the so-called [[longitudinal redundancy check|longitudinal parity check]], which breaks the data into &quot;words&quot; with a fixed number ''n'' of bits, and then computes the [[exclusive or]] (XOR) of all those words.  The result is appended to the message as an extra word. To check the integrity of a message, the receiver computes the exclusive or of all its words, including the checksum; if the result is not a word consisting of ''n'' zeros, the receiver knows a transmission error occurred.

With this checksum, any transmission error which flips a single bit of the message, or an odd number of bits, will be detected as an incorrect checksum.  However, an error which affects two bits will not be detected if those bits lie at the same position in two distinct words.  Also swapping of two or more words will not be detected. If the affected bits are independently chosen at random, the probability of a two-bit error being undetected is 1/''n''.

===Sum complement===

A variant of the previous algorithm is to add all the &quot;words&quot; as unsigned binary numbers, discarding any overflow bits, and append the [[two's complement]] of the total as the checksum.  To validate a message, the receiver adds all the words in the same manner, including the checksum; if the result is not a word full of zeros, an error must have occurred.  This variant too detects any single-bit error, but the promodular sum is used in [[J1708|SAE J1708]].&lt;ref&gt;{{cite web|url=http://www.kvaser.com/zh/about-can/related-protocols-and-standards/50.html |title=SAE J1708 |publisher=Kvaser.com |archiveurl=https://web.archive.org/web/20131211152639/http://www.kvaser.com/zh/about-can/related-protocols-and-standards/50.html |archivedate={{date|2013-12-11}} }}&lt;/ref&gt;

===Position-dependent===

The simple checksums described above fail to detect some common errors which affect many bits at once, such as changing the order of data words, or inserting or deleting words with all bits set to zero.  The checksum algorithms most used in practice, such as [[Fletcher's checksum]], [[Adler-32]], and [[cyclic redundancy check]]s (CRCs), address these weaknesses by considering not only the value of each word but also its position in the sequence. This feature generally increases the [[Analysis of algorithms|cost]] of computing the checksum.

==={{anchor|fuzzy checksum}}Fuzzy checksum===
The  idea of fuzzy checksum was developed for detection of [[email spam]] by building up co-operative databases from multiple ISPs of email suspected to be spam.   The content of such spam may often vary in its details, which would render normal checksumming ineffective.  By contrast a &quot;fuzzy checksum&quot; reduces the body text to its characteristic minimum, then generates a checksum in the usual manner. This greatly increases the chances of slightly different spam emails producing the same checksum.  The ISP spam detection software, such as [[SpamAssassin]], of co-operating ISPs submits checksums of all emails to the centralised service such as [[Distributed Checksum Clearinghouse|DCC]].  If the count of a submitted fuzzy checksum exceeds a certain threshold, the database notes that this probably indicates spam.  ISP service users similarly generate a fuzzy checksum on each of their emails and request the service for a spam likelihood.&lt;ref&gt;{{cite web| url=https://cwiki.apache.org/confluence/display/spamassassin/iXhash | title = IXhash |publisher= Apache |accessdate=7 January 2020}}&lt;/ref&gt;

===General considerations===

A message that is ''m'' bits long can be viewed as a corner of the ''m''-dimensional hypercube. The effect of a checksum algorithm that yields an n-bit checksum is to map each ''m''-bit message to a corner of a larger hypercube, with dimension {{tmath|m+n}}. The 2&lt;sup&gt;''m''+''n''&lt;/sup&gt; corners of this hypercube represent all possible received messages. The valid received messages (those that have the correct checksum) comprise a smaller set, with only 2&lt;sup&gt;''m''&lt;/sup&gt; corners.

A single-bit transmission error then corresponds to a displacement from a valid corner (the correct message and checksum) to one of the ''m'' adjacent corners.  An error which affects ''k'' bits moves the message to a corner which is ''k'' steps removed from its correct corner.  The goal of a good checksum algorithm is to spread the valid corners as far from each other as possible, so as to increase the likelihood &quot;typical&quot; transmission errors will end up in an invalid corner.

==See also==

General topic
* [[Algorithm]]
* [[Check digit]]
* [[Damm algorithm]]
* [[Data rot]]
* [[File verification]]
* [[Fletcher's checksum]]
* [[Frame check sequence]]
* [[cksum]]
* [[md5sum]]
* [[sha1sum]]
* [[Parchive]]
* [[Sum (Unix)|sum]]
* [[SYSV checksum]]
* [[BSD checksum]]
* [[xxHash]]

Error correction
* [[Hamming code]]
* [[IPv4 header checksum]]

Hash functions
* [[List of hash functions]]
* [[Luhn algorithm]]
* [[Parity bit]]
* [[Rolling checksum]]
* [[Verhoeff algorithm]]
* [[ZFS]]&amp;nbsp;â€” a file system which performs automatic file integrity checking using checksums

Related concepts
*[[Isopsephy]]
*[[Gematria]]

==References==
{{reflist}}

==External links==
{{wikibooks
 |1= Algorithm Implementation
 |2= Checksums
}}
*[http://www.netrino.com/Embedded-Systems/How-To/Additive-Checksums Additive Checksums (C)] theory from Barr Group
*[http://www.peterjockisch.de/texte/computerartikel/Kryptographische-Pruefsummen/Kryptographische-Pruefsummen_EN.html Practical Application of Cryptographic Checksums]

[[Category:Checksum algorithms|*]]</text>
      <sha1>pu688uk9ux7b76gcmlexbyymgowptq1</sha1>
    </revision>
  </page>
