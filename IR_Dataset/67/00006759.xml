  <page>
    <title>Context-free grammar</title>
    <ns>0</ns>
    <id>6759</id>
    <revision>
      <id>942730806</id>
      <parentid>942610967</parentid>
      <timestamp>2020-02-26T13:56:09Z</timestamp>
      <contributor>
        <username>Citation bot</username>
        <id>7903804</id>
      </contributor>
      <minor />
      <comment>Removed URL that duplicated unique identifier. Removed accessdate with no specified URL. Removed parameters. | You can [[WP:UCB|use this bot]] yourself. [[WP:DBUG|Report bugs here]]. | Activated by [[User:AManWithNoPlan]] | via #UCB_toolbar</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{Short description|Type of formal grammar}}{{Use American English|date=January 2019}}{{more citations needed|date=February 2012}}
{{merge from|Useless rules|date=February 2019|discuss=Talk:Useless rules#Proposed merge}}
In [[formal language]] theory, a '''context-free grammar''' ('''CFG''') is a certain type of [[formal grammar]]:  a set of [[Production (computer science)|production rules]] that describe all possible strings in a given formal language. Production rules are simple replacements. For example, the rule

&lt;math&gt;A\ \to\ \alpha&lt;/math&gt;

replaces &lt;math&gt;A&lt;/math&gt; with &lt;math&gt;\alpha&lt;/math&gt;. There can be multiple replacement rules for any given value. For example,

&lt;math&gt;A\ \to\ \alpha&lt;/math&gt;

&lt;math&gt;A\ \to\ \beta&lt;/math&gt;

means that &lt;math&gt;A&lt;/math&gt; can be replaced with either &lt;math&gt;\alpha&lt;/math&gt; or &lt;math&gt;\beta&lt;/math&gt;.

In context-free grammars, all rules are one-to-one, one-to-many, or one-to-none. These rules can be applied regardless of context. The left-hand side of the production rule is always a [[nonterminal]] symbol. This means that the symbol does not appear in the resulting formal language. So in our case, our language contains the letters &lt;math&gt;\alpha&lt;/math&gt; and &lt;math&gt;\beta&lt;/math&gt; but not &lt;math&gt;A.&lt;/math&gt;&lt;ref&gt;Stephen Scheinberg, ''Note on the Boolean Properties of Context-Free Languages'', Information and Control, '''3''', 372–375 (1960).&lt;/ref&gt;

Rules can also be applied in reverse to check whether a string is grammatically correct according to the grammar.

Here is an example context-free grammar that describes all two-letter strings containing the letters &lt;math&gt;\alpha&lt;/math&gt; or &lt;math&gt;\beta&lt;/math&gt;.

&lt;math&gt;S\ \to\ AA&lt;/math&gt;

&lt;math&gt;A\ \to\ \alpha&lt;/math&gt;

&lt;math&gt;A\ \to\ \beta&lt;/math&gt;

If we start with the nonterminal symbol &lt;math&gt;S&lt;/math&gt; then we can use the rule
&lt;math&gt;S\ \to\ AA&lt;/math&gt; to turn &lt;math&gt;S&lt;/math&gt; into &lt;math&gt;AA&lt;/math&gt;. We can then apply one of the two later rules. For example, if we apply &lt;math&gt;A\ \to\ \beta&lt;/math&gt; to the first &lt;math&gt;A&lt;/math&gt; we get &lt;math&gt;\beta A&lt;/math&gt;. If we then apply &lt;math&gt;A\ \to\ \alpha&lt;/math&gt; to the second &lt;math&gt;A&lt;/math&gt; we get &lt;math&gt;\beta\alpha&lt;/math&gt;. Since both &lt;math&gt;\alpha&lt;/math&gt; and &lt;math&gt;\beta&lt;/math&gt; are terminal symbols, and in context-free grammars terminal symbols never appear on the left hand side of a production rule, there are no more rules that can be applied. This same process can be used, applying the last two rules in different orders in order to get all possible strings within our simple context-free grammar.

[[formal language|Language]]s generated by context-free grammars are known as [[context-free language]]s (CFL). Different context-free grammars can generate the same context-free language. It is important to distinguish the properties of the language (intrinsic properties) from the properties of a particular grammar (extrinsic properties). The [[#Language equality|language equality]] question (do two given context-free grammars generate the same language?) is [[Decidability (logic)|undecidable]].

Context-free grammars arise in [[linguistics]] where they are used to describe the structure of sentences and words in a [[natural language]], and they were in fact invented by the linguist [[Noam Chomsky]] for this purpose. By contrast, in [[computer science]], as the use of recursively-defined concepts increased, they were used more and more. In an early application, grammars are used to describe the structure of [[programming language]]s. In a newer application, they are used in an essential part of the [[Extensible Markup Language]] (XML) called the ''[[Document Type Definition]]''.&lt;ref&gt;''Introduction to Automata Theory, Languages, and Computation'', John E. Hopcroft, Rajeev Motwani, Jeffrey D. Ullman, Addison Wesley, 2001, p.191&lt;/ref&gt;

In [[linguistics]], some authors use the term '''[[phrase structure grammar]]''' to refer to context-free grammars, whereby phrase-structure grammars are distinct from [[dependency grammar]]s. In [[computer science]], a popular notation for context-free grammars is [[Backus–Naur form]], or ''BNF''.

== Background ==

Since the time of [[Pāṇini]], at least, linguists have described the [[grammar]]s of languages in terms of their block structure, and described how sentences are [[recursion|recursively]] built up from smaller phrases, and eventually individual words or word elements. An essential property of these block structures is that logical units never overlap. For example, the sentence:
: ''John, whose blue car was in the garage, walked to the grocery store.''
can be logically parenthesized (with the logical metasymbols '''[ ]''') as follows:
: '''['''''John'''''[''', '''['''''whose '''''['''''blue car''''']]''' '''['''''was '''''['''''in '''''['''''the garage''''']]]''',''']]''' '''['''''walked '''''['''''to '''''['''''the '''''['''''grocery store''''']]]]'''.
A context-free grammar provides a simple and mathematically precise mechanism for describing the methods by which phrases in some natural language are built from smaller blocks, capturing the &quot;block structure&quot; of sentences in a natural way. Its simplicity makes the formalism amenable to rigorous mathematical study. Important features of natural language syntax such as [[agreement (linguistics)|agreement]] and [[reference]] are not part of the context-free grammar, but the basic recursive structure of sentences, the way in which clauses nest inside other clauses, and the way in which lists of adjectives and adverbs are swallowed by nouns and verbs, is described exactly.

Context-free grammars are a special form of [[Semi-Thue system]]s that in their general form date back to the work of [[Axel Thue]].

The formalism of context-free grammars was developed in the mid-1950s by [[Noam Chomsky]],&lt;ref name=&quot;hu106&quot;&gt;{{harvtxt|Hopcroft|Ullman|1979}}, p.&amp;nbsp;106.&lt;/ref&gt; and also their [[Chomsky hierarchy|classification as a special type]] of [[formal grammar]] (which he called [[phrase-structure grammar]]s).&lt;ref name=&quot;chomsky1956&quot;&gt;{{citation
 | last = Chomsky | first = Noam | authorlink =
 | title = Three models for the description of language
 | journal = IEEE Transactions on Information Theory
 | volume = 2 | issue = 3 | pages = 113–124
 | date = Sep 1956
 | doi = 10.1109/TIT.1956.1056813| id = }}&lt;/ref&gt; What Chomsky called a phrase structure grammar is also known now as a constituency grammar, whereby constituency grammars stand in contrast to [[dependency grammar]]s. In Chomsky's [[generative grammar]] framework, the syntax of natural language was described by context-free rules combined with transformation rules.

Block structure was introduced into computer [[programming language]]s by the [[Algol (programming language)|Algol]] project (1957–1960), which, as a consequence, also featured a context-free grammar to describe the resulting Algol syntax. This became a standard feature of computer languages, and the notation for grammars used in concrete descriptions of computer languages came to be known as [[Backus–Naur form]], after two members of the Algol language design committee.&lt;ref name=&quot;hu106&quot;/&gt; The &quot;block structure&quot; aspect that context-free grammars capture is so fundamental to grammar that the terms syntax and grammar are often identified with context-free grammar rules, especially in computer science. Formal constraints not captured by the grammar are then considered to be part of the &quot;semantics&quot; of the language.

Context-free grammars are simple enough to allow the construction of efficient [[list of algorithms#Parsing|parsing algorithm]]s that, for a given string, determine whether and how it can be generated from the grammar. An [[Earley parser]] is an example of such an algorithm, while the widely used [[LR parser|LR]] and [[LL parser]]s are simpler algorithms that deal only with more restrictive subsets of context-free grammars.

== Formal definitions ==
A context-free grammar {{mvar|G}} is defined by the 4-[[tuple]]:&lt;ref&gt;The notation here is that of {{harvtxt|Sipser|1997}}, p.&amp;nbsp;94. {{harvtxt|Hopcroft|Ullman|1979}} (p.&amp;nbsp;79) define context-free grammars as 4-tuples in the same way, but with different variable names.&lt;/ref&gt;

&lt;math&gt;G = (V, \Sigma, R, S)&lt;/math&gt;
where
# {{mvar|V}} is a finite set; each element &lt;math&gt; v\in V&lt;/math&gt; is called ''a nonterminal character'' or a ''variable''. Each variable represents a different type of phrase or clause in the sentence. Variables are also sometimes called syntactic categories. Each variable defines a sub-language of the language defined by {{mvar|G}}.
# {{math|Σ}} is a finite set of ''terminal''s, disjoint from {{mvar|V}}, which make up the actual content of the sentence. The set of terminals is the alphabet of the language defined by the grammar {{mvar|G}}.
# {{mvar|R}} is a finite relation from {{mvar|V}} to &lt;math&gt;(V\cup\Sigma)^{*}&lt;/math&gt;, where the asterisk represents the [[Kleene star]] operation. The members of {{mvar|R}} are called the ''(rewrite) rule''s or ''production''s of the grammar. (also commonly symbolized by a {{mvar|P}})
# {{mvar|S}} is the start variable (or start symbol), used to represent the whole sentence (or program). It must be an element of {{mvar|V}}.

=== Production rule notation ===
A [[Formal grammar#The syntax of grammars|production rule]] in {{mvar|R}} is formalized mathematically as a pair &lt;math&gt;(\alpha, \beta)\in R&lt;/math&gt;, where &lt;math&gt;\alpha \in V&lt;/math&gt; is a nonterminal and &lt;math&gt;\beta \in (V\cup\Sigma)^{*}&lt;/math&gt; is a [[string (computer science)|string]] of variables and/or terminals; rather than using [[ordered pair]] notation, production rules are usually written using an arrow operator with {{mvar|α}} as its left hand side and {{mvar|β}} as its right hand side:
&lt;math&gt;\alpha\rightarrow\beta&lt;/math&gt;.

It is allowed for {{mvar|β}} to be the [[empty string]], and in this case it is customary to denote it by ε. The form &lt;math&gt;\alpha\rightarrow\varepsilon&lt;/math&gt; is called an {{mvar|ε}}-production.&lt;ref&gt;{{harvtxt|Hopcroft|Ullman|1979}}, pp. 90–92.&lt;/ref&gt;

It is common to list all right-hand sides for the same left-hand side on the same line, using | (the [[pipe symbol]]) to separate them. Rules &lt;math&gt;\alpha\rightarrow \beta_1&lt;/math&gt; and &lt;math&gt;\alpha\rightarrow\beta_2&lt;/math&gt; can hence be written as &lt;math&gt;\alpha\rightarrow\beta_1\mid\beta_2&lt;/math&gt;. In this case, &lt;math&gt;\beta_1&lt;/math&gt; and &lt;math&gt;\beta_2&lt;/math&gt; is called the first and second alternative, respectively.

=== Rule application ===
For any strings &lt;math&gt;u, v\in (V\cup\Sigma)^{*}&lt;/math&gt;, we say {{mvar|u}} directly yields {{mvar|v}}, written as &lt;math&gt;u\Rightarrow v\,&lt;/math&gt;, if &lt;math&gt;\exists (\alpha, \beta)\in R&lt;/math&gt; with &lt;math&gt;\alpha \in V&lt;/math&gt; and &lt;math&gt;u_{1}, u_{2}\in (V\cup\Sigma)^{*}&lt;/math&gt; such that &lt;math&gt;u\,=u_{1}\alpha u_{2}&lt;/math&gt; and &lt;math&gt;v\,=u_{1}\beta u_{2}&lt;/math&gt;. Thus, {{mvar|v}} is a result of applying the rule &lt;math&gt;(\alpha, \beta)&lt;/math&gt; to {{mvar|u}}.

=== Repetitive rule application ===
For any strings &lt;math&gt;u, v\in (V\cup\Sigma)^{*}, &lt;/math&gt; we say {{mvar|u}} '''yields''' {{mvar|v}}, written as &lt;math&gt;u\stackrel{*}{\Rightarrow} v&lt;/math&gt; (or &lt;math&gt;u\Rightarrow\Rightarrow v\,&lt;/math&gt; in some textbooks), if &lt;math&gt;\exists k\geq 1\, \exists \, u_{1}, \cdots, u_{k}\in (V\cup\Sigma)^{*}&lt;/math&gt; such that &lt;math&gt;u = \, u_{1} \Rightarrow u_{2} \Rightarrow \cdots \Rightarrow u_{k} \, = v&lt;/math&gt;. In this case, if &lt;math&gt;k\geq 2&lt;/math&gt; (i.e., &lt;math&gt;u \neq v&lt;/math&gt;), the relation &lt;math&gt;u\stackrel{+}{\Rightarrow} v&lt;/math&gt; holds. In other words, &lt;math&gt;(\stackrel{*}{\Rightarrow})&lt;/math&gt; and &lt;math&gt;(\stackrel{+}{\Rightarrow})&lt;/math&gt; are the [[reflexive transitive closure]] (allowing a word to yield itself) and the [[transitive closure]] (requiring at least one step) of &lt;math&gt;(\Rightarrow)&lt;/math&gt;, respectively.

=== Context-free language ===
The language of a grammar &lt;math&gt;G = (V, \Sigma, R, S)&lt;/math&gt; is the set
:&lt;math&gt;L(G) = \{ w\in\Sigma^{*} : S\stackrel{*}{\Rightarrow} w\}&lt;/math&gt;

A language {{mvar|L}} is said to be a context-free language (CFL), if there exists a CFG {{mvar|G}}, such that &lt;math&gt;L\,=\,L(G)&lt;/math&gt;.

[[Pushdown automaton#PDA and context-free languages|Non-deterministic pushdown automata]] recognize exactly the context-free languages.

=== Proper CFGs ===
A context-free grammar is said to be ''proper'',&lt;ref&gt;{{citation
 | last = Nijholt | first = Anton
 | isbn = 978-3-540-10245-8
 | mr = 590047
 | page = 8
 | publisher = Springer
 | series = Lecture Notes in Computer Science
 | title = Context-free grammars: covers, normal forms, and parsing
 | volume = 93
 | year = 1980}}.&lt;/ref&gt; if it has
* no [[unreachable symbol]]s: &lt;math&gt;\forall N \in V: \exists \alpha,\beta \in (V\cup\Sigma)^*: S \stackrel{*}{\Rightarrow} \alpha{N}\beta&lt;/math&gt;
* no [[unproductive symbol]]s: &lt;math&gt;\forall N \in V: \exists w \in \Sigma^*: N \stackrel{*}{\Rightarrow} w&lt;/math&gt;
* no ε-productions: &lt;math&gt;\neg\exists N \in V: (N, \varepsilon) \in R&lt;/math&gt;
* no cycles: &lt;math&gt;\neg\exists N \in V: N \stackrel{+}{\Rightarrow} N&lt;/math&gt;

Every context-free grammar can be effectively transformed into a [[weak equivalence (formal languages)|weakly equivalent]] one without unreachable symbols,&lt;ref&gt;Hopcroft &amp; Ullman (1979), p.88, Lemma 4.1&lt;/ref&gt; a weakly equivalent one without unproductive symbols,&lt;ref&gt;Hopcroft &amp; Ullman (1979), p.89, Lemma 4.2&lt;/ref&gt; and a weakly equivalent one without cycles.&lt;ref&gt;This is a consequence of the unit-production elimination theorem in Hopcroft &amp; Ullman (1979), p.91, Theorem 4.4&lt;/ref&gt;
Every context-free grammar not producing ε can be effectively transformed into a weakly equivalent one without ε-productions;&lt;ref&gt;Hopcroft &amp; Ullman (1979), p.91, Theorem 4.4&lt;/ref&gt; altogether, every such grammar can be effectively transformed into a weakly equivalent proper CFG.

== Examples ==

{{more citations needed section|date=July 2018}}

=== Words concatenated with their reverse ===

The grammar &lt;math&gt;G = (\{S\}, \{a, b\}, P, S)&lt;/math&gt;, with productions

:{{math|''S'' → ''aSa''}},
:{{math|''S'' → ''bSb''}},
:{{math|''S'' → ε}},

is context-free. It is not proper since it includes an ε-production. A typical derivation in this grammar is
:{{math|''S'' → ''aSa'' → ''aaSaa'' → ''aabSbaa'' → ''aabbaa''}}.
This makes it clear that 
&lt;math&gt;L(G) = \{ww^R:w\in\{a,b\}^*\}&lt;/math&gt;. 
The language is context-free, however, it can be proved that it is not [[Regular language|regular]].

If the productions

:{{math|''S'' → ''a''}},
:{{math|''S'' → ''b''}},

are added, a context-free grammar for the set of all [[palindrome]]s over the alphabet {{math| { ''a'', ''b'' } }} is obtained.&lt;ref&gt;{{harvtxt|Hopcroft|Ullman|1979}}, Exercise 4.1a, p.&amp;nbsp;103.&lt;/ref&gt;

=== Well-formed parentheses ===
The canonical example of a context-free grammar is parenthesis matching, which is representative of the general case. There are two terminal symbols &quot;(&quot; and &quot;)&quot; and one nonterminal symbol S. The production rules are

:S → SS
:S → (S)
:S → ()

The first rule allows the S symbol to multiply; the second rule allows the S symbol to become enclosed by matching parentheses; and the third rule terminates the recursion.&lt;ref&gt;{{harvtxt|Hopcroft|Ullman|1979}}, Exercise 4.1b, p.&amp;nbsp;103.&lt;/ref&gt;

=== Well-formed nested parentheses and square brackets ===

A second canonical example is two different kinds of matching nested parentheses, described by the productions:

:S → SS
:S → ()
:S → (S)
:S → []
:S → [S]

with terminal symbols [ ] ( ) and nonterminal S.

The following sequence can be derived in that grammar:
: ([ [ [ ()() [ ][ ] ] ]([ ]) ])

=== Matching pairs ===
In a context-free grammar, we can pair up characters the way we do with [[bracket]]s. The simplest example:

:S → aSb
:S → ab

This grammar generates the language &lt;math&gt; \{ a^n b^n : n \ge 1 \} &lt;/math&gt;, which is not [[regular language|regular]] (according to the [[pumping lemma for regular languages]]).

The special character ε stands for the empty string. By changing the above grammar to
:S → aSb | ε
we obtain a grammar generating the language &lt;math&gt; \{ a^n b^n : n \ge 0 \} &lt;/math&gt; instead. This differs only in that it contains the empty string while the original grammar did not.

=== Distinct number of a's and b's ===

A context-free grammar for the language consisting of all strings over {a,b} containing an unequal number of a's and b's:
:S → U | V
:U → TaU | TaT | UaT
:V → TbV | TbT | VbT
:T → aTbT | bTaT | ε 
Here, the nonterminal T can generate all strings with the same number of a's as b's, the nonterminal U generates all strings with more a's than b's and the nonterminal V generates all strings with fewer a's than b's. Omitting the third alternative in the rule for U and V doesn't restrict the grammar's language.

=== Second block of b's of double size ===

Another example of a non-regular language is &lt;math&gt; \{ b^n a^m b^{2n} : n \ge 0, m \ge 0 \} &lt;/math&gt;. It is context-free as it can be generated by the following context-free grammar:
:S → bSbb | A
:A → aA | ε

=== First-order logic formulas ===

The [[First-order logic#Formation rules|formation rules]] for the terms and formulas of formal logic fit the definition of context-free grammar, except that the set of symbols may be infinite and there may be more than one start symbol.

== Examples of languages that are not context free ==

In contrast to well-formed nested parentheses and square brackets in the previous section, there is no context-free grammar for generating all sequences of two different types of parentheses, each separately balanced ''disregarding the other'', where the two types need not nest inside one another, for example:

: [ ( ] )

or

: [ [ [ [(((( ] ] ] ]))))(([ ))(([ ))([ )( ])( ])( ])

The fact that this language is not context free can be proven using [[Pumping lemma for context-free languages]] and a proof by contradiction, observing that all words of the form 
&lt;math&gt;
{(}^n {[}^n {)}^n {]}^n
&lt;/math&gt;
should belong to the language. This language belongs instead to a more general class and can be described by a [[conjunctive grammar]], which in turn also includes other non-context-free languages, such as the language of all words of the form
&lt;math&gt;
a^n b^n c^n
&lt;/math&gt;.

== Regular grammars ==
{{main|Regular grammar}}
Every [[regular grammar]] is context-free, but not all context-free grammars are regular.&lt;ref&gt;{{cite book |last1=Aho |first1=Alfred Vaino |last2=Lam |first2=Monica S. |last3=Sethi |first3=Ravi |last4=Ullman |first4=Jeffrey David |authorlink1=Alfred Aho |authorlink2=Monica S. Lam |authorlink3=Ravi Sethi |authorlink4=Jeffrey Ullman |title=Compilers: Principles, Techniques, &amp; Tools |date=2007 |publisher=Pearson Addison-Wesley |location=Boston, MA USA |isbn=9780321486813 |pages=[https://archive.org/details/compilers00alfr_0/page/205 205–206] |edition=2nd |chapter-url=https://www.pearson.com/us/higher-education/program/Aho-Compilers-Principles-Techniques-and-Tools-2nd-Edition/PGM167067.html |language=en |chapter-format=print |chapter=4.2.7 Context-Free Grammars Versus Regular Expressions |quote=Every construct that can be described by a regular expression can be described by a [context-free] grammar, but not vice-versa. |url=https://archive.org/details/compilers00alfr_0/page/205 }}&lt;/ref&gt; The following context-free grammar, however, is also regular.

:S → a
:S → aS
:S → bS

The terminals here are ''a'' and ''b'', while the only nonterminal is S.
The language described is all nonempty strings of &lt;math&gt;a&lt;/math&gt;s and &lt;math&gt;b&lt;/math&gt;s that end in &lt;math&gt;a&lt;/math&gt;.

This grammar is [[regular grammar|regular]]: no rule has more than one nonterminal in its right-hand side, and each of these nonterminals is at the same end of the right-hand side.

Every regular grammar corresponds directly to a [[nondeterministic finite automaton]], so we know that this is a [[regular language]].

Using pipe symbols, the grammar above can be described more tersely as follows:

:S → a | aS | bS

== Derivations and syntax trees ==
&lt;!-- This section is linked from [[LR parser]] --&gt;

A ''derivation'' of a string for a grammar is a sequence of grammar rule applications that transform the start symbol into the string.
A derivation proves that the string belongs to the grammar's language.

A derivation is fully determined by giving, for each step:
* the rule applied in that step
* the occurrence of its left-hand side to which it is applied
For clarity, the intermediate string is usually given as well.

For instance, with the grammar:

  (1)  S → S + S
  (2)  S → 1
  (3)  S → a

the string

 1 + 1 + a

can be derived with the derivation:

 S
     → (rule 1 on the first S)
  S+S
     → (rule 1 on the second S)
  S+S+S
     → (rule 2 on the second S)
  S+1+S
     → (rule 3 on the third S)
  S+1+a
     → (rule 2 on the first S)
  1+1+a

Often, a strategy is followed that deterministically determines the next nonterminal to rewrite:
* in a ''leftmost derivation'', it is always the leftmost nonterminal;
* in a ''rightmost derivation'', it is always the rightmost nonterminal.
Given such a strategy, a derivation is completely determined by the sequence of rules applied.  For instance, the leftmost derivation

 S
     → (rule 1 on the first S)
  S+S
     → (rule 2 on the first S)
  1+S
     → (rule 1 on the first S)
  1+S+S
     → (rule 2 on the first S)
  1+1+S
     → (rule 3 on the first S)
  1+1+a

can be summarized as

 rule 1, rule 2, rule 1, rule 2, rule 3

The corresponding rightmost derivation is:
 S
     → (rule 1 on the rightmost S)
  S+S
     → (rule 1 on the rightmost S)
  S+S+S
     → (rule 3 on the rightmost S)
  S+S+a
     → (rule 2 on the rightmost S)
  S+1+a
     → (rule 2 on the rightmost S)
  1+1+a
which can be summarized as
 rule 1, rule 1, rule 3, rule 2, rule 2
The distinction between leftmost derivation and rightmost derivation is important because in most [[parsing|parser]]s the transformation of the input is defined by giving a piece of code for every grammar rule that is executed whenever the rule is applied. Therefore, it is important to know whether the parser determines a leftmost or a rightmost derivation because this determines the order in which the pieces of code will be executed. See for an example [[LL parser]]s and [[LR parser]]s.

A derivation also imposes in some sense a hierarchical structure on the string that is derived. For example, if the string &quot;1 + 1 + a&quot; is derived according to the leftmost derivation:

:S → S + S (1)
:&amp;nbsp;&amp;nbsp; → 1 + S (2)
:&amp;nbsp;&amp;nbsp; → 1 + S + S (1)
:&amp;nbsp;&amp;nbsp; → 1 + 1 + S (2)
:&amp;nbsp;&amp;nbsp; → 1 + 1 + a (3)

the structure of the string would be:

: { { 1 }&lt;sub&gt;S&lt;/sub&gt; + { { 1 }&lt;sub&gt;S&lt;/sub&gt; + { a }&lt;sub&gt;S&lt;/sub&gt; }&lt;sub&gt;S&lt;/sub&gt; }&lt;sub&gt;S&lt;/sub&gt;
where { ... }&lt;sub&gt;S&lt;/sub&gt; indicates a substring recognized as belonging to S. This hierarchy can also be seen as a tree:

[[File:Simple Parse Tree 1.svg|x260px|Rightmost derivation of `1 + 1 + a`]]

This tree is called a ''[[parse tree]]'' or &quot;concrete syntax tree&quot; of the string, by contrast with the [[abstract syntax tree]]. In this case the presented leftmost and the rightmost derivations define the same parse tree; however, there is another (rightmost) derivation of the same string

:S → S + S (1)
:&amp;nbsp;&amp;nbsp; → S + a (3)
:&amp;nbsp;&amp;nbsp; → S + S + a (1)
:&amp;nbsp;&amp;nbsp; → S + 1 + a (2)
:&amp;nbsp;&amp;nbsp; → 1 + 1 + a (2)

and this defines the following parse tree:

[[File:Simple Parse Tree 2.svg|x260px|Leftmost derivation of `1 + 1 + a`]]

Note however that both parse trees can be obtained by both leftmost and rightmost derivations.  For example, the last tree can be obtained with the leftmost derivation as follows:

:S → S + S (1)
:&amp;nbsp;&amp;nbsp; → S + S + S (1)
:&amp;nbsp;&amp;nbsp; → 1 + S + S (2)
:&amp;nbsp;&amp;nbsp; → 1 + 1 + S (2)
:&amp;nbsp;&amp;nbsp; → 1 + 1 + a (3)

If a string in the language of the grammar has more than one parsing tree, then the grammar is said to be an ''[[ambiguous grammar]]''. Such grammars are usually hard to parse because the parser cannot always decide which grammar rule it has to apply. Usually, ambiguity is a feature of the grammar, not the language, and an unambiguous grammar can be found that generates the same context-free language. However, there are certain languages that can only be generated by ambiguous grammars; such languages are called ''[[inherently ambiguous language]]s''.

=== Example: Algebraic expressions ===
Here is a context-free grammar for syntactically correct [[Infix notation|infix]] algebraic expressions in the variables x, y and z:
# S → x
# S → y
# S → z
# S → S + S
# S → S - S
# S → S * S
# S → S / S
# S → ( S )

This grammar can, for example, generate the string

:( x + y ) * x - z * y / ( x + x )

as follows:

:S (the start symbol)
: → S - S (by rule 5)
: → S * S - S (by rule 6, applied to the leftmost S)
: → S * S - S / S (by rule 7, applied to the rightmost S)
: → ( S ) * S - S / S (by rule 8, applied to the leftmost S)
: → ( S ) * S - S / ( S ) (by rule 8, applied to the rightmost S)
: → ( S + S ) * S - S / ( S ) (etc.)
: → ( S + S ) * S - S * S / ( S )
: → ( S + S ) * S - S * S / ( S + S )
: → ( x + S ) * S - S * S / ( S + S )
: → ( x + y ) * S - S * S / ( S + S )
: → ( x + y ) * x - S * y / ( S + S )
: → ( x + y ) * x - S * y / ( x + S )
: → ( x + y ) * x - z * y / ( x + S )
: → ( x + y ) * x - z * y / ( x + x )

Note that many choices were made underway as to which rewrite was going to be performed next.
These choices look quite arbitrary. As a matter of fact, they are, in the sense that the string finally generated is always the same.  For example, the second and third rewrites

: → S * S - S (by rule 6, applied to the leftmost S)
: → S * S - S / S (by rule 7, applied to the rightmost S)

could be done in the opposite order:

: → S - S / S (by rule 7, applied to the rightmost S)
: → S * S - S / S (by rule 6, applied to the leftmost S)

Also, many choices were made on which rule to apply to each selected &lt;code&gt;S&lt;/code&gt;.
Changing the choices made and not only the order they were made in usually affects which terminal string comes out at the end.

Let's look at this in more detail.  Consider the [[parse tree]] of this derivation:

[[File:Parse Tree 1.svg|An example parse tree]]

Starting at the top, step by step, an S in the tree is expanded, until no more unexpanded &lt;code&gt;S&lt;/code&gt;es (nonterminals) remain.
Picking a different order of expansion will produce a different derivation, but the same parse tree.
The parse tree will only change if we pick a different rule to apply at some position in the tree.

But can a different parse tree still produce the same terminal string,
which is &lt;code&gt;( x + y ) * x - z * y / ( x + x )&lt;/code&gt; in this case?
Yes, for this particular grammar, this is possible.
Grammars with this property are called [[ambiguous grammar|ambiguous]].

For example, &lt;code&gt;x + y * z&lt;/code&gt; can be produced with these two different parse trees:

[[File:Parse Tree Derivations.svg|x260px|Two different parse trees from the same input]]

However, the ''language'' described by this grammar is not inherently ambiguous:
an alternative, unambiguous grammar can be given for the language, for example:

:T → x
:T → y
:T → z
:S → S + T
:S → S - T
:S → S * T
:S → S / T
:T → ( S )
:S → T

(once again picking &lt;code&gt;S&lt;/code&gt; as the start symbol). This alternative grammar will produce &lt;code&gt;x + y * z&lt;/code&gt; with a parse tree similar to the left one above, i.e. implicitly assuming the association &lt;code&gt;(x + y) * z&lt;/code&gt;, which is not according to standard operator precedence. More elaborate, unambiguous and context-free grammars can be constructed that produce parse trees that obey all desired [[Operator-precedence parser|operator precedence]] and associativity rules.

== Normal forms ==
Every context-free grammar that does not generate the empty string can be transformed into one in which there is no ε-production (that is, a rule that has the empty string as a product). If a grammar does generate the empty string, it will be necessary to include the rule &lt;math&gt;S \rarr \epsilon&lt;/math&gt;, but there need be no other ε-rule. Every context-free grammar with no ε-production has an equivalent grammar in [[Chomsky normal form]], and a grammar in [[Greibach normal form]]. &quot;Equivalent&quot; here means that the two grammars generate the same language.

The especially simple form of production rules in Chomsky normal form grammars has both theoretical and practical implications. For instance, given a context-free grammar, one can use the Chomsky normal form to construct a [[polynomial-time]] algorithm that decides whether a given string is in the language represented by that grammar or not (the [[CYK algorithm]]).

==Closure properties==
Context-free languages are [[Closure (mathematics)|closed]] under the various operations, that is, if the languages ''K'' and ''L'' are 
context-free, so is the result of the following operations:

* [[set union|union]] ''K'' ∪ ''L''; [[string concatenation#Concatenation of sets of strings|concatenation]] ''K'' ∘ ''L''; [[Kleene star]] ''L''&lt;sup&gt;*&lt;/sup&gt;&lt;ref&gt;Hopcroft &amp; Ullman (1979), p.131, Theorem 6.1&lt;/ref&gt;
* [[string substitution|substitution]] (in particular [[string homomorphism|homomorphism]])&lt;ref&gt;Hopcroft &amp; Ullman (1979), pp.131–132, Theorem 6.2&lt;/ref&gt;
* [[string homomorphism|inverse homomorphism]]&lt;ref&gt;Hopcroft &amp; Ullman (1979), pp.132–134, Theorem 6.3&lt;/ref&gt;
* [[set intersection|intersection]] with a [[regular language]]&lt;ref&gt;Hopcroft &amp; Ullman (1979), pp.135–136, Theorem 6.5&lt;/ref&gt;

They are not closed under general intersection (hence neither under [[set complement|complementation]]) and set difference.&lt;ref&gt;Hopcroft &amp; Ullman (1979), pp.134–135, Theorem 6.4&lt;/ref&gt;

== Decidable problems ==

The following are some decidable problems about context-free grammars.

=== Parsing ===

The parsing problem, checking whether a given word belongs to the language given by a context-free grammar, is decidable, using one of the general-purpose parsing algorithms:
* [[CYK algorithm]] (for grammars in [[Chomsky normal form]])
* [[Earley parser]]
* [[GLR parser]]
* [[LL parser]] (only for the proper subclass of for LL(''k'') grammars)
Context-free parsing for [[Chomsky normal form]] grammars was shown by Leslie G. Valiant to be reducible to boolean [[matrix multiplication]], thus inheriting its complexity upper bound of [[Big O notation|''O'']](''n''&lt;sup&gt;2.3728639&lt;/sup&gt;).&lt;ref&gt;{{cite techreport| author=Leslie Valiant| title=General context-free recognition in less than cubic time|date=Jan 1974| pages=11| institution=Carnegie Mellon University| url=http://repository.cmu.edu/cgi/viewcontent.cgi?article=2751&amp;context=compsci}}&lt;/ref&gt;&lt;ref&gt;{{cite journal| author=Leslie G. Valiant| title=General context-free recognition in less than cubic time| journal=Journal of Computer and System Sciences| year=1975| volume=10| number=2| pages=308–315| doi=10.1016/s0022-0000(75)80046-8}}&lt;/ref&gt;&lt;ref group=note&gt;In Valiant's papers, ''O''(''n''&lt;sup&gt;2.81&lt;/sup&gt;) given, the then best known upper bound. See [[Matrix multiplication#Algorithms for efficient matrix multiplication]] and [[Coppersmith–Winograd algorithm]] for bound improvements since then.&lt;/ref&gt; Conversely, [[Lillian Lee (computer scientist)|Lillian Lee]] has shown ''O''(''n''&lt;sup&gt;3−ε&lt;/sup&gt;) boolean matrix multiplication to be reducible to ''O''(''n''&lt;sup&gt;3−3ε&lt;/sup&gt;) CFG parsing, thus establishing some kind of lower bound for the latter.&lt;ref&gt;{{cite journal| author=Lillian Lee|authorlink=Lillian Lee (computer scientist)|title=Fast Context-Free Grammar Parsing Requires Fast Boolean Matrix Multiplication| journal=J ACM| year=2002| volume=49| number=1| pages=1–15| url=http://www.cs.cornell.edu/home/llee/papers/bmmcfl-jacm.pdf| doi=10.1145/505241.505242| arxiv=cs/0112018}}&lt;/ref&gt;

=== Reachability, productiveness, nullability ===

It is decidable whether a given non-terminal of a context-free grammar is reachable,&lt;ref&gt;{{harvtxt|Hopcroft|Ullman|1979}}, Lemma 4.2, p.&amp;nbsp;89.&lt;/ref&gt; whether it is productive,&lt;ref&gt;{{harvtxt|Hopcroft|Ullman|1979}}, Lemma 4.1, p.&amp;nbsp;88.&lt;/ref&gt; and whether it is nullable (that is, it can derive the empty string).&lt;ref&gt;{{harvtxt|Hopcroft|Ullman|1979}}, Theorem 4.3, p.&amp;nbsp;90.&lt;/ref&gt;

=== Regularity and LL(''k'') checks ===

It is decidable whether a given ''grammar'' is a [[regular grammar]],&lt;ref&gt;This is easy to see from the grammar definitions.&lt;/ref&gt; as well as whether it is an [[LL grammar|LL(''k'') grammar]] for a given ''k''≥0.&lt;ref name=&quot;Rosenkrantz.Stearns.1970&quot;&gt;{{cite journal  | author=D.J. Rosenkrantz and R.E. Stearns | title=Properties of Deterministic Top Down Grammars | journal=Information and Control | volume=17 | issue=3 | pages=226&amp;ndash;256 | year=1970 | doi=10.1016/S0019-9958(70)90446-8 }}&lt;/ref&gt;{{rp|233}} If ''k'' is not given, the latter problem is undecidable.&lt;ref name=&quot;Rosenkrantz.Stearns.1970&quot;/&gt;{{rp|252}}

Given a context-free ''language'', it is neither decidable whether it is regular,&lt;ref&gt;{{harvtxt|Hopcroft|Ullman|1979}}, Exercise 8.10a, p.&amp;nbsp;214. The problem remains undecidable even if the language is produced by a &quot;linear&quot; context-free grammar (i.e., with at most one nonterminal in each rule's right-hand side, cf. Exercise 4.20, p.&amp;nbsp;105).&lt;/ref&gt; nor whether it is an LL(''k'') language for a given ''k''.&lt;ref name=&quot;Rosenkrantz.Stearns.1970&quot;/&gt;{{rp|254}}

=== Emptiness and finiteness ===

There are algorithms to decide whether a language of a given context-free language is empty, as well as whether it is finite.&lt;ref&gt;Hopcroft &amp; Ullman (1979), pp.137–138, Theorem 6.6&lt;/ref&gt;

== Undecidable problems ==
Some questions that are undecidable for wider classes of grammars become decidable for context-free grammars; e.g. the [[emptiness problem]] (whether the grammar generates any terminal strings at all), is undecidable for [[context-sensitive grammar]]s, but decidable for context-free grammars.

However, many problems are [[Undecidable problem|undecidable]] even for context-free grammars. Examples are:

=== Universality ===
Given a CFG, does it generate the language of all strings over the alphabet of terminal symbols used in its rules?&lt;ref name=&quot;sipser&quot;&gt;{{harvtxt|Sipser|1997}}, Theorem 5.10, p. 181.&lt;/ref&gt;&lt;ref name=&quot;hu281&quot;/&gt;

A reduction can be demonstrated to this problem from the well-known undecidable problem of determining whether a [[Turing machine]] accepts a particular input (the [[halting problem]]). The reduction uses the concept of a ''[[computation history]]'', a string describing an entire computation of a [[Turing machine]]. A CFG can be constructed that generates all strings that are not accepting computation histories for a particular Turing machine on a particular input, and thus it will accept all strings only if the machine doesn't accept that input.

=== Language equality ===
Given two CFGs, do they generate the same language?&lt;ref name=&quot;hu281&quot;&gt;{{harvtxt|Hopcroft|Ullman|1979}}, p. 281.&lt;/ref&gt;&lt;ref name=&quot;eom&quot;/&gt;

The undecidability of this problem is a direct consequence of the previous: it is impossible to even decide whether a CFG is equivalent to the trivial CFG defining the language of all strings.

=== Language inclusion ===
Given two CFGs, can the first one generate all strings that the second one can generate?&lt;ref name=&quot;hu281&quot;/&gt;&lt;ref name=&quot;eom&quot;/&gt;

If this problem was decidable, then language equality could be decided too: two CFGs G1 and G2 generate the same language if L(G1) is a subset of L(G2) and L(G2) is a subset of L(G1).

=== Being in a lower or higher level of the Chomsky hierarchy ===
Using [[Greibach's theorem]], it can be shown that the two following problems are undecidable:

* Given a [[context-sensitive grammar]], does it describe a context-free language?
* Given a context-free grammar, does it describe a [[regular language]]?&lt;ref name=&quot;hu281&quot;/&gt;&lt;ref name=&quot;eom&quot;&gt;{{citation|title=Encyclopaedia of mathematics: an updated and annotated translation of the Soviet &quot;Mathematical Encyclopaedia&quot;|first=Michiel|last=Hazewinkel|publisher=Springer|year=1994|isbn=978-1-55608-003-6|at=Vol. IV, p. 56|url=https://books.google.com/books?id=s9F71NJxwzoC&amp;pg=PA56}}.&lt;/ref&gt;

=== Grammar ambiguity ===
Given a CFG, is it [[Ambiguous grammar|ambiguous]]?

The undecidability of this problem follows from the fact that if an algorithm to determine ambiguity existed, the [[Post correspondence problem]] could be decided, which is known to be undecidable.

=== Language disjointness ===
Given two CFGs, is there any string derivable from both grammars?

If this problem was decidable, the undecidable [[Post correspondence problem]] could be decided, too: given strings &lt;math&gt;\alpha_1, \ldots, \alpha_N, \beta_1, \ldots, \beta_N&lt;/math&gt; over some alphabet &lt;math&gt;\{a_1, \ldots, a_k\}&lt;/math&gt;, let the grammar {{tmath|G_1}} consist of the rule
:&lt;math&gt;S \to \alpha_1 S \beta_1^{rev} | \cdots | \alpha_N S \beta_N^{rev} | b&lt;/math&gt;;
where &lt;math&gt;\beta_i^{rev}&lt;/math&gt; denotes the [[String (computer science)#Reversal|reversed]] string &lt;math&gt;\beta_i&lt;/math&gt; and &lt;math&gt;b&lt;/math&gt; doesn't occur among the &lt;math&gt;a_i&lt;/math&gt;; and let grammar {{tmath|G_2}} consist of  the rule
:&lt;math&gt;T \to a_1 T a_1 | \cdots | a_k T a_k | b&lt;/math&gt;;
Then the Post problem given by &lt;math&gt;\alpha_1, \ldots, \alpha_N, \beta_1, \ldots, \beta_N&lt;/math&gt; has a solution if and only if {{tmath|L(G_1)}} and {{tmath|L(G_2)}} share a derivable string.

== Extensions ==
An obvious way to extend the context-free grammar formalism is to allow nonterminals to have arguments, the values of which are passed along within the rules. This allows natural language features such as [[Agreement (linguistics)|agreement]] and [[reference]], and programming language analogs such as the correct use and definition of identifiers, to be expressed in a natural way. E.g. we can now easily express that in English sentences, the subject and verb must agree in number. In computer science, examples of this approach include [[affix grammar]]s, [[attribute grammar]]s, [[indexed grammar]]s, and Van Wijngaarden [[two-level grammar]]s. Similar extensions exist in linguistics.

An '''extended context-free grammar''' (or '''regular right part grammar''') is one in which the right-hand side of the production rules is allowed to be a [[regular expression]] over the grammar's terminals and nonterminals. Extended context-free grammars describe exactly the context-free languages.&lt;ref&gt;{{cite web | url=http://www.engr.mun.ca/~theo/Courses/fm/pub/context-free.pdf | title=A Short Introduction to Regular Expressions and Context-Free Grammars | accessdate=August 24, 2012 | author=Norvell, Theodore | pages=4}}&lt;/ref&gt;

Another extension is to allow additional terminal symbols to appear at the left-hand side of rules, constraining their application. This produces the formalism of [[context-sensitive grammar]]s.

== Subclasses ==
There are a number of important subclasses of the context-free grammars:

* [[LR parser|LR(''k'')]] grammars (also known as [[deterministic context-free grammar]]s) allow [[parsing]] (string recognition) with [[deterministic pushdown automaton|deterministic pushdown automata]] (PDA), but they can only describe [[deterministic context-free language]]s.
* [[SLR grammar|Simple LR]], [[LALR parser|Look-Ahead LR]] grammars are subclasses that allow further simplification of parsing. SLR and LALR are recognized using the same PDA as LR, but with simpler tables, in most cases.
* [[LL parser|LL(''k'') and LL(''*'')]] grammars allow parsing by direct construction of a leftmost derivation as described above, and describe even fewer languages.
* [[Simple grammar]]s are a subclass of the LL(1) grammars mostly interesting for its theoretical property that language equality of simple grammars is decidable, while language inclusion is not.
* [[Bracketed grammar]]s have the property that the terminal symbols are divided into left and right bracket pairs that always match up in rules.
* [[Linear grammar]]s have no rules with more than one nonterminal on the right-hand side.
* [[Regular grammar]]s are a subclass of the linear grammars and describe the [[regular language|regular]] languages, i.e. they correspond to [[finite automaton|finite automata]] and [[regular expression]]s.

LR parsing extends LL parsing to support a larger range of grammars; in turn, [[GLR parser|generalized LR parsing]] extends LR parsing to support arbitrary context-free grammars.  On LL grammars and LR grammars, it essentially performs LL parsing and LR parsing, respectively, while on [[nondeterministic grammar]]s, it is as efficient as can be expected.  Although GLR parsing was developed in the 1980s, many new language definitions and [[parser generator]]s continue to be based on LL, LALR or LR parsing up to the present day.

== Linguistic applications ==
[[Noam Chomsky|Chomsky]] initially hoped to overcome the limitations of context-free grammars by adding [[transformational grammar|transformation rules]].&lt;ref name=&quot;chomsky1956&quot;/&gt;

Such rules are another standard device in traditional linguistics; e.g. [[grammatical voice|passivization]] in English. Much of [[generative grammar]] has been devoted to finding ways of refining the descriptive mechanisms of phrase-structure grammar and transformation rules such that exactly the kinds of things can be expressed that natural language actually allows. Allowing arbitrary transformations does not meet that goal: they are much too powerful, being [[Turing complete]] unless significant restrictions are added (e.g. no transformations that introduce and then rewrite symbols in a context-free fashion).

Chomsky's general position regarding the non-context-freeness of natural language has held up since then,&lt;ref name=&quot;shieber1985&quot;&gt;{{citation | title=Evidence against the context-freeness of natural language | year=1985 | last=Shieber | first=Stuart | journal=Linguistics and Philosophy | volume=8 | pages=333–343 | url=http://www.eecs.harvard.edu/~shieber/Biblio/Papers/shieber85.pdf | doi=10.1007/BF00630917 | issue=3}}.&lt;/ref&gt; although his specific examples regarding the inadequacy of context-free grammars in terms of their weak generative capacity were later disproved.&lt;ref name=&quot;pullum-gazdar1982&quot;&gt;{{citation | title=Natural languages and context-free languages | year=1982 | last=Pullum | first=Geoffrey K. | author2=Gerald Gazdar | journal=Linguistics and Philosophy | volume=4 | pages=471–504 | doi=10.1007/BF00360802 | issue=4}}.&lt;/ref&gt;
[[Gerald Gazdar]] and [[Geoffrey Pullum]] have argued that despite a few non-context-free constructions in natural language (such as [[cross-serial dependencies]] in [[Swiss German]]&lt;ref name=&quot;shieber1985&quot;/&gt; and [[reduplication]] in [[Bambara language|Bambara]]&lt;ref name=&quot;culy1985&quot;&gt;{{citation | title=The Complexity of the Vocabulary of Bambara | year=1985 | last=Culy | first=Christopher | journal=Linguistics and Philosophy | volume=8 | pages=345–351 | doi=10.1007/BF00630918 | issue=3}}.&lt;/ref&gt;), the vast majority of forms in natural language are indeed context-free.&lt;ref name=&quot;pullum-gazdar1982&quot;/&gt;

== See also ==
* [[Parsing expression grammar]]
* [[Stochastic context-free grammar]]
* [[Context-free grammar generation algorithms|Algorithms for context-free grammar generation]]
* [[Pumping lemma for context-free languages]]

== Notes ==
{{Reflist|30em}}
&lt;!--Group some notes as references--&gt;
{{reflist|group=note}}

== References ==
*{{citation|first1=John E.|last1=Hopcroft|author1-link=John Hopcroft|first2=Jeffrey D.|last2=Ullman|author2-link=Jeffrey Ullman|title=Introduction to Automata Theory, Languages, and Computation|publisher=Addison-Wesley|year=1979}}. Chapter 4: Context-Free Grammars, pp.&amp;nbsp;77–106; Chapter 6: Properties of Context-Free Languages, pp.&amp;nbsp;125–137.
*{{citation | authorlink = Michael Sipser | first = Michael | last = Sipser | year = 1997 | title = Introduction to the Theory of Computation | publisher = PWS Publishing | isbn = 978-0-534-94728-6 | url = https://archive.org/details/introductiontoth00sips }}. Chapter 2: Context-Free Grammars, pp.&amp;nbsp;91–122; Section 4.1.2: Decidable problems concerning context-free languages, pp.&amp;nbsp;156–159; Section 5.1.1: Reductions via computation histories: pp.&amp;nbsp;176–183.
* {{cite book| author=J. Berstel, L. Boasson| title=Context-Free Languages| year=1990| volume=B| pages=59–102| publisher=Elsevier| editor=Jan van Leeuwen| series=Handbook of Theoretical Computer Science}}

== External links ==
* Computer programmers may find the [https://stackoverflow.com/questions/6713240/what-is-a-context-free-grammar stack exchange answer] to be useful.
* Non-computer programmers will find [https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html more academic introductory materials] to be enlightening.

{{Formal languages and grammars}}

{{DEFAULTSORT:Context-Free Grammar}}
[[Category:1956 in computer science]]
[[Category:Compiler construction]]
[[Category:Formal languages]]
[[Category:Programming language topics]]
[[Category:Wikipedia articles with ASCII art]]</text>
      <sha1>ffjspwaooh5k7alyoz51ltpz50o9afa</sha1>
    </revision>
  </page>
