  <page>
    <title>Context-free language</title>
    <ns>0</ns>
    <id>6867</id>
    <revision>
      <id>941911504</id>
      <parentid>931386040</parentid>
      <timestamp>2020-02-21T11:59:49Z</timestamp>
      <contributor>
        <username>Uanfala</username>
        <id>11049176</id>
      </contributor>
      <comment>removed [[Category:Languages]] using [[WP:HC|HotCat]] not a language</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">In [[formal language theory]], a  '''context-free language''' ('''CFL''') is a [[formal language|language]] generated by a [[context-free grammar]] (CFG).

Context-free languages have many applications in [[programming languages]], in particular, most arithmetic expressions are generated by context-free grammars.

==Background==

===Context-free grammar===

Different context-free grammars can generate the same context-free language. Intrinsic properties of the language can be distinguished from extrinsic properties of a particular grammar by comparing multiple grammars that describe the language.

===Automata===

The set of all context-free languages is identical to the set of languages accepted by [[pushdown automata]], which makes these languages amenable to parsing. Further, for a given CFG, there is a direct way to produce a pushdown automaton for the grammar (and thereby the corresponding language), though going the other way (producing a grammar given an automaton) is not as direct.

==Examples==

A model context-free language is &lt;math&gt;L = \{a^nb^n:n\geq1\}&lt;/math&gt;, the language of all non-empty even-length strings, the entire first halves of which are {{mvar|a}}'s, and the entire second halves of which are {{mvar|b}}'s. {{mvar|L}} is generated by the grammar &lt;math&gt;S\to aSb ~|~ ab&lt;/math&gt;.
This language is not [[regular language|regular]].
It is accepted by the [[pushdown automaton#Formal definition|pushdown automaton]] &lt;math&gt;M=(\{q_0,q_1,q_f\}, \{a,b\}, \{a,z\}, \delta, q_0, z, \{q_f\})&lt;/math&gt; where &lt;math&gt;\delta&lt;/math&gt; is defined as follows:&lt;ref group=note&gt;meaning of &lt;math&gt;\delta&lt;/math&gt;'s arguments and results: &lt;math&gt;\delta(\mathrm{state}_1, \mathrm{read}, \mathrm{pop}) = (\mathrm{state}_2, \mathrm{push})&lt;/math&gt;&lt;/ref&gt;

:&lt;math&gt;\begin{align}
\delta(q_0, a, z) &amp;= (q_0, az) \\
\delta(q_0, a, a) &amp;= (q_0, aa) \\
\delta(q_0, b, a) &amp;= (q_1, \varepsilon) \\
\delta(q_1, b, a) &amp;= (q_1, \varepsilon) \\
\delta(q_1, \varepsilon, z) &amp;= (q_f, \varepsilon)
\end{align}&lt;/math&gt;

Unambiguous CFLs are a proper subset of all CFLs: there are [[Inherently ambiguous language|inherently ambiguous]] CFLs. An example of an inherently ambiguous CFL is the union of &lt;math&gt;\{a^n b^m c^m d^n | n, m &gt; 0\}&lt;/math&gt; with &lt;math&gt;\{a^n b^n c^m d^m | n, m &gt; 0\}&lt;/math&gt;. This set is context-free, since the union of two context-free languages is always context-free. But there is no way to unambiguously parse strings in the (non-context-free) subset &lt;math&gt;\{a^n b^n c^n d^n | n &gt; 0\}&lt;/math&gt; which is the intersection of these two languages.{{sfn|Hopcroft|Ullman|1979|p=100|loc=Theorem 4.7}}

===Dyck language===

The [[Dyck language|language of all properly matched parentheses]] is generated by the grammar &lt;math&gt;S\to SS ~|~ (S) ~|~ \varepsilon&lt;/math&gt;.

==Properties==

===Context-free parsing===
{{main|Parsing}}

The context-free nature of the language makes it simple to parse with a pushdown automaton.

Determining an instance of the [[membership problem]]; i.e. given a string &lt;math&gt;w&lt;/math&gt;, determine whether &lt;math&gt;w \in L(G)&lt;/math&gt; where &lt;math&gt;L&lt;/math&gt; is the language generated by a given grammar &lt;math&gt;G&lt;/math&gt;; is also known as ''recognition''. Context-free recognition for [[Chomsky normal form]] grammars was shown by Leslie G. Valiant to be reducible to boolean [[matrix multiplication]], thus inheriting its complexity upper bound of [[Big O notation|''O'']](''n''&lt;sup&gt;2.3728639&lt;/sup&gt;).&lt;ref&gt;{{cite techreport| author=Leslie Valiant| title=General context-free recognition in less than cubic time|date=Jan 1974| pages=11| institution=Carnegie Mellon University| url=http://repository.cmu.edu/cgi/viewcontent.cgi?article=2751&amp;context=compsci}}&lt;/ref&gt;&lt;ref&gt;{{cite journal| author=Leslie G. Valiant| title=General context-free recognition in less than cubic time| journal=Journal of Computer and System Sciences| year=1975| volume=10| number=2| pages=308–315| doi=10.1016/s0022-0000(75)80046-8}}&lt;/ref&gt;&lt;ref group=note&gt;In Valiant's papers, ''O''(''n''&lt;sup&gt;2.81&lt;/sup&gt;) given, the then best known upper bound. See [[Matrix multiplication#Algorithms for efficient matrix multiplication]] and [[Coppersmith–Winograd algorithm]] for bound improvements since then.&lt;/ref&gt;
Conversely, [[Lillian Lee (computer scientist)|Lillian Lee]] has shown ''O''(''n''&lt;sup&gt;3−ε&lt;/sup&gt;) boolean matrix multiplication to be reducible to ''O''(''n''&lt;sup&gt;3−3ε&lt;/sup&gt;) CFG parsing, thus establishing some kind of lower bound for the latter.&lt;ref&gt;{{cite journal| author=Lillian Lee|authorlink=Lillian Lee (computer scientist)|title=Fast Context-Free Grammar Parsing Requires Fast Boolean Matrix Multiplication| journal=J ACM| year=2002| volume=49| number=1| pages=1–15| url=http://www.cs.cornell.edu/home/llee/papers/bmmcfl-jacm.pdf| doi=10.1145/505241.505242| arxiv=cs/0112018}}&lt;/ref&gt;

Practical uses of context-free languages require also to produce a derivation tree that exhibits the  structure that the grammar associates with the given string. The process of producing this tree is called ''[[parsing]]''. Known parsers have a time complexity that is cubic in the size of the string that is parsed.

Formally, the set of all context-free languages is identical to the set of languages accepted by pushdown automata (PDA). Parser algorithms for context-free languages include the [[CYK algorithm]] and [[Earley parser|Earley's Algorithm]].

A special subclass of context-free languages are the [[deterministic context-free language]]s which are defined as the set of languages accepted by a [[deterministic pushdown automaton]] and can be parsed by a [[LR parser|LR(k) parser]].&lt;ref&gt;{{Cite journal | last1 = Knuth | first1 = D. E. | authorlink = Donald Knuth | title = On the translation of languages from left to right | doi = 10.1016/S0019-9958(65)90426-2 | journal = Information and Control | volume = 8 | issue = 6 | pages = 607–639 | date = July 1965 | url = http://www.cs.dartmouth.edu/~mckeeman/cs48/mxcom/doc/knuth65.pdf | accessdate = 29 May 2011 | ref = harv | archive-url = https://web.archive.org/web/20120315152151/http://www.cs.dartmouth.edu/~mckeeman/cs48/mxcom/doc/knuth65.pdf | archive-date = 15 March 2012 | url-status = dead }}&lt;/ref&gt;

See also [[parsing expression grammar]] as an alternative approach to grammar and parser.

===Closure===
The class of context-free languages is [[closure (mathematics)|closed]] under the following operations. That is, if ''L'' and ''P'' are context-free languages, the following languages are context-free as well:
*the [[union (set theory)|union]] &lt;math&gt;L \cup P&lt;/math&gt; of ''L'' and ''P''{{sfn|Hopcroft|Ullman|1979|p=131|loc=Corollary of Theorem 6.1}}
*the reversal of ''L''{{sfn|Hopcroft|Ullman|1979|p=142|loc=Exercise 6.4d}}
*the [[concatenation]] &lt;math&gt;L \cdot P&lt;/math&gt; of ''L'' and ''P''{{sfn|Hopcroft|Ullman|1979|p=131|loc=Corollary of Theorem 6.1}}
*the [[Kleene star]] &lt;math&gt;L^*&lt;/math&gt; of ''L''{{sfn|Hopcroft|Ullman|1979|p=131|loc=Corollary of Theorem 6.1}}
*the image &lt;math&gt;\varphi(L)&lt;/math&gt; of ''L'' under a [[String operations#String homomorphism|homomorphism]] &lt;math&gt;\varphi&lt;/math&gt;{{sfn|Hopcroft|Ullman|1979|p=131-132|loc=Corollary of Theorem 6.2}}
*the image &lt;math&gt;\varphi^{-1}(L)&lt;/math&gt; of ''L'' under an [[String operations#String homomorphism|inverse homomorphism]] &lt;math&gt;\varphi^{-1}&lt;/math&gt;{{sfn|Hopcroft|Ullman|1979|p=132|loc=Theorem 6.3}}
*the [[circular shift#Applications|circular shift]] of ''L'' (the language &lt;math&gt;\{vu : uv \in L \}&lt;/math&gt;){{sfn|Hopcroft|Ullman|1979|p=142-144|loc=Exercise 6.4c}}
*the prefix closure of ''L'' (the set of all [[Prefix (computer science)|prefix]]es of strings from ''L''){{sfn|Hopcroft|Ullman|1979|p=142|loc=Exercise 6.4b}}
*the [[Quotient of a formal language|quotient]] ''L''/''R'' of ''L'' by a regular language ''R''{{sfn|Hopcroft|Ullman|1979|p=142|loc=Exercise 6.4a}}

====Nonclosure under intersection, complement, and difference====
The context-free languages are not closed under intersection.  This can be seen by taking the languages &lt;math&gt;A = \{a^n b^n c^m \mid m, n \geq 0 \}&lt;/math&gt; and &lt;math&gt;B = \{a^m b^n c^n \mid m,n \geq 0\}&lt;/math&gt;, which are both context-free.&lt;ref group=note&gt;A context-free grammar for the language ''A'' is given by the following production rules, taking ''S'' as the start symbol: ''S'' → ''Sc'' | ''aTb'' | ''ε''; ''T'' → ''aTb'' | ''ε''. The grammar for ''B'' is analogous.&lt;/ref&gt; Their intersection is &lt;math&gt;A \cap B = \{ a^n b^n c^n \mid n \geq 0\}&lt;/math&gt;, which can be shown to be non-context-free by the [[pumping lemma for context-free languages]]. As a consequence, context-free languages cannot be closed under complementation, as for any languages ''A'' and ''B'', their intersection can be expressed by union and complement:  &lt;math&gt;A \cap B = \overline{\overline{A} \cup \overline{B}} &lt;/math&gt;. In particular, context-free language cannot be closed under difference, since complement can be expressed by difference: &lt;math&gt;\overline{L} = \Sigma^* \setminus L&lt;/math&gt;.&lt;ref name=&quot;Scheinberg.1960&quot;&gt;{{cite journal | url=https://core.ac.uk/download/pdf/82210847.pdf | author=Stephen Scheinberg | title=Note on the Boolean Properties of Context Free Languages | journal=Information and Control | volume=3 | number= | pages=372&amp;ndash;375 | month= | year=1960 | doi=10.1016/s0019-9958(60)90965-7}}&lt;/ref&gt; 

However, if ''L'' is a context-free language and ''D'' is a regular language then both their intersection &lt;math&gt;L\cap D&lt;/math&gt; and their difference &lt;math&gt;L\setminus D&lt;/math&gt; are context-free languages.{{cn|date=November 2018}}

===Decidability===
In formal language theory, questions about regular languages are usually decidable, but ones about context-free languages are often not. It is decidable whether such a language is finite, but not whether it contains every possible string, is regular, is unambiguous, or is equivalent to a language with a different grammar.&lt;ref&gt;{{cite book|last=Wolfram|first=Stephen|title=A New Kind of Science|publisher=Wolfram Media, Inc.|year=2002|page=[https://archive.org/details/newkindofscience00wolf/page/1138 1138]|isbn=1-57955-008-8|url-access=registration|url=https://archive.org/details/newkindofscience00wolf/page/1138}}&lt;/ref&gt;

The following problems are [[Undecidable problem|undecidable]] for arbitrarily given [[context-free grammar]]s A and B:
*Equivalence: is &lt;math&gt;L(A)=L(B)&lt;/math&gt;?{{sfn|Hopcroft|Ullman|1979|p=203|loc=Theorem 8.12(1)}}
*Disjointness: is &lt;math&gt;L(A) \cap L(B) = \emptyset &lt;/math&gt; ?{{sfn|Hopcroft|Ullman|1979|p=202|loc=Theorem 8.10}} However, the intersection of a context-free language and a ''regular'' language is context-free,&lt;ref&gt;{{harvtxt|Salomaa|1973}}, p. 59, Theorem 6.7&lt;/ref&gt;{{sfn|Hopcroft|Ullman|1979|p=135|loc=Theorem 6.5}} hence the variant of the problem where ''B'' is a regular grammar is decidable (see &quot;Emptiness&quot; below).
*Containment: is &lt;math&gt;L(A) \subseteq L(B)&lt;/math&gt; ?{{sfn|Hopcroft|Ullman|1979|p=203|loc=Theorem 8.12(2)}} Again, the variant of the problem where ''B'' is a regular grammar is decidable,{{citation needed|date=December 2015}} while that where ''A'' is regular is generally not.{{sfn|Hopcroft|Ullman|1979|p=203|loc=Theorem 8.12(4)}}
*Universality: is &lt;math&gt;L(A)=\Sigma^*&lt;/math&gt; ?{{sfn|Hopcroft|Ullman|1979|p=203|loc=Theorem 8.11}}

The following problems are ''decidable'' for arbitrary context-free languages:
*Emptiness: Given a context-free grammar ''A'', is &lt;math&gt;L(A) = \emptyset&lt;/math&gt; ?{{sfn|Hopcroft|Ullman|1979|p=137|loc=Theorem 6.6(a)}}
*Finiteness: Given a context-free grammar ''A'', is &lt;math&gt;L(A)&lt;/math&gt; finite?{{sfn|Hopcroft|Ullman|1979|p=137|loc=Theorem 6.6(b)}}
*Membership: Given a context-free grammar ''G'', and  a word &lt;math&gt;w&lt;/math&gt;, does &lt;math&gt;w \in L(G)&lt;/math&gt; ? Efficient polynomial-time algorithms for the membership problem are the [[CYK algorithm]] and [[Earley parser|Earley's Algorithm]].

According to Hopcroft, Motwani, Ullman (2003),&lt;ref&gt;{{cite book|author1=John E. Hopcroft |author2=Rajeev Motwani |author3=Jeffrey D. Ullman | title=Introduction to Automata Theory, Languages, and Computation| year=2003| publisher=Addison Wesley}} Here: Sect.7.6, p.304, and Sect.9.7, p.411&lt;/ref&gt; 
many of the fundamental closure and (un)decidability properties of context-free languages were shown in the 1961 paper of [[Yehoshua Bar-Hillel|Bar-Hillel]], Perles, and Shamir&lt;ref name=&quot;Bar-Hillel.Perles.Shamir.1961&quot;&gt;{{cite journal|author1=Yehoshua Bar-Hillel |author2=Micha Asher Perles |author3=Eli Shamir | title=On Formal Properties of Simple Phrase-Structure Grammars| journal=Zeitschrift für Phonetik, Sprachwissenschaft und Kommunikationsforschung| year=1961| volume=14| number=2| pages=143–172}}&lt;/ref&gt;

===Languages that are not context-free===

The set &lt;math&gt;\{a^n b^n c^n d^n | n &gt; 0\}&lt;/math&gt; is a [[context-sensitive language]], but there does not exist a context-free grammar generating this language.{{sfn|Hopcroft|Ullman|1979}} So there exist context-sensitive languages which are not context-free. To prove that a given language is not context-free, one may employ the [[pumping lemma for context-free languages]]&lt;ref name=&quot;Bar-Hillel.Perles.Shamir.1961&quot;/&gt; or a number of other methods, such as [[Ogden's lemma]] or [[Parikh's theorem]].&lt;ref&gt;[https://cs.stackexchange.com/q/265 How to prove that a language is not context-free?]&lt;/ref&gt;

==Notes==
{{Reflist|group=note}}

==References==
{{Reflist}}
{{Refbegin}}
*{{cite book| author = [[Seymour Ginsburg]] | title = The Mathematical Theory of Context-Free Languages | year = 1966 | publisher = McGraw-Hill, Inc. | location = New York, NY, USA}}
*{{cite book
  | last1 = Hopcroft
  | first1 = John E.
  | last2 = Ullman
  | first2 = Jeffrey D.
  | title = Introduction to Automata Theory, Languages, and Computation
  | url = https://archive.org/details/introductiontoau00hopc
  | url-access = registration
  | publisher = Addison-Wesley
  | edition = 1st
  | year = 1979
  | ref = harv
}}
*{{cite book|author=Arto Salomaa|title = Formal Languages|publisher = ACM Monograph Series|year= 1973}}
*{{cite book | author = [[Michael Sipser]] | year = 1997 | title = Introduction to the Theory of Computation | publisher = PWS Publishing | isbn = 0-534-94728-X | url-access = registration | url = https://archive.org/details/introductiontoth00sips }} Chapter 2: Context-Free Languages, pp.&amp;nbsp;91–122.
*Jean-Michel Autebert, Jean Berstel, Luc Boasson, [http://www-igm.univ-mlv.fr/~berstel/Articles/1997CFLPDA.pdf Context-Free Languages and Push-Down Automata], in: G. Rozenberg, A. Salomaa (eds.), Handbook of Formal Languages, Vol. 1, Springer-Verlag, 1997, 111-174.
{{Refend}}

{{Formal languages and grammars}}

[[Category:Formal languages]]
[[Category:Syntax]]</text>
      <sha1>rkxrl27646cwt98h0ifmjypyku1f6pr</sha1>
    </revision>
  </page>
