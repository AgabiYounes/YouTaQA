  <page>
    <title>Computer programming</title>
    <ns>0</ns>
    <id>5311</id>
    <revision>
      <id>943015942</id>
      <parentid>943015830</parentid>
      <timestamp>2020-02-28T09:10:30Z</timestamp>
      <contributor>
        <username>Tea2min</username>
        <id>36029</id>
      </contributor>
      <comment>Undid revision 943015830 by [[Special:Contributions/103.144.48.18|103.144.48.18]] ([[User talk:103.144.48.18|talk]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{short description|Process that leads from an original formulation of a computing problem to executable computer programs}}
[[File:prog_one.png|thumb|right|Example of an internet [[chess]] program, ''[[Lichess]]'', showing [[artificial intelligence]] programming – if the white bishop at b3 moves to a2, capturing the black knight, then the program is designed to find the most advantageous move for black, very likely capturing the bishop with the b1 pawn. Black has just moved a pawn to c2.&lt;!-- Notation: if B×N then b1×B. --&gt;]]

'''Computer programming''' is the process of designing and building an [[executable]] [[computer program]] to accomplish a specific [[computing]] result. '''Programming''' involves tasks such as: analysis, generating [[algorithm]]s, profiling algorithms' accuracy and resource consumption, and the implementation of algorithms in a chosen [[programming language]] (commonly referred to as '''coding''').&lt;ref&gt;{{cite web|url=http://yearofcodes.tumblr.com/what-is-coding|title=What is coding|author=Shaun Bebbington|year=2014|accessdate=2014-03-03}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://yearofcodes.tumblr.com/what-is-programming|title=What is programming|author=Shaun Bebbington|year=2014|accessdate=2014-03-03}}&lt;/ref&gt; The [[source code]] of a program is written in one or more languages that are intelligible to [[programmer]]s, rather than [[machine code]], which is directly executed by the [[central processing unit]]. The purpose of programming is to find a sequence of instructions that will automate the performance of a task (which can be as complex as an [[operating system]]) on a [[computer]], often for solving a given problem. The process of programming thus often requires expertise in several different subjects, including knowledge of the [[Domain (software engineering)|application domain]], specialized algorithms, and formal [[logic]].

Tasks accompanying and related to programming include: [[Software testing|testing]], [[debugging]], [[source code]] maintenance, implementation of [[Build automation|build systems]], and management of derived [[Artifact (software development)|artifacts]], such as the [[machine code]] of computer programs. These might be considered part of the programming process, but often the term ''[[software development]]'' is used for this larger process with the term ''programming'', ''implementation'', or ''coding'' reserved for the actual writing of code. ''[[Software engineering]]'' combines [[engineering]] techniques with software development practices. ''[[Reverse engineering]]'' is the opposite process. A ''[[hacker]]'' is any skilled computer expert that uses their technical knowledge to overcome a problem, but it can also mean a ''[[security hacker]]'' in common language.

==History==
[[File:Ada lovelace.jpg|thumb|[[Ada Lovelace]], whose notes added to the end of [[Luigi Menabrea]]'s paper included the first [[algorithm]] designed for processing by an [[Analytical Engine]]. She is often recognized as history's first computer programmer.]]
{{See also|History of programming languages}}

[[Program (machine)|Programmable devices]] have existed for centuries. As early as the 9th century, a programmable [[music sequencer]] was invented by the Persian [[Banu Musa]] brothers, who described an automated mechanical [[flute]] player in the ''[[Book of Ingenious Devices]]''.&lt;ref name=Koetsier&gt;{{Citation |last1=Koetsier |first1=Teun  |year=2001 |title=On the prehistory of programmable machines: musical automata, looms, calculators |journal=Mechanism and Machine Theory |volume=36 |issue=5 |pages=589–603 |publisher=Elsevier |doi=10.1016/S0094-114X(01)00005-2 |postscript=.}}&lt;/ref&gt;&lt;ref&gt;{{cite journal |last1=Kapur |first1=Ajay |last2=Carnegie |first2=Dale |last3=Murphy |first3=Jim |last4=Long |first4=Jason |title=Loudspeakers Optional: A history of non-loudspeaker-based electroacoustic music |journal=[[Organised Sound]] |date=2017 |volume=22 |issue=2 |pages=195–205 |doi=10.1017/S1355771817000103 |publisher=[[Cambridge University Press]] |issn=1355-7718}}&lt;/ref&gt; In 1206, the Arab engineer [[Al-Jazari]] invented a programmable [[drum machine]] where musical mechanical [[automaton]] could be made to play different rhythms and drum patterns, via pegs and [[cam]]s.&lt;ref&gt;{{Cite journal|title=The Museum of Music: A History of Mechanical Instruments|first=Charles B.|last=Fowler|journal=Music Educators Journal|volume=54|issue=2|date=October 1967|pages=45–49|doi=10.2307/3391092|jstor=3391092|postscript=&lt;!--None--&gt;}}&lt;/ref&gt;&lt;ref name=Sharkey&gt;[[Noel Sharkey]] (2007), [https://web.archive.org/web/20070629182810/http://www.shef.ac.uk/marcoms/eview/articles58/robot.html A 13th Century Programmable Robot], [[University of Sheffield]]&lt;/ref&gt; In 1801, the [[Jacquard loom]] could produce entirely different weaves by changing the &quot;program&quot; – a series of [[Card stock|pasteboard]] cards with holes punched in them.

[[Code-breaking]] algorithms have also existed for centuries. In the 9th century, the [[Mathematics in medieval Islam|Arab mathematician]] [[Al-Kindi]] described a [[cryptographic]] algorithm for deciphering encrypted code, in ''A Manuscript On Deciphering Cryptographic Messages''. He gave the first description of [[cryptanalysis]] by [[frequency analysis]], the earliest code-breaking algorithm.&lt;ref&gt;{{cite book |last1=Dooley |first1=John F. |title=A Brief History of Cryptology and Cryptographic Algorithms |date=2013 |publisher=Springer Science &amp; Business Media |isbn=9783319016283 |pages=12–3}}&lt;/ref&gt;

The first [[computer program]] is generally dated to 1843, when mathematician [[Ada Lovelace]] published an [[algorithm]] to calculate a sequence of [[Bernoulli numbers]], intended to be carried out by [[Charles Babbage]]'s [[Analytical Engine]].&lt;ref name=&quot;IEEE&quot;&gt;{{Cite journal | last1 = Fuegi | first1 = J. | last2 = Francis | first2 = J. | title = Lovelace &amp; Babbage and the Creation of the 1843 'notes' | journal = IEEE Annals of the History of Computing | volume = 25 | issue = 4 | pages = 16 | year = 2003 | doi = 10.1109/MAHC.2003.1253887}}&lt;/ref&gt;

[[File:PunchCardDecks.agr.jpg|thumb|Data and instructions were once stored on external [[punched card]]s, which were kept in order and arranged in program decks.]]
In the 1880s [[Herman Hollerith]] invented the concept of storing ''data'' in machine-readable form.&lt;ref&gt;{{cite web|url=http://www.columbia.edu/acis/history/hollerith.html |title=Columbia University Computing History – Herman Hollerith |publisher=Columbia.edu |accessdate=2010-04-25}}&lt;/ref&gt; Later a [[plugboard|control panel]] (plugboard) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, [[unit record equipment]] such as the [[IBM 602]] and [[IBM 604]], were programmed by control panels in a similar way; as were the first [[electronic computer]]s. However, with the concept of the [[stored-program computer]]s introduced in 1949, both programs and data were stored and manipulated in the same way in [[computer memory]].{{Citation needed|date=December 2018}}

[[Machine code]] was the language of early programs, written in the [[instruction set]] of the particular machine, often in [[binary numeral system|binary]] notation. [[Assembly language]]s were soon developed that let the programmer specify instruction in a text format, (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses. However, because an assembly language is little more than a different notation for a machine language, any two machines with [[Comparison of instruction set architectures|different instruction sets]] also have different assembly languages.

[[File:IBM402plugboard.Shrigley.wireside.jpg|thumb|Wired control panel for an [[IBM 402 Accounting Machine]].]]
[[High-level language]]s made the process of developing a program simpler and more understandable, and less bound to the underlying hardware. [[FORTRAN]], the first widely used high-level language to have a functional implementation, came out in 1957&lt;ref&gt;{{cite web|author=|url=http://www.nbcnews.com/id/17704662 |title=Fortran creator John Backus dies - Tech and gadgets- NBC News |publisher=NBC News |date=2007-03-20 |accessdate=2010-04-25}}&lt;/ref&gt; and many other languages were soon developed – in particular, [[COBOL]] aimed at commercial data processing, and [[Lisp (programming language)|Lisp]] for computer research.

Programs were mostly still entered using punched cards or [[paper tape]]. See [[computer programming in the punch card era]]. By the late 1960s, [[data storage devices]] and [[computer terminals]] became inexpensive enough that programs could be created by typing directly into the computers. [[Text editors]] (programs themselves) were developed that allowed changes and corrections to be made much more easily than with punched cards.

==Modern programming==
{{more citations needed section|date=August 2010}}

===Quality requirements===
{{software development process}}

Whatever the approach to development may be, the final program must satisfy some fundamental properties. The following properties are among the most important:
*[[Reliability engineering#Software reliability|Reliability]]: how often the results of a program are correct. This depends on conceptual correctness of algorithms, and minimization of programming mistakes, such as mistakes in resource management (e.g., [[buffer overflow]]s and [[race condition]]s) and logic errors (such as division by zero or [[off-by-one error]]s).
*[[Robustness (computer science)|Robustness]]: how well a program anticipates problems due to errors (not bugs). This includes situations such as incorrect, inappropriate or corrupt data, unavailability of needed resources such as memory, operating system services and network connections, user error, and unexpected power outages.
*[[Usability]]: the [[ergonomics]] of a program: the ease with which a person can use the program for its intended purpose or in some cases even unanticipated purposes. Such issues can make or break its success even regardless of other issues. This involves a wide range of textual, graphical and sometimes hardware elements that improve the clarity, intuitiveness, cohesiveness and completeness of a program's user interface.
*[[Software portability|Portability]]: the range of [[computer hardware]] and [[operating system]] platforms on which the source code of a program can be [[compiled]]/[[interpreter (computing)|interpreted]] and run. This depends on differences in the programming facilities provided by the different platforms, including hardware and operating system resources, expected behavior of the hardware and operating system, and availability of platform specific compilers (and sometimes libraries) for the language of the source code.
*[[Maintainability]]: the ease with which a program can be modified by its present or future developers in order to make improvements or customisations, fix [[Software bug|bugs]] and [[Vulnerability (computing)|security holes]], or adapt it to new environments. Good practices during initial development make the difference in this regard. This quality may not be directly apparent to the end user but it can significantly affect the fate of a program over the long term.
*[[Algorithmic efficiency|Efficiency]]/[[performance engineering|performance]]: Measure of system resources a program consumes (processor time, memory space, slow devices such as disks, network bandwidth and to some extent even user interaction): the less, the better. This also includes careful management of resources, for example cleaning up [[temporary file]]s and eliminating [[memory leak]]s.

===Readability of source code===
In computer programming, [[readability]] refers to the ease with which a human reader can comprehend the purpose, [[control flow]], and operation of source code. It affects the aspects of quality above, including portability, usability and most importantly maintainability.

Readability is important because programmers spend the majority of their time reading, trying to understand and modifying existing source code, rather than writing new source code. Unreadable code often leads to bugs, inefficiencies, and [[Code duplication|duplicated code]]. A study&lt;ref&gt;{{cite journal|doi=10.1145/358589.358596|title=Improving computer program readability to aid modification|journal=Communications of the ACM|volume=25|issue=8|pages=512–521|year=1982|last1=Elshoff|first1=James L.|last2=Marcotty|first2=Michael}}&lt;/ref&gt; found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.

Following a consistent [[programming style]] often helps readability. However, readability is more than just programming style. Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.&lt;ref&gt;{{cite web | url=http://docforge.com/wiki/Readability | title=Readability | author=Multiple (wiki) | work=Docforge | accessdate=2010-01-30 }}&lt;/ref&gt; Some of these factors include:
*Different [[indent style]]s (whitespace)
*[[Comment (computer programming)|Comments]]
*[[decomposition (computer science)|Decomposition]]
*[[Naming conventions (programming)|Naming conventions]] for objects (such as variables, classes, procedures, etc.)

The [[separation of presentation and content|presentation]] aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the [[source code editor]], but the content aspects reflect the programmer's talent and skills.

Various [[visual programming language]]s have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display. [[Integrated development environment]]s (IDEs) aim to integrate all such help. Techniques like [[Code refactoring]] can enhance readability.

===Algorithmic complexity===
The academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problem. For this purpose, algorithms are classified into ''orders'' using so-called [[Big O notation]], which expresses resource use, such as execution time or memory consumption, in terms of the size of an input. Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.

====Chess algorithms as an example====
&quot;Programming a Computer for Playing Chess&quot; was a 1950 paper that evaluated a &quot;minimax&quot; [[algorithm]] that is part of the history of algorithmic complexity; a course on IBM's [[Deep Blue (chess computer)]] is part of the computer science curriculum at [[Stanford University]].&lt;ref&gt;{{cite web
|title=CS221 |url=http://stanford.edu/~cpiech/cs221/apps/deepBlue.html
|quote=In 1950, Claude Shannon published ... &quot;Programming a Computer for Playing Chess&quot;, ... &quot;minimax&quot; algorithm}}&lt;/ref&gt;

===Methodologies===
The first step in most formal software development processes is [[requirements analysis]], followed by testing to determine value modeling, implementation, and failure elimination (debugging). There exist a lot of differing approaches for each of those tasks. One approach popular for requirements analysis is [[Use Case]] analysis. Many programmers use forms of [[Agile software development]] where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years. There are many approaches to the Software development process.

Popular modeling techniques include Object-Oriented Analysis and Design ([[OOAD]]) and Model-Driven Architecture ([[Model-Driven Architecture|MDA]]). The Unified Modeling Language ([[Unified Modeling Language|UML]]) is a notation used for both the OOAD and MDA.

A similar technique used for database design is Entity-Relationship Modeling ([[Entity-Relationship Model|ER Modeling]]).

Implementation techniques include imperative languages ([[Object-oriented programming|object-oriented]] or [[procedural programming|procedural]]), [[functional programming|functional languages]], and [[logic programming|logic languages]].

===Measuring language usage===
{{Main|Measuring programming language popularity}}
It is very difficult to determine what are the most popular of modern programming languages. Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language,&lt;ref&gt;[http://www.computerweekly.com/Articles/2007/09/11/226631/sslcomputer-weekly-it-salary-survey-finance-boom-drives-it-job.htm Survey of Job advertisements mentioning a given language]&lt;/ref&gt; the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).

Some languages are very popular for particular kinds of applications, while some languages are regularly used to write many different kinds of applications. For example, [[COBOL]] is still strong in corporate data centers&lt;ref&gt;{{cite web|last1=Mitchell|first1=Robert|title=The Cobol Brain Drain|url=http://www.computerworld.com/article/2504568/data-center/the-cobol-brain-drain.html|publisher=Computer World|accessdate=9 May 2015|date=2012-05-21}}&lt;/ref&gt; often on large [[mainframe computer]]s, [[Fortran]] in engineering applications, [[scripting language]]s in [[World Wide Web|Web]] development, and [[C (programming language)|C]] in [[embedded software]]. Many applications use a mix of several languages in their construction and use.  New languages are generally designed around the syntax of a prior language with new functionality added, (for example [[C++]] adds object-orientation to C, and [[Java (programming language)|Java]] adds memory management and [[bytecode]] to C++, but as a result, loses efficiency and the ability for low-level manipulation).

===Debugging===
[[File:H96566k.jpg|thumb|The [[Software bug|bug]] from 1947 which is at the origin of a popular etymology for the common term for a software defect.]]
{{main|Debugging}}
Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users. Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages. Use of a [[static code analysis]] tool can help detect some possible problems. Normally the first step in debugging is to attempt to reproduce the problem. This can be a non-trivial task, for example as with parallel processes or some unusual software bugs. Also, specific user environment and usage history can make it difficult to reproduce the problem.

After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug. For example, a bug in a compiler can make it crash when passing some large source file. However, after simplification of the test case, only few lines from the original source file can be sufficient to reproduce the same crash. Such simplification can be done manually, using a divide-and-conquer approach. The programmer will try to remove some parts of original test case and check if the problem still exists. When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.

Debugging is often done with [[Integrated development environment|IDE]]s like [[Eclipse (software)|Eclipse]], [[Visual Studio]], [[Xcode]], [[Kdevelop]], [[NetBeans]] and [[Code::Blocks]]. Standalone debuggers like [[GDB]] are also used, and these often provide less of a visual environment, usually using a [[command line]]. Some text editors such as [[Emacs]] allow GDB to be invoked through them, to provide a visual environment.

==Programming languages==
{{Main|Programming language|List of programming languages}}

Different programming languages support different styles of programming (called ''[[programming paradigm]]s''). The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference. Ideally, the programming language best suited for the task at hand will be selected. Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute. Languages form an approximate spectrum from &quot;low-level&quot; to &quot;high-level&quot;; &quot;low-level&quot; languages are typically more machine-oriented and faster to execute, whereas &quot;high-level&quot; languages are more abstract and easier to use but execute less quickly. It is usually easier to code in &quot;high-level&quot; languages than in &quot;low-level&quot; ones.

[[Allen Downey]], in his book ''How To Think Like A Computer Scientist'', writes:

:The details look different in different languages, but a few basic instructions appear in just about every language:
:*Input: Gather data from the keyboard, a file, or some other device.
:*Output: Display data on the screen or send data to a file or other device.
:*Arithmetic: Perform basic arithmetical operations like addition and multiplication.
:*Conditional Execution: Check for certain conditions and execute the appropriate sequence of statements.
:*Repetition: Perform some action repeatedly, usually with some variation.

Many computer languages provide a mechanism to call functions provided by [[shared library|shared libraries]]. Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing [[argument (computer science)|arguments]]), then these functions may be written in any other language.

==Programmers==
{{Main|Programmer}}
{{See also|Software developer|Software engineer}}

Computer programmers are those who write computer software. Their jobs usually involve:
{{div col|colwidth=30em}}
*Coding
*Debugging
*[[Documentation]]
*[[System integration|Integration]]
*[[Software maintenance|Maintenance]]
*Requirements analysis
*[[Software architecture]]
*Software testing
*[[Specification]]
{{div col end}}

==See also==
{{Portal|Computer programming}}
{{Main|Outline of computer programming}}
{{div col|colwidth=20em}}
*[[ACCU (organisation)|ACCU]]
*[[Association for Computing Machinery]]
*[[Computer network]]ing
*[[Hello world program]]
*[[Institution of Analysts and Programmers]]
*[[National Coding Week]]
*[[System programming]]
*[[Computer programming in the punched card era]]
*''[[The Art of Computer Programming]]''
*[[Women in computing]]
*[[Timeline of women in computing]]
{{div col end}}

==References==
{{reflist|30em}}

=== Sources ===
* {{Cite book|url=https://archive.org/details/historyofmodernc00ceru|title=History of Computing|last=Ceruzzi|first=Paul E.|publisher=MIT Press|year=1998|isbn=9780262032551|location=Cambridge, Massachusetts|pages=|ref=harv|url-access=registration|via=EBSCOhost}}
*{{Cite book|url=https://books.google.com/books?id=C8ouDwAAQBAJ&amp;pg=PP1&amp;dq=9780735211759#v=onepage&amp;q=9780735211759|title=Broad Band: The Untold Story of the Women Who Made the Internet|last=Evans|first=Claire L.|publisher=Portfolio/Penguin|year=2018|isbn=9780735211759|location=New York|pages=|ref=harv}}
*{{Cite journal|last=Gürer|first=Denise|date=1995|title=Pioneering Women in Computer Science|url=https://courses.cs.washington.edu/courses/csep590/06au/readings/p175-gurer.pdf|journal=Communications of the ACM|volume=38|issue=1|pages=45–54|ref=harv|via=|doi=10.1145/204865.204875}}
*{{Cite journal|last=Smith|first=Erika E.|date=2013|title=Recognizing a Collective Inheritance through the History of Women in Computing|url=http://search.ebscohost.com/login.aspx?direct=true&amp;db=lfh&amp;AN=90670848&amp;site=ehost-live|journal=CLCWeb: Comparative Literature &amp; Culture: A WWWeb Journal|volume=15|issue=1|pages=1–9|ref=harv|via=EBSCOhost|url-access=subscription }}

==Further reading==
* A.K. Hartmann, ''[https://web.archive.org/web/20090211113048/http://worldscibooks.com/physics/6988.html Practical Guide to Computer Simulations]'', Singapore: [[World Scientific]] (2009)
* A. Hunt, D. Thomas, and W. Cunningham, ''The Pragmatic Programmer. From Journeyman to Master'', Amsterdam: Addison-Wesley Longman (1999)
* Brian W. Kernighan, ''The Practice of Programming'', Pearson (1999)
* [[Gerald Weinberg|Weinberg, Gerald M.]], ''The Psychology of Computer Programming'', New York: Van Nostrand Reinhold (1971)
* [[Edsger W. Dijkstra]], ''A Discipline of Programming'', Prentice-Hall (1976)
* O.-J. Dahl, [[Edsger W. Dijkstra|E.W.Dijkstra]], C.A.R. Hoare, ''Structured Programming'', Academic Press (1972)
* [[David Gries]], ''The Science of Programming'', Springer-Verlag (1981)

==External links==
{{Library resources box|onlinebooks=yes}}
{{Wikibooks|Computer Programming}}
{{Wikibooks|Windows Programming}}
{{Wikiversity|Computer Programming}}
*{{Commons category-inline|Computer programming}}
*{{Wikiquote-inline|Programming}}
&lt;!--Please see this URL before adding external links here: http://meta.wikimedia.org/wiki/When_should_I_link_externally--&gt;
* {{curlie|Computers/Software/Software_Engineering/|Software engineering}}

{{Computer science}}
{{Software engineering}}
{{Authority control}}

{{DEFAULTSORT:Computer Programming}}
[[Category:Computer programming| ]]
[[Category:Computers|Programming]]</text>
      <sha1>5pgai8tiv41frs79st3z8ccg46gab10</sha1>
    </revision>
  </page>
