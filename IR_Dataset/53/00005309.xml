  <page>
    <title>Software</title>
    <ns>0</ns>
    <id>5309</id>
    <revision>
      <id>937921610</id>
      <parentid>937921325</parentid>
      <timestamp>2020-01-28T01:18:10Z</timestamp>
      <contributor>
        <username>Kore's Cosmaupia</username>
        <id>37542802</id>
      </contributor>
      <comment>/* See also */This is a minor edit.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{distinguish-otheruses2|Softwear|Software}}
{{pp-protected|small=yes}}
{{short description|Non-tangible executable component of a computer}}
[[File:Operating system placement (software).svg|thumb|upright|A diagram showing how the [[User (computing)|user]] interacts with [[application software]] on a typical [[desktop computer]]. The application software layer interfaces with the [[operating system]], which in turn communicates with the [[Personal computer hardware|hardware]]. The arrows indicate information flow.]]

'''Computer software''', or simply '''software''', is a collection of [[data (computing)|data]] or [[computer]] instructions that tell the computer how to work. This is in contrast to [[Computer hardware|physical hardware]], from which the system is built and actually performs the work. In [[computer science]] and [[software engineering]], computer software is all [[information]] processed by [[computer system]]s, [[Computer program|program]]s and [[data]]. Computer software includes [[computer program]]s, [[Library (computing)|libraries]] and related non-executable [[Data (computing)|data]], such as [[Software documentation|online documentation]] or [[digital media]]. Computer hardware and software require each other and neither can be realistically used on its own.

At the lowest programming level,{{Clarify|reason=What 'level' means can be unclear to non-technical readers|date=August 2018}} [[executable code]] consists of [[Machine code|machine language]] instructions supported by an individual [[Microprocessor|processor]]—typically a [[central processing unit]] (CPU) or a [[graphics processing unit]] (GPU). A machine language consists of groups of [[Binary number|binary values]] signifying [[Instruction set architecture|processor instructions]] that change the state of the computer from its preceding state. For example, an instruction may change the value stored in a particular storage location in the computer—an effect that is not directly observable to the user. An instruction [[System call|may also invoke]] one of many [[Input/output|input or output operations]], for example displaying some text on a computer screen; causing state changes which should be visible to the [[User (computing)|user]]. The processor [[Instruction cycle|executes]] the instructions in the order they are provided, unless it is instructed to [[branch instruction|&quot;jump&quot; to a different instruction]], or is [[interrupt]]ed by the operating system. {{As of|2015}}, most [[personal computer]]s, [[smartphone]] devices and [[Server (computing)|servers]] have [[Multi-core processor|processors with multiple execution units]] or [[Multiprocessing|multiple processors performing computation]] together, and computing has become a much more [[Concurrent computing|concurrent]] activity than in the past.

The majority of software is written in [[high-level programming language]]s. They are easier and more efficient for programmers because they are closer to [[natural language]]s than machine languages.&lt;ref&gt;{{cite web|title=Compiler construction|url=http://www.cs.uu.nl/education/vak.php?vak=INFOMCCO|url-status=live|archiveurl=https://web.archive.org/web/20131102143144/http://www.cs.uu.nl/education/vak.php?vak=INFOMCCO|archivedate=2 November 2013|df=dmy-all}}&lt;/ref&gt; High-level languages are translated into machine language using a [[compiler]] or an [[Interpreter (computing)|interpreter]] or a combination of the two. Software may also be written in a low-level [[assembly language]], which has strong correspondence to the computer's machine language instructions and is translated into machine language using an [[Assembly language|assembler]].

==History==
{{Main|History of software}}
An outline ([[algorithm]]) for what would have been the first piece of software was written by [[Ada Lovelace]] in the 19th century, for the planned [[Analytical Engine]].{{Sfn|Evans|2018|p=21}} She created [[Mathematical proof|proofs]] to show how the engine would calculate [[Bernoulli number|Bernoulli Numbers]].{{Sfn|Evans|2018|p=21}} Because of the proofs and the algorithm, she is considered the first computer programmer.&lt;ref name=&quot;Annals of the History of Computing&quot;&gt;{{cite journal|last=Fuegi|first=J.|last2=Francis|first2=J.|date=2003|title=Lovelace &amp; Babbage and the creation of the 1843 'notes'|journal=Annals of the History of Computing|volume=25|issue=4|pages=16–26|doi=10.1109/MAHC.2003.1253887}}&lt;/ref&gt;&lt;ref name=&quot;Lovelace Google&quot;&gt;{{Cite news|url=https://www.theguardian.com/technology/2012/dec/10/ada-lovelace-honoured-google-doodle|title=Ada Lovelace honoured by Google doodle|last=|first=|date=December 10, 2012|newspaper=The Guardian|accessdate=25 November 2018}}&lt;/ref&gt;

The first theory about software—prior to the creation of computers as we know them today—was proposed by [[Alan Turing]] in his 1935 essay ''On Computable Numbers, with an Application to the Entscheidungsproblem'' (decision problem).

This eventually led to the creation of the academic fields of [[computer science]] and [[software engineering]]; Both fields study software and its creation. Computer science is the theoretical study of computer and software (Turing's essay is an example of computer science), whereas software engineering is the application of engineering and development of software.

However, prior to 1946, software was not yet the programs stored in the memory of stored-program digital computers, as we now understand it. The first electronic computing devices were instead rewired in order to &quot;reprogram&quot; them.

In 2000, Fred Shapiro, a librarian at the Yale Law School, published a letter revealing that [[John Wilder Tukey]]'s 1958 paper &quot;The Teaching of Concrete Mathematics&quot;&lt;ref name=&quot;Tukey_1958&quot;/&gt;&lt;ref name=&quot;Beebe_2017&quot;/&gt; contained the earliest known usage of the term &quot;software&quot; found in a search of [[JSTOR]]'s electronic archives, predating the [[OED]]'s citation by two years.&lt;ref name=&quot;Shapiro_2000&quot;/&gt; This led many to credit Tukey with coining the term, particularly in obituaries published that same year,&lt;ref name=&quot;Leonhardt_2000&quot;/&gt; although Tukey never claimed credit for any such coinage. In 1995, Paul Niquette claimed he had originally coined the term in October 1953, although he could not find any documents supporting his claim.&lt;ref name=&quot;Niquette_2006&quot;/&gt; The earliest known publication of the term &quot;software&quot; in an engineering context was in August 1953 by Richard R. Carhart, in a [[Rand Corporation]] Research Memorandum.&lt;ref name=&quot;Carhart_1953&quot;/&gt;

==Types==
{{See also|Software categories}}
[[File:BgeCarSc.jpg|thumb|250px|[[Blender Game Engine]], a [[free software]].]]

On virtually all computer platforms, software can be grouped into a few broad categories.

===Purpose, or domain of use===
{{Ecommerce}}
Based on the goal, computer software can be divided into:

* '''[[Application software]]''' &lt;br /&gt; which is software that uses the computer system to perform special functions or provide [[video game|entertainment functions]] beyond the basic operation of the computer itself. There are many different types of application software, because the range of tasks that can be performed with a modern computer is so large—see [[list of software]].
* '''[[System software]]''' &lt;br /&gt; which is software for managing '''[[computer hardware]]''' behaviour, as to provide basic functionalities that are required by users, or for other software to run properly, if at all. System software is also designed for providing a platform for running application software,&lt;ref&gt;{{cite web|url=http://home.olemiss.edu/~misbook/sfsysfm.htm|title=System Software|publisher=The University of Mississippi|archive-url=https://web.archive.org/web/20010530092843/http://home.olemiss.edu/~misbook/sfsysfm.htm|archive-date=30 May 2001|url-status=dead|df=dmy-all}}&lt;/ref&gt; and it includes the following:
**'''[[Operating system]]s''' &lt;br /&gt; which are essential collections of software that manage resources and provide common services for other software that runs &quot;on top&quot; of them. [[Supervisory program]]s, [[boot loader]]s, [[shell (computing)|shells]] and [[window system]]s are core parts of operating systems. In practice, an operating system comes bundled with additional software (including application software) so that a user can potentially do some work with a computer that only has one operating system.
** '''[[Device driver]]s''' &lt;br /&gt; which operate or control a particular type of device that is attached to a computer. Each device needs at least one corresponding device driver; because a computer typically has at minimum at least one input device and at least one output device, a computer typically needs more than one device driver.
** '''[[Software utility|Utilities]]''' &lt;br /&gt; which are computer [[Control Panel (Windows)|programs]] designed to assist users in the maintenance and care of their computers.
* '''[[Malicious software]]''' or '''malware''' &lt;br /&gt; which is software that is developed to harm and disrupt computers. As such, malware is undesirable. Malware is closely associated with computer-related crimes, though some malicious programs may have been designed as [[practical joke]]s.

===Nature or domain of execution===
* [[Desktop applications]] such as [[web browser]]s and [[Microsoft Office]], as well as [[smartphone]] and [[Tablet computer|tablet]] applications (called &quot;[[mobile app|apps]]&quot;). (There is a push in some parts of the software industry to merge desktop applications with mobile apps, to some extent. [[Windows 8]], and later [[Ubuntu Touch]], tried to allow the same style of application user interface to be used on desktops, laptops and mobiles.)
* [[JavaScript]] scripts are pieces of software traditionally embedded in [[web page]]s that are run directly inside the [[web browser]] when a web page is loaded without the need for a web browser plugin. Software written in other programming languages can also be run within the web browser if the software is either translated into JavaScript, or if a web browser plugin that supports that language is installed; the most common example of the latter is [[ActionScript]] scripts, which are supported by the [[Adobe Flash]] plugin.
* [[Server software]], including:
** [[Web application]]s, which usually run on the [[web server]] and output dynamically generated web pages to web browsers, using e.g. [[PHP]], [[Java (programming language)|Java]], [[ASP.NET]], or even [[Node.js|JavaScript that runs on the server]]. In modern times these commonly include some JavaScript to be run in the web browser as well, in which case they typically run partly on the server, partly in the web browser.
* [[Plug-in (computing)|Plugins]] and extensions are software that extends or modifies the functionality of another piece of software, and require that software be used in order to function;
* [[Embedded software]] resides as [[firmware]] within [[embedded system]]s, devices dedicated to a single use or a few uses such as [[car]]s and [[television]]s (although some embedded devices such as wireless chipsets can ''themselves'' be part of an ordinary, non-embedded computer system such as a PC or smartphone).&lt;ref&gt;{{cite web|title=Embedded Software—Technologies and Trends|url=http://www.computer.org/csdl/mags/so/2009/03/mso2009030014.html|publisher=IEEE Computer Society|date=May–June 2009|accessdate=6 November 2013|url-status=live|archiveurl=https://web.archive.org/web/20131028045823/http://www.computer.org/csdl/mags/so/2009/03/mso2009030014.html|archivedate=28 October 2013|df=dmy-all}}&lt;/ref&gt; In the embedded system context there is sometimes no clear distinction between the system software and the application software. However, some embedded systems run [[embedded operating system]]s, and these systems do retain the distinction between system software and application software (although typically there will only be one, fixed application which is always run).
* [[Microcode]] is a special, relatively obscure type of embedded software which tells the processor ''itself'' how to execute machine code, so it is actually a lower level than machine code. It is typically proprietary to the processor manufacturer, and any necessary correctional microcode software updates are supplied by them to users (which is much cheaper than shipping replacement processor hardware). Thus an ordinary programmer would not expect to ever have to deal with it.

===Programming tools===
{{Main|Programming tool}}
Programming tools are also software in the form of programs or applications that [[software developer]]s (also known as
''programmers, coders, hackers'' or ''software engineers'') use to create, [[Debugging|debug]], [[Software maintenance|maintain]] (i.e. improve or fix), or otherwise [[Technical support|support]] software.

Software is written in one or more programming languages; there are many programming languages in existence, and each has at least one implementation, each of which consists of its own set of programming tools. These tools may be relatively self-contained programs such as [[compiler]]s, [[debugger]]s, [[interpreter (computing)|interpreters]], [[linker (computing)|linkers]], and [[text editor]]s, that can be combined together to accomplish a task; or they may form an [[integrated development environment]] (IDE), which combines much or all of the functionality of such self-contained tools. IDEs may do this by either invoking the relevant individual tools or by re-implementing their functionality in a new way. An IDE can make it easier to do specific tasks, such as searching in files in a particular project. Many programming language implementations provide the option of using both individual tools or an IDE.

==Topics==
===Architecture===
{{See also|Software architecture}}
Users often see things differently from programmers. People who use modern general purpose computers (as opposed to [[embedded system]]s, [[analog computer]]s and [[supercomputer]]s) usually see three layers of software performing a variety of tasks: platform, application, and user software.

* '''Platform software''' &lt;br /&gt; The [[Platform (computing)|Platform]] includes the [[firmware]], [[device driver]]s, an [[operating system]], and typically a [[graphical user interface]] which, in total, allow a user to interact with the computer and its [[peripheral]]s (associated equipment). Platform software often comes bundled with the computer. On a [[Personal computer|PC]] one will usually have the ability to change the platform software.
* '''Application software''' &lt;br /&gt; [[Application software]] or Applications are what most people think of when they think of software. Typical examples include office suites and video games. [[Application software]] is often purchased separately from computer hardware. Sometimes applications are bundled with the computer, but that does not change the fact that they run as independent applications. Applications are usually independent programs from the operating system, though they are often tailored for specific platforms. Most users think of compilers, databases, and other &quot;system software&quot; as applications.
* '''User-written software''' &lt;br /&gt; [[End-user development]] tailors systems to meet users' specific needs. User software includes spreadsheet templates and [[word processor]] templates. Even email filters are a kind of user software. Users create this software themselves and often overlook how important it is. Depending on how competently the user-written software has been integrated into default application packages, many users may not be aware of the distinction between the original packages, and what has been added by co-workers.

===Execution===
{{Main|Execution (computing)}}
Computer software has to be &quot;loaded&quot; into the [[computer storage|computer's storage]] (such as the [[hard drive]] or [[Computer memory|memory]]). Once the software has loaded, the computer is able to ''execute'' the software. This involves passing [[instruction set architecture|instructions]] from the [[application software]], through the system software, to the hardware which ultimately receives the instruction as [[machine code]]. Each instruction causes the computer to carry out an operation—moving [[data (computing)|data]], carrying out a [[computation]], or altering the [[control flow]] of instructions.

Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. Moving data, especially large amounts of it, can be costly. So, this is sometimes avoided by using &quot;pointers&quot; to data instead. Computations include simple operations such as incrementing the value of a variable data element. More complex computations may involve many operations and data elements together.&lt;!-- This section is simply too long for this article and needs to be compressed into the intro above, or moved to the article itself.

Instructions may be performed sequentially, conditionally, or iteratively. Sequential instructions are those operations that are performed one after another. Conditional instructions are performed such that different sets of instructions execute depending on the value(s) of some data. In some languages this is known as an &quot;if&quot; statement. Iterative instructions are performed repetitively and may depend on some data value. This is sometimes called a &quot;loop.&quot; Often, one instruction may &quot;call&quot; another set of instructions that are defined in some other program or [[modular programming|module]]. When more than one computer processor is used, instructions may be executed simultaneously.

A simple example of the way software operates is what happens when a user selects an entry such as &quot;Copy&quot; from a menu. In this case, a conditional instruction is executed to copy text from data in a 'document' area residing in memory, perhaps to an intermediate storage area known as a 'clipboard' data area. If a different menu entry such as &quot;Paste&quot; is chosen, the software may execute the instructions to copy the text from the clipboard data area to a specific location in the same or another document in memory.

Depending on the application, even the example above could become complicated. The field of software engineering endeavors to manage the complexity of how software operates. This is especially true for software that operates in the context of a large or powerful [[computer system]].

Currently, almost the only limitations on the use of computer software in applications is the ingenuity of the designer/programmer. Consequently, large areas of activities (such as playing grand master-level chess) formerly assumed to be incapable of software simulation are now routinely programmed. The only area that has so far proved reasonably secure from software simulation is the realm of human art— especially, pleasing music and literature.{{Citation needed|date=June 2007}}

Kinds of software by operation: [[computer program]] as [[executable]], [[source code]] or [[scripting language|script]], [[computer configuration|configuration]].--&gt;

===Quality and reliability===
{{Main|Software quality|Software testing}}
Software quality is very important, especially for [[commercial software|commercial]] and system software like [[Microsoft Office]], [[Microsoft Windows]] and [[Linux]]. If software is faulty (buggy), it can delete a person's work, crash the computer and do other unexpected things. Faults and errors are called &quot;[[Software bug|bugs]]&quot; which are often discovered during alpha and beta testing. Software is often also a victim to what is known as [[software aging]], the progressive performance degradation resulting from a combination of unseen bugs.

Many bugs are discovered and eliminated (debugged) through [[software testing]]. However, software testing rarely—if ever—eliminates every bug; some programmers say that &quot;every program has at least one more bug&quot; (Lubarsky's Law).&lt;ref name=&quot;github&quot;&gt;{{cite web | url=https://github.com/mark-watson/scripting-intelligence-book-examples/blob/master/part1/wikipedia_text/software.txt | title=scripting intelligence book examples | url-status=live | archiveurl=https://web.archive.org/web/20151106154317/https://github.com/mark-watson/scripting-intelligence-book-examples/blob/master/part1/wikipedia_text/software.txt | archivedate=6 November 2015 | df=dmy-all | date=2018-05-09 }}&lt;/ref&gt; In the [[Waterfall model|waterfall]] method of software development, separate testing teams are typically employed, but in newer approaches, collectively termed [[agile software development]], developers often do all their own testing, and demonstrate the software to users/clients regularly to obtain feedback. Software can be tested through [[unit testing]], [[regression testing]] and other methods, which are done manually, or most commonly, automatically, since the amount of code to be tested can be quite large. For instance, [[NASA]] has extremely rigorous software testing procedures for many operating systems and communication functions. Many NASA-based operations interact and identify each other through command programs. This enables many people who work at NASA to check and evaluate functional systems overall. Programs containing command software enable hardware engineering and system operations to function much easier together.

===License===
{{Main|Software license}}
The software's license gives the user the right to use the software in the licensed environment, and in the case of [[free software license]]s, also grants other rights such as the right to make copies.

[[Proprietary software]] can be divided into two types:

* [[freeware]], which includes the category of &quot;free trial&quot; software or &quot;[[freemium]]&quot; software (in the past, the term [[shareware]] was often used for free trial/freemium software). As the name suggests, freeware can be used for free, although in the case of free trials or freemium software, this is sometimes only true for a limited period of time or with limited functionality.
* software available for a fee, often inaccurately termed &quot;[[commercial software]]&quot;, which can only be legally used on purchase of a license.

[[Open-source software]], on the other hand, comes with a [[free software license]], granting the recipient the rights to modify and redistribute the software.

===Patents===
{{Main|Software patent|Software patent debate}}
Software patents, like other types of patents, are theoretically supposed to give an inventor an exclusive, time-limited license for a ''detailed idea (e.g. an algorithm) on how to implement'' a piece of software, or a component of a piece of software. Ideas for useful things that software could ''do'', and user ''requirements'', are not supposed to be patentable, and concrete implementations (i.e. the actual software packages implementing the patent) are not supposed to be patentable either—the latter are already covered by copyright, generally automatically. So software patents are supposed to cover the middle area, between requirements and concrete implementation. In some countries, a requirement for the claimed invention to have an effect on the physical world may also be part of the requirements for a software patent to be held valid—although since ''all'' useful software has effects on the physical world, this requirement may be open to debate. Meanwhile, American copyright law was applied to various aspects of the writing of the software code.&lt;ref&gt;Gerardo Con Díaz, &quot;The Text in the Machine: American Copyright Law and the Many Natures of Software, 1974–1978,” ''Technology and Culture'' 57 (October 2016), 753–79.&lt;/ref&gt;

Software patents are controversial in the software industry with many people holding different views about them. One of the sources of controversy is that the aforementioned split between initial ideas and patent does not seem to be honored in practice by patent lawyers—for example the patent for [[Aspect-Oriented Programming]] (AOP), which purported to claim rights over ''any'' programming tool implementing the idea of AOP, howsoever implemented. Another source of controversy is the effect on innovation, with many distinguished experts and companies arguing that software is such a fast-moving field that software patents merely create vast additional litigation costs and risks, and actually retard innovation. In the case of debates about software patents outside the United States, the argument has been made that large American corporations and patent lawyers are likely to be the primary beneficiaries of allowing or continue to allow software patents.

==Design and implementation==
{{Main|Software development|Computer programming|Software engineering}}
Design and implementation of software varies depending on the complexity of the software. For instance, the design and creation of [[Microsoft Word]] took much more time than designing and developing [[Microsoft Notepad]] because the latter has much more basic functionality.

Software is usually designed and created (aka coded/written/programmed) in [[integrated development environment]]s (IDE) like [[Eclipse (software)|Eclipse]], [[IntelliJ IDEA|IntelliJ]] and [[Microsoft Visual Studio]] that can simplify the process and [[compiler|compile]] the software (if applicable). As noted in a different section, software is usually created on top of existing software and the [[application programming interface]] (API) that the underlying software provides like [[GTK+]], JavaBeans or [[Swing (Java)|Swing]]. Libraries (APIs) can be categorized by their purpose. For instance, the [[Spring Framework]] is used for implementing [[enterprise application]]s, the [[Windows Forms]] library is used for designing graphical user interface (GUI) applications like [[Microsoft Word]], and [[Windows Communication Foundation]] is used for designing [[web service]]s. When a program is designed, it relies upon the API. For instance, a Microsoft Windows desktop application might call API functions in the [[.NET Framework|.NET]] Windows Forms library like ''Form1.Close()'' and ''Form1.Show()''&lt;ref&gt;{{cite web |url=http://msdn.microsoft.com/en-us/library/default.aspx |title=MSDN Library |accessdate=2010-06-14 |url-status=live |archiveurl=https://web.archive.org/web/20100611204810/http://msdn.microsoft.com/en-us/library/default.aspx |archivedate=11 June 2010 |df=dmy-all }}&lt;/ref&gt; to close or open the application. Without these APIs, the programmer needs to write these functionalities entirely themselves. Companies like [[Oracle Corporation|Oracle]] and [[Microsoft]] provide their own APIs so that many applications are written using their [[Library (computing)|software libraries]] that usually have numerous APIs in them.

[[Data structure]]s such as [[hash table]]s, [[array data type|arrays]], and [[binary tree]]s, and [[algorithm]]s such as [[quicksort]], can be useful for creating software.

Computer software has special economic characteristics that make its design, creation, and distribution different from most other economic goods.{{Specify|Which characteristics?|date=May 2012}}&lt;ref&gt;{{cite journal |author=v. Engelhardt, Sebastian |year=2008 |url=https://ideas.repec.org/p/jrp/jrpwrp/2008-045.html |title=The Economic Properties of Software |journal=Jena Economic Research Papers |volume=2 |issue=2008–045 |url-status=live |archiveurl=https://web.archive.org/web/20160105145954/https://ideas.repec.org/p/jrp/jrpwrp/2008-045.html |archivedate=5 January 2016 |df=dmy-all }}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=http://dankaminsky.com/1999/03/02/69/ |title=Why Open Source Is The Optimum Economic Paradigm for Software |first=Dan |last=Kaminsky |year=1999 |url-status=live |archiveurl=https://web.archive.org/web/20120522001231/http://dankaminsky.com/1999/03/02/69/ |archivedate=22 May 2012 |df=dmy-all }}&lt;/ref&gt;

A person who creates software is called a [[programmer]], [[software engineer]] or software developer, terms that all have a similar meaning. More informal terms for programmer also exist such as &quot;coder&quot; and &quot;'''hacker'''&quot;{{Spaced ndash}}although use of the latter word may cause confusion, because it is more often used to mean [[Security hacker|someone who illegally breaks into computer systems]].

==Industry and organizations==
{{Main|Software industry}}
A great variety of software companies and programmers in the world comprise a software industry. Software can be quite a profitable industry: [[Bill Gates]], the co-founder of [[Microsoft]] was the richest person in the world in 2009, largely due to his ownership of a significant number of shares in Microsoft, the company responsible for [[Microsoft Windows]] and [[Microsoft Office]] software products - both market leaders in their respective product categories.

Non-profit software organizations include the [[Free Software Foundation]], [[GNU Project]] and the [[Mozilla Foundation]]. Software standard organizations like the [[W3C]], [[IETF]] develop recommended software standards such as [[XML]], [[HTTP]] and [[HTML]], so that software can interoperate through these standards.

Other well-known large software companies include [[Google]], [[IBM]], [[Tata Consultancy Services|TCS]], [[Infosys]], [[Wipro]], [[HCL Technologies]], [[Oracle Corporation|Oracle]], [[Novell]], [[SAP AG|SAP]], [[NortonLifeLock|Symantec]], [[Adobe Systems]], [[Sidetrade]] and [[Corel]], while small companies often provide innovation.

==See also==
* [[Software release life cycle]]
* [[Independent software vendor]]
* [[Outline of software]]
* [[Software asset management]]
* [[Open-source software]]
{{Portal bar|Free and open-source software}}

==References==
{{reflist|refs=
&lt;ref name=&quot;Carhart_1953&quot;&gt;{{cite book |author-last=Carhart |author-first=Richard |title=A survey of the current status of the electronic reliability problem |date=1953 |publisher=[[Rand Corporation]] |location=Santa Monica, CA |page=69 |url=https://www.rand.org/content/dam/rand/pubs/research_memoranda/2013/RM1131.pdf#79 |access-date= |quote=[…] It will be recalled from Sec. 1.6 that the term ''personnel'' was defined to include people who come into direct contact with the hardware, from production to field use, i.e., people who assemble, inspect, pack, ship, handle, install, operate, and maintain electronic equipment. In any of these phases personnel failures may result in unoperational gear. As with the hardware factors, there is almost no quantitative data concerning these software or human factors in reliability: How many faults are caused by personnel, why they occur, and what can be done to remove the errors. […]}}&lt;/ref&gt;
&lt;ref name=&quot;Tukey_1958&quot;&gt;{{cite journal |author-first=John Wilder |author-last=Tukey |author-link=John Wilder Tukey |title=The Teaching of Concrete Mathematics |journal=[[American Mathematical Monthly]] |publisher=[[Taylor &amp; Francis, Ltd.]] / [[Mathematical Association of America]] |volume=65 |issue=1 |pages=1–9, 2 |date=January 1958 |id={{CODEN|AMMYAE}} |issn=0002-9890 |doi=10.2307/2310294 |quote=[…] Today the &quot;software&quot; comprising the carefully planned interpretive routines, compilers, and other aspects of automative programming are at least as important to the modern electronic calculator as its &quot;hardware&quot; of tubes, transistors, wires, tapes, and the like. […]|jstor=2310294 }}&lt;/ref&gt;
&lt;ref name=&quot;Niquette_2006&quot;&gt;{{citation |author-last=Niquette |author-first=R. Paul |date=2006 |title=Softword: Provenance for the Word 'Software |isbn=1-58922-233-4 |url=http://www.niquette.com/books/softword/tocsoft.html |access-date=2019-08-18 |url-status=live |archive-url=https://web.archive.org/web/20190808124650/http://www.niquette.com/books/softword/tocsoft.html |archive-date=2019-08-08}}&lt;/ref&gt;
&lt;ref name=&quot;Shapiro_2000&quot;&gt;{{cite journal |author-last=Shapiro |author-first=Fred |date=2000 |title=Origin of the Term Software: Evidence from the JSTOR Electronic Journal Archive |journal=[[IEEE Annals of the History of Computing]] |volume=22 |issue=2 |pages=69–71 |doi=10.1109/mahc.2000.887997 |url=http://computer.org/annals/an2000/pdf/a2069.pdf |access-date=2013-06-25 |url-status=dead |archive-url=https://web.archive.org/web/20030605004419/http://computer.org/annals/an2000/pdf/a2069.pdf |archive-date=2003-06-05}}&lt;/ref&gt;
&lt;ref name=&quot;Leonhardt_2000&quot;&gt;{{cite news |title=John Tukey, 85, Statistician; Coined the Word 'Software' |author-last=Leonhardt |author-first=David |newspaper=[[The New York Times]] |date=2000-07-28 |url=https://www.nytimes.com/2000/07/28/us/john-tukey-85-statistician-coined-the-word-software.html |access-date=2012-09-24}}&lt;/ref&gt;
&lt;ref name=&quot;Beebe_2017&quot;&gt;{{cite book |author-first=Nelson H. F. |author-last=Beebe |title=The Mathematical-Function Computation Handbook - Programming Using the MathCW Portable Software Library |chapter=Chapter I - Integer arithmetic |date=2017-08-22 |location=Salt Lake City, UT, USA |publisher=[[Springer International Publishing AG]] |edition=1 |lccn=2017947446 |isbn=978-3-319-64109-6 |doi=10.1007/978-3-319-64110-2 |pages=969, 1035}}&lt;/ref&gt;
}}

===Sources===
*{{Cite book|url=https://books.google.com/books?id=C8ouDwAAQBAJ&amp;lpg=PP1&amp;dq=9780735211759&amp;pg=PP1#v=onepage&amp;q=9780735211759&amp;f=false|title=Broad Band: The Untold Story of the Women Who Made the Internet|last=Evans|first=Claire L.|publisher=Portfolio/Penguin|year=2018|isbn=9780735211759|location=New York|pages=|ref=harv}}

==External links==
{{Sister project links | wikt=software | commons=Special:Search/Software | b= | n= | s= | v=Computer Software | voy= |q=no}}
* {{curlie|Computers/Software}}&lt;!--ref name=&quot;github&quot;/--&gt;

{{Software digital distribution platforms|state=collapsed}}
{{Authority control}}
{{Use dmy dates|date=May 2017}}

[[Category:Computer science]]
[[Category:Software| ]]
[[Category:Mathematical and quantitative methods (economics)]]</text>
      <sha1>bglqeb4nnbjq8ayb9nt3esb4ccribrb</sha1>
    </revision>
  </page>
