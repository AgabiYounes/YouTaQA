  <page>
    <title>Control unit</title>
    <ns>0</ns>
    <id>6557</id>
    <revision>
      <id>938039642</id>
      <parentid>938037941</parentid>
      <timestamp>2020-01-28T19:36:44Z</timestamp>
      <contributor>
        <username>Ray Van De Walker</username>
        <id>1578</id>
      </contributor>
      <minor />
      <comment>/* Control units for low-powered computers */  spelling</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{About|the component of a computer's CPU}}

The '''control unit''' (CU) is a component of a computer's [[central processing unit]] (CPU) that directs the operation of the processor. It tells the computer's memory, arithmetic and logic unit and input and output devices how to respond to the instructions that have been sent to the processor.&lt;ref&gt;{{Cite book  | last1 = Patterson | first1 = David | last2 = Hennessy | first2 = John | title = Computer Organization and Design: The Hardware/Software Interface, 4th ed., revised | year = 2011 | publisher = Morgan Kaufmann | isbn = 978-0-12-374750-1 | pages =  }}&lt;/ref&gt;

It directs the operation of the other units by providing timing and control signals.
Most computer resources are managed by the CU. It directs the flow of data between the CPU and the other devices. [[John von Neumann]] included the control unit as part of the [[von Neumann architecture]].&lt;ref&gt;{{Citation|last1=von Neumann |first1=John |title=First Draft of a Report on the EDVAC |year=1945 |publisher=Moore School of Electrical Engineering, University of Pennsylvania |url=http://qss.stanford.edu/~godfrey/vonNeumann/vnedvac.pdf |url-status=dead |archiveurl=https://web.archive.org/web/20130314123032/http://qss.stanford.edu/~godfrey/vonNeumann/vnedvac.pdf |archivedate=March 14, 2013 }}&lt;/ref&gt; In modern computer designs, the control unit is typically an internal part of the [[Central processing unit|CPU]]&lt;!-- or other device that directs its operation--&gt; with its overall role and operation unchanged since its introduction.&lt;ref&gt;{{cite web|url=https://www.geeksforgeeks.org/computer-organization-control-unit-and-design/|title=Computer Organization - Control Unit and design|website=GeeksforGeeks|author=Astha Singh|accessdate=25 May 2019}}&lt;/ref&gt;

== Multicycle control units ==

The simplest computers use a [[Microarchitecture#Multicycle microarchitecture | multicycle microarchitecture]]. These were the earliest designs. They are still popular in the very smallest computers, such as the [[embedded system]]s that operate machinery.

In a multicycle computer, the control unit often steps through the [[Von neumann architecture | Von Neumann Cycle]]: Fetch the instruction, Fetch the operands, do the instruction, write the results.  When the next instruction is placed in the control unit, it changes the behavior of the control unit to finish the instruction correctly. So, the bits of the instruction directly control the control unit, which in turn controls the computer.

The control unit may include a binary counter to tell the control unit's logic what step it should do.

Multicycle control units typically use both the rising and falling edges of their square-wave timing clock. They operate a step of their operation on each edge of the timing clock, so that a four-step operation completes in two clock cycles.

Many computers have two different types of unexpected events. An [[interrupt]] occurs because some type of input or output needs software attention in order to operate correctly. An [[exception handling | exception]] is caused by the computer's operation. One crucial difference is that the timing of an interrupt cannot be predicted. Another is that some exceptions (e.g. a memory-not-available exception) can be caused by an instruction that needs to be restarted.

Control units can be designed to handle interrupts in one of two typical ways. If a quick response is most important, a control unit is designed to abandon work to handle the interrupt. In this case, the work in process will be restarted after the last completed instruction. If the computer is to be very inexpensive, very simple, very reliable, or to get more work done, the control unit will finish the work in process before handling the interrupt. Finishing the work is inexpensive, because it needs no register to record the last finished instruction. It is simple and reliable because it has the least number of states. It also wastes the least amount of work.

Exceptions can be made to operate like interrupts in very simple computers. If [[virtual memory]] is required, then a memory-not-available exception must retry the failing instruction.

It is common for multicycle computers to use more cycles. Sometimes it takes longer to take a conditional jump, because the program counter has to be reloaded. Sometimes they do multiplication or division instructions by a process something like binary long multiplication and division. Very small computers might do arithmetic one or a few bits at a time. Some computers have very complex instructions that take many steps.

== Pipelined control units ==

Many medium-complexity computers [[Microarchitecture#Instruction pipelining | pipeline instructions]]. This design is popular because of its economy and speed.

In a pipelined computer, instructions flow through the computer. This design has several stages. For example, it might have one stage for each step of the Von Neumann cycle. A pipelined computer usually has &quot;pipeline registers&quot; after each stage. These store the bits calculated by a stage so that the logic gates of the next stage can use the bits to do the next step. It is common for even numbered stages to operate on one edge of the square-wave clock, while odd-numbered stages operate on the other edge.

In a pipelined computer, the control unit arranges for the flow to start, continue, and stop as a program commands. The instruction data is usually passed in pipeline registers from one stage to the next, with a somewhat separated piece of control logic for each stage. The control unit also assures that the instruction in each stage does not harm the operation of instructions in other stages.  For example, if two stages must use the same piece of data, the control logic assures that the uses are done in the correct sequence.

When operating efficiently, a pipelined computer will have an instruction in each stage. It is then working on all of those instructions at the same time. It can finish about one instruction for each cycle of its clock. When a program makes a decision, and switches to a different sequence of instructions, the pipeline sometimes must discard the data in process and restart. This is called a &quot;stall.&quot; When two instructions could interfere, sometimes the control unit must stop processing a later instruction until an earlier instruction completes. This is called a &quot;pipeline bubble&quot; because a part of the pipeline is not processing instructions. Pipeline bubbles can occur when two instructions operate on the same register.

Interrupts and unexpected exceptions also stall the pipeline. If a pipelined computer abandons work for an interrupt, more work is lost than in a multicycle computer.  Predictable exceptions do not need to stall. For example, if an exception instruction is used to enter the operating system, it does not cause a stall.

Speed? For the same speed of electronic logic, it can do more instructions per second than a multicycle computer. Also, even though the electronic logic has a fixed maximum speed, a pipelined computer can be made faster or slower by varying the number of stages in the pipeline. With more stages, each stage does less work, and so the stage has fewer delays from the [[logic gate]]s. 

Economy? A pipelined model of a computer often has the least logic gates per instruction per second, less than either a multicycle or out-of-order computer.  Why? The average stage is less complex than a multicycle computer. An out of order computer usually has large amounts of idle logic at any given instant. Similar calculations usually show that a pipelined computer uses less energy per instruction.

However, a pipelined computer is usually more complex and more costly than a comparable multicycle computer. It typically has more logic gates, registers and a more complex control unit. In a like way, it might use more total energy, while using less energy per instruction. Out of order CPUs can usually do more instructions per second because they can do several instructions at once.

== Preventing stalls ==

Control units use many methods to keep a pipeline full and avoid stalls. For example, even simple control units can assume that a backwards branch, to a lower-numbered, earlier instruction, is a loop, and will be repeated.&lt;ref name=riscv&gt;{{cite book |last1=Asanovic |first1=Krste |title=The RISC V Instruction Set Manual |date=2017 |publisher=RISC-V Foundation |location=Berkeley |edition=2.2 |url=https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf}}&lt;/ref&gt; So, a control unit with this design will always fill the pipeline with the backwards branch path. If a [[compiler]] can detect the most frequently-taken direction of a branch, the compiler can just produce instructions so that the most frequently taken branch is the preferred direction of branch. In a like way, a control unit might get hints from the compiler: Some computers have instructions that can encode hints from the compiler about the direction of branch.&lt;ref&gt;{{cite book |title=Power ISA(tm) |date=2017 |publisher=IBM |location=Austin |edition=3.0B |url=https://ibm.ent.box.com/s/1hzcwkwf8rbju5h9iyf44wm94amnlcrv |accessdate=26 December 2019}}&lt;/ref&gt;

Some control units do [[Branch predictor | branch prediction]]: A control unit keeps an electronic list of the recent branches, encoded by the address of the branch instruction.&lt;ref name=riscv /&gt; This list has a few bits for each branch to remember the direction that was taken most recently.

Some control units can do [[speculative execution]], in which a computer might have two or more pipelines, calculate both directions of a branch,then discard the calculations of the unused direction.

Results from memory can become available at unpredictable times because very fast computers [[cache memory]]. That is, they copy limited amounts of memory data into very fast memory. The CPU must be designed to process at the very fast speed of the cache memory. Therefore, the CPU might stall when it must access main memory directly. In modern PCs, main memory is as much as three hundred times slower than cache.

To help this, out-of-order CPUs and control units were developed to process data as it becomes available. (See next section)

But what if all the calculations are complete, but the CPU is still stalled, waiting for main memory? Then, a control unit can switch to an [[Simultaneous multithreading | alternative thread of execution]] whose data has been fetched while the thread was idle. A thread has its own program counter, a stream of instructions and a separate set of registers. Designers vary the number of threads depending on current memory technologies and the type of computer. Typical computers such as PCs and smart phones usually have control units with a few threads, just enough to keep busy with affordable memory systems. Database computers often have about twice as many threads, to keep their much larger memories busy. Graphic processing units (GPUs) usually have hundreds or thousands of threads, because they have hundreds or thousands of execution units doing repetitive graphic calculations.

When a control unit permits threads, the [[Thread (computing) | software also has to be designed to handle them]]. In general-purpose CPUs like PCs and smartphones, the threads are usually made to look very like normal time-sliced processes. At most, the operating system might need some awareness of them. In GPUs, the thread scheduling usually cannot be hidden from the application software, and is often controlled with a specialized subroutine library.

== Out of order control units ==

A control unit can be designed to [[Microarchitecture#Out-of-order execution | finish what it can]]. If several instructions can be completed at the same time, the control unit will arrange it. So, the fastest computers can process instructions in a sequence that can vary somewhat, depending on when the operands or instruction destinations become available. Most supercomputers and many PC CPUs use this method. The exact organization of this type of control unit depends on the slowest part of the computer.

When the execution of calculations is the slowest, instructions flow from memory into pieces of electronics called &quot;issue units.&quot; An issue unit holds an instruction until both its operands and an execution unit are available. Then, the instruction and its operands are &quot;issued&quot; to an execution unit. The execution unit does the instruction. Then the resulting data is moved into a queue of data to be written back to memory or registers. If the computer has multiple execution units, it can usually do several instructions per clock cycle.

It is common to have specialized execution units. For example, a modestly priced computer might have only one floating-point execution unit, because floating point units are expensive. The same computer might have several integer units, because these are relatively inexpensive, and can do the bulk of instructions.
 
One kind of control unit for issuing uses an array of electronic logic, a &quot;scoreboard&quot;&lt;ref&gt;{{cite book |last1=Thornton |first1=J.E. |title=Design of a Computer: The CDC 6600 |date=1970 |publisher=Scott, Foreman and Co. |location=Atlanta |page=125}}&lt;/ref&gt; that detects when an instruction can be issued. The &quot;height&quot; of the array is the number of execution units, and the length and width are the possible sources of operands. When all the items come together, the signals from the operands and execution unit will cross. The logic at this intersection detects that the instruction can work, so the instruction is &quot;issued&quot; to the free execution unit. An alternative style of issuing control unit implements the [[Tomasulo algorithm]], which reorders a hardware queue of instructions. In some sense, both styles utilize a queue. The scoreboard is an alternative way to encode and reorder a queue of instructions, and some designers call it a queue table.&lt;ref name=&quot;leighton&quot;&gt;{{cite web |last1=Leighton |first1=Luke |title=Libre RISC-V M-Class |url=https://www.crowdsupply.com/libre-risc-v/m-class/updates/modernising-1960s-computer-technology-learning-from-the-cdc-6600 |website=Crowd Supply |accessdate=16 January 2020}}&lt;/ref&gt;&lt;ref name=&quot;rv5via6600&quot;&gt;{{cite web |last1=Alsup |first1=Mitch |last2=Leighton |first2=Luke |last3=Zaruba |first3=Florian |last4=Thornton |first4=James |last5=Kimmitt |first5=Jonathon |last6=Petrisko |first6=Dan |last7=Takano |first7=S. |last8=Falvo |first8=Samuel |title=RISC-V HW Dev, 6600-style out-of-order scoreboard |url=https://groups.google.com/a/groups.riscv.org/forum/#!msg/hw-dev/b4pPvlzBzu0/7hDfxArEAgAJ |website=Google Groups |publisher=RISC-V Foundation |accessdate=16 January 2020}}&lt;/ref&gt;

With some additional logic, a scoreboard can compactly combine execution reordering, register renaming and precise exceptions and interrupts. Further it can do this without the power-hungry, complex content-addressable memory used by the Tomasulo algorithm.&lt;ref name=&quot;leighton&quot; /&gt;&lt;ref name=&quot;rv5via6600&quot; /&gt;

If the execution is slower than writing the results, the memory write-back queue always has free entries. But what if the memory writes slowly? Or what if the destination register will be used by an &quot;earlier&quot; instruction that has not yet issued? Then the write-back step of the instruction might need to be scheduled. This is sometimes called &quot;retiring&quot; an instruction. In this case, there must be scheduling logic on the back end of execution units. It schedules access to the registers or memory that will get the results.&lt;ref name=&quot;leighton&quot; /&gt;&lt;ref name=&quot;rv5via6600&quot; /&gt;

Retiring logic can also be designed into an issuing scoreboard or a Tomasulo queue, by including memory or register access in the issuing logic.&lt;ref name=&quot;leighton&quot; /&gt;&lt;ref name=&quot;rv5via6600&quot; /&gt;

Out of order controllers require special design features to handle interrupts. When there are several instructions in progress, it is not clear where in the instruction stream an interrupt occurs. For input and output interrupts, almost any solution works. However when a computer has virtual memory, an interrupt occurs to indicate that a memory access failed. This memory access must be associated with an exact instruction and an exact processor state, so that the processor's state can be saved and restored by the interrupt. A usual solution preserves copies of registers until a memory access completes.&lt;ref name=&quot;leighton&quot; /&gt;&lt;ref name=&quot;rv5via6600&quot; /&gt;

Also, out of order CPUs have even more problems with stalls from branching, because they can complete several instructions per clock cycle, and usually have many instructions in various stages of progress. So, these control units might use all of the solutions used by pipelined processors.&lt;ref name=&quot;rv5boomreuse&quot;&gt;{{cite web |last1=Celio |first1=Chris |title=BOOM Docs, Rocketship SOC Generator |url=https://docs.boom-core.org/en/latest/sections/intro-overview/rocket-chip.html |accessdate=16 January 2020}}&lt;/ref&gt;

== Translating control units ==

Some computers translate each single instruction into a sequence of simpler instructions. The advantage is that an out of order computer can be simpler in the bulk of its logic, while handling complex multi-step instructions. [[x86]] Intel CPUs since the [[Pentium Pro]] translate complex CISC x86 instructions to more RISC-like internal micro-operations.

In these, the &quot;front&quot; of the control unit manages the translation of instructions. Operands are not translated. The &quot;back&quot; of the CU is an out-of-order CPU that issues the micro-operations and operands to the execution units and data paths.

== Control units for low-powered computers ==

Many modern computers have controls that minimize power usage. In battery-powered computers, such as those in cell-phones, the advantage is longer battery life. In computers with utility power, the justification is to reduce the cost of power, cooling or noise.

Most modern computers use [[CMOS]] logic. CMOS wastes power in two common ways: By changing state, i.e. &quot;active power,&quot; and by unintended leakage.  The active power of a computer can be reduced by turning off control signals. Leakage current can be reduced by reducing the electrical pressure, the voltage, making the transistors with larger depletion regions or turning off the logic completely.

Active power is easier to reduce because data stored in the logic is not affected. The usual method reduces the CPU's clock rate. Most computer systems use this method. It's common for a CPU to idle during the transition to avoid side-effects from the changing clock.

Most computers also have a &quot;halt&quot; instruction. This was invented to stop non-interrupt code so that interrupt code has reliable timing. However, designers soon noticed that a halt instruction was also a good time to turn off a CPU's clock completely, reducing the CPU's active power to zero. The interrupt controller might continue to need a clock, but that usually uses much less power than the CPU.

These methods are relatively easy to design, and became so common that others were invented for commercial advantage. Many modern low-power CMOS CPUs stop and start specialized execution units and bus interfaces depending on the needed instruction. Some computers&lt;ref&gt;{{cite book |title=Introduction to MAXQ Architecture |publisher=Maxim Integrated Inc. |location=Dallas |url=https://www.maximintegrated.com/en/design/technical-documents/app-notes/3/3222.html |accessdate=26 December 2019}}&lt;/ref&gt; even arrange the CPU's microarchitecture to use transfer-triggered multiplexers so that each instruction only utilises the exact pieces of logic needed.

Theoretically, computers at lower clock speeds could also reduce leakage by reducing the voltage of the power supply. This affects the reliability of the computer in many ways, so the engineering is expensive, and it is uncommon except in relatively expensive computers such as PCs or cellphones.

Some designs can use very low leakage transistors, but these usually add cost. The depletion barriers of the transistors can be made larger to have less leakage, but this makes the transistor larger and thus both slower and more expensive. Some vendors use this technique in selected portions of an IC by constructing low leakage logic from large transistors that some processes provide for analog circuits. Some processes place the transistors above the surface of the silicon, in &quot;fin fets&quot;, but these processes have more steps, so are more expensive. Special transistor doping materials (e.g. hafnium) can also reduce leakage, but this adds steps to the processing, making it more expensive. Some semiconductors have a larger band-gap than silicon. However, these materials and processes are currently (2020) more expensive than silicon.

Managing leakage is more difficult, because before the logic can be turned-off, the data in it must be moved to some type of low-leakage storage. 

One common method is to spread the load to many CPUs, and turn off unused CPUs as the load reduces. The operating system's task switching logic saves the CPUs' data to memory. In some cases,&lt;ref&gt;{{cite book |title=ARM Technical Reference, Cortex |publisher=ARM Ltd |edition=v8}}&lt;/ref&gt; one of the CPUs can be simpler and smaller, literally with fewer logic gates. So, it has low leakage, and it is the last to be turned off, and the first to be turned on. Also it then is the only CPU that requires special low-power features. A similar method is used in most PCs, which usually have an auxiliary embedded CPU that manages the power system. However in PCs, the software is usually in the BIOS, not the operating system.

Some CPUs&lt;ref name=&quot;armv6&quot;&gt;{{cite book |title=The ARM(tm) Technical Reference Manual |publisher=ARM Ltd. |location=Cambridge |edition=v6, r0}}&lt;/ref&gt; make use of a special type of flip-flop (to store a bit) that couples a fast, high-leakage storage cell to a slow, large (expensive) low-leakage cell. These two cells have separated power supplies. When the CPU enters a power saving mode (e.g. because of a halt that waits for an interrupt), data is transferred to the low-leakage cells, and the others are turned off.  When the CPU leaves a low-leakage mode (e.g. because of an interrupt), the process is reversed. 

Older designs would copy the CPU state to memory, or even disk, sometimes with specialized software. Very simple embedded systems sometimes just restart.

== Integrating with the Computer ==

All modern CPUs have control logic to attach the CPU to the rest of the computer. In modern computers, this is usually a bus controller. When an instruction reads or writes memory, the control unit either controls the bus directly, or controls a bus controller. Many modern computers use the same bus interface for memory, input and output. This is called &quot;memory-mapped I/O&quot;. To a programmer, the registers of the I/O devices appear as numbers at specific memory addresses. [[x86]] PCs use an older method, a separate I/O bus accessed by I/O instructions.

A modern CPU also tends to include an [[interrupt]] controller. It handles interrupt signals from the system bus. The control unit is the part of the computer that responds to the interrupts.

There is often a cache controller to [[cache memory]]. The cache controller and the associated cache memory is often the largest physical part of a modern, higher-performance CPU. When the memory, bus or cache is shared with other CPUs, the control logic must communicate with them to assure that no computer ever gets out-of-date old data.

Many historic computers built some type of input and output directly into the control unit. For example, many historic computers had a front panel with switches and lights directly controlled by the control unit. These let a programmer directly enter a program and debug it. In later production computers, the most common use of a front panel was to a enter a small bootstrap program to read the operating system from disk. This was annoying. So, front panels were replaced by [[BIOS | bootstrap program]]s in read-only memory.

Most [[PDP-8]] models had a data bus designed to let I/O devices borrow the control unit's memory read and write logic.&lt;ref&gt;{{cite book |title=PDP-8L Maintenance Manual |date=1970 |publisher=Digital Equipment Corp. |location=Maynard Mass. |url=http://bitsavers.trailing-edge.com/pdf/dec/pdp8/pdp8l/DEC-8L-HR1B-D_8LmaintVol1.pdf |accessdate=26 December 2019}}&lt;/ref&gt; This reduced the complexity and expense of high speed I/O controllers, e.g. for disk.

The [[Xerox Alto]] had a multitasking microprogammable control unit that performed almost all I/O.&lt;ref&gt;{{cite book |title=Alto Hardware Manual |date=1976 |publisher=Xerox |url=http://bitsavers.informatik.uni-stuttgart.de/pdf/xerox/alto/Alto_Hardware_Manual_Aug76.pdf}}&lt;/ref&gt; This design provided most of the features of a modern PC with only a tiny fraction of the electronic logic. The dual-thread computer was run by the two lowest-priority microthreads. These performed calculations whenever I/O was not required. High priority microthreads provided (in decreasing priority) video, network, disk, a periodic timer, mouse, and keyboard. The microprogram did the complex logic of the I/O device, as well as the logic to integrate the device with the computer. For the actual hardware I/O, the microprogram read and wrote shift registers for most I/O, sometimes with resistor networks and transistors to shift output voltage levels (e.g. for video). To handle outside events, the microcontroller had microinterrupts to switch threads at the end of a thread's cycle, e.g. at the end of an instruction, or after a shift-register was accessed. The microprogram could be rewritten and reinstalled, which was very useful for a research computer.

== Functions of the control unit ==

Thus a program of instructions in memory will cause the CU to configure a CPU's data flows to manipulate the data correctly between instructions. This results in a computer that could run a complete program and require no human intervention to make hardware changes between instructions (as had to be done when using only [[Plugboard#Unit record equipment|punch cards]] for computations before stored programmed computers with CUs were invented).

== Hardwired control unit ==&lt;!-- Front end processor redirects here --&gt;
'''Hardwired control units''' are implemented through use of [[combinational logic]] units, featuring a finite number of gates that can generate specific results based on the instructions that were used to invoke those responses. Hardwired control units are generally faster than the microprogrammed designs.&lt;ref&gt;{{Cite web|url=http://www.cs.binghamton.edu/~reckert/hardwire3new.html|title=MICRO-PROGRAMMED VERSUS HARDWIRED CONTROL UNITS;|website=www.cs.binghamton.edu|access-date=2017-02-17|url-status=live|archiveurl=https://web.archive.org/web/20170430162916/http://www.cs.binghamton.edu/~reckert/hardwire3new.html|archivedate=2017-04-30}}&lt;/ref&gt;

This design uses a fixed architecture&amp;mdash;it requires changes in the wiring if the [[instruction set]] is modified or changed. It can be convienient for simple, fast computers.

A controller that uses this approach can operate at high speed; however, it has little flexibility. A complex instruction set can overwhelm a designer who uses ad-hoc logic design.

The hardwired approach has become less popular as computers have evolved. Previously, control units for CPUs used ad-hoc logic, and they were difficult to design.&lt;ref&gt;{{Cite journal |last=Williams |first=R. D. |last2=Klenke |first2=R. H. |last3=Aylor |first3=J. H. |date=May 2003 |title=Teaching computer design using virtual prototyping |journal=IEEE Transactions on Education |volume=46 |issue=2 |pages=296–301 |doi=10.1109/te.2002.808278 |issn=0018-9359 }}&lt;/ref&gt;

[https://www.slideshare.net/mobile/prithvisharma9083/computer-architecture-42377303]

== Microprogram control unit ==
{{main article|Microcode}}

The idea of microprogramming was introduced by [[Maurice Wilkes]] in 1951 as an intermediate level to execute computer program instructions. Microprograms were organized as a sequence of ''microinstructions'' and stored in special control memory. The algorithm for the microprogram control unit, unlike the hardwired control unit, is usually specified by [[flowchart]] description.&lt;ref&gt;{{Cite book  | last1 = Barkalov | first1 = Alexander | title = Logic synthesis for FSM based control units / Alexander Barkalov and Larysa Titarenko | year = 2009 | publisher = Springer | location = Berlin | isbn = 978-3-642-04308-6 | pages =  }}&lt;/ref&gt; The main advantage of the microprogram control unit is the simplicity of its structure. Outputs of the controller are organized in microinstructions and  they can be easily replaced.&lt;ref&gt;{{Cite book  | last1 = Wiśniewski | first1 = Remigiusz | title = Synthesis of compositional microprogram control units for programmable devices   | year = 2009 | publisher = University of Zielona Góra | location = Zielona Góra | isbn = 978-83-7481-293-1 | pages = 153}}&lt;/ref&gt;

== Combination methods of design ==

A popular variation on microcode is to debug the microcode using a software simulator. Then, the microcode is a table of bits. This is a logical [[truth table]], that translates a microcode address into the control unit outputs.  This truth table can be fed to a computer program that produces optimized electronic logic. The resulting control unit is almost as easy to design as microprogramming, but it has the fast speed and low number of logic elements of a hard wired control unit. The practical result resembles a [[Mealy machine]] or [[Richards controller]].

== See also ==
*[[CPU design]]
*[[Computer architecture]]
*[[Richards controller]]
*[[Controller (computing)]]

== References ==
{{reflist}}

{{CPU technologies}}

{{DEFAULTSORT:Control Unit}}
[[Category:Central processing unit]]
[[Category:Digital electronics]]</text>
      <sha1>1p23c5ipectfi6ujsr5eos1z3zstyu6</sha1>
    </revision>
  </page>
