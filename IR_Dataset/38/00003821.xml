  <page>
    <title>Binary-coded decimal</title>
    <ns>0</ns>
    <id>3821</id>
    <revision>
      <id>939118302</id>
      <parentid>938202488</parentid>
      <timestamp>2020-02-04T13:30:05Z</timestamp>
      <contributor>
        <username>AlexRules646</username>
        <id>37445825</id>
      </contributor>
      <comment>/* EBCDIC zoned decimal conversion table */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve">{{redir|BCD code|BCD character sets|BCD (character encoding)||}}
{{Use dmy dates|date=May 2019|cs1-dates=y}}
[[File:Binary clock.svg|250px|thumbnail|right|A [[binary clock]] might use [[Light-emitting diode|LED]]s to express binary values. In this clock, each column of LEDs shows a binary-coded decimal numeral of the traditional [[sexagesimal]] time.]]

In [[computing]] and [[electronics|electronic]] systems, '''binary-coded decimal''' ('''BCD''') is a class of [[Binary numeral system|binary]] encodings of [[decimal]] numbers where each decimal [[numerical digit|digit]] is represented by a fixed number of [[bit]]s, usually four or eight. Special bit patterns are sometimes used for a [[Sign (mathematics)|sign]] or for other indications (e.g., error or overflow).

In byte-oriented systems (i.e. most modern computers), the term ''unpacked'' BCD&lt;ref name=&quot;Intel_IA32&quot;/&gt; usually implies a full [[byte]] for each digit (often including a sign), whereas ''packed'' BCD typically encodes two decimal digits within a single byte by taking advantage of the fact that four bits are enough to represent the range 0 to 9. The precise 4-bit encoding may vary however, for technical reasons, see [[Excess-3]] for instance. The ten states representing a BCD decimal digit are sometimes called ''tetrades'' (for the [[nibble]] typically needed to hold them also known as [[tetrade (computing)|tetrade]]) with those [[don't care]]-states unused named {{Interlanguage link multi|pseudo-tetrade|de|3=Pseudotetrade|lt=''pseudo-tetrad(e)s''}}&lt;ref name=&quot;Schneider_1986&quot;/&gt;&lt;ref name=&quot;Tafel_1971&quot;/&gt;&lt;ref name=&quot;Steinbuch-Weber_1974&quot;/&gt;&lt;ref name=&quot;Tietze-Schenk_2013&quot;/&gt;&lt;ref name=&quot;Kowalski_1070&quot;/&gt; or ''pseudo-decimal digit''&lt;ref name=&quot;Ferretti_2013&quot;/&gt;&lt;ref name=&quot;Speiser_1965&quot;/&gt;).&lt;ref group=&quot;nb&quot; name=&quot;Pseudo-tetrades&quot;/&gt;

BCD's main virtue is its more accurate representation and rounding of decimal quantities as well as an ease of conversion into human-readable representations, in comparison to binary [[positional system]]s. BCD's principal drawbacks are a small increase in the complexity of the circuits needed to implement basic arithmetic and a slightly less dense storage.

BCD was used in many early [[decimal computer]]s, and is implemented in the instruction set of machines such as the [[IBM System/360]] series and its descendants, [[Digital Equipment Corporation]]'s [[VAX]], the [[Burroughs B1700]], and the Motorola [[68000]]-series processors. Although BCD ''per se'' is not as widely used as in the past and is no longer implemented in newer computers' instruction sets (such as [[ARM architecture|ARM]]; [[x86]] does not support [[Intel BCD opcode|its BCD instruction]]s in [[long mode]] any more), decimal [[Fixed-point arithmetic|fixed-point]] and [[floating-point]] formats are still important and continue to be used in financial, commercial, and industrial computing, where subtle conversion and [[fraction (mathematics)|fractional]] [[rounding]] [[round-off error|errors]] that are inherent in floating point binary representations cannot be tolerated.&lt;ref name=&quot;Cowlishaw_GDA&quot;/&gt;

=={{anchor|Unpacked BCD|NBCD|8-4-2-1}}Basics==
BCD takes advantage of the fact that any one decimal numeral can be represented by a four bit pattern. The most obvious way of encoding digits is &quot;natural BCD&quot; (NBCD), where each decimal digit is represented by its corresponding four-bit binary value, as shown in the following table. This is also called &quot;8421&quot; encoding.
{| class=&quot;wikitable&quot; style=&quot;text-align:center;&quot;
|-
! scope=&quot;col&quot; rowspan=&quot;2&quot; | Decimal digit
! scope=&quot;col&quot; colspan=&quot;4&quot; | BCD
|-
! 8 !! 4 !! 2 !! 1
|-
| 0 || 0 || 0 || 0 || 0
|-
| 1 || 0 || 0 || 0 || 1
|-
| 2 || 0 || 0 || 1 || 0
|-
| 3 || 0 || 0 || 1 || 1
|-
| 4 || 0 || 1 || 0 || 0
|-
| 5 || 0 || 1 || 0 || 1
|-
| 6 || 0 || 1 || 1 || 0
|-
| 7 || 0 || 1 || 1 || 1
|-
| 8 || 1 || 0 || 0 || 0
|-
| 9 || 1 || 0 || 0 || 1
|}

Other encodings are also used, including so-called &quot;4221&quot; and &quot;7421&quot;—named after the weighting used for the bits—and &quot;[[Excess-3]]&quot;.&lt;ref&gt;{{cite book |author-last=Parag K. |author-first=Lala |title=Principles of Modern Digital Design |date=2007 |publisher=[[John Wiley &amp; Sons]] |isbn=978-0-470-07296-7 |pages=20–25 |url=https://books.google.com/books?id=doNGOrHUyCoC&amp;lpg=PA20}}&lt;/ref&gt; For example, the BCD digit 6, '0110'b in 8421 notation, is '1100'b in 4221 (two encodings are possible), '0110'b in 7421, and '1001'b (6+3=9) in excess-3.

As most computers deal with data in 8-bit [[byte]]s, it is possible to use one of the following methods to encode a BCD number:
* '''Unpacked''': Each decimal digit is encoded into one byte, with four bits representing the number and the remaining bits having no significance.
* '''Packed''': Two decimal digits are encoded into a single byte, with one digit in the least significant [[nibble]] ([[Bit_numbering#Most-_vs_least-significant_bit_first|bits 0 through 3]]) and the other numeral in the most significant nibble (bits 4 through 7).

As an example, encoding the decimal number &lt;tt&gt;'''91'''&lt;/tt&gt; using unpacked BCD results in the following binary pattern of two bytes:
 Decimal:          9          1
 Binary :  0000 1001  0000 0001

In packed BCD, the same number would fit into a single byte:
 Decimal:     9    1
 Binary :  1001 0001

Hence the numerical range for one unpacked BCD byte is zero through nine inclusive, whereas the range for one packed BCD byte is zero through ninety-nine inclusive.

To represent numbers larger than the range of a single byte any number of contiguous bytes may be used. For example, to represent the decimal number &lt;tt&gt;'''12345'''&lt;/tt&gt; in packed BCD, using [[big-endian]] format, a program would encode as follows:
  Decimal:     0    1     2    3     4    5
  Binary :  0000 0001  0010 0011  0100 0101

Here, the most significant nibble of the most significant byte has been encoded as zero, so the number is stored as &lt;tt&gt;'''012345'''&lt;/tt&gt; (but formatting routines might replace or remove leading zeros). Packed BCD is more efficient in storage usage than unpacked BCD; encoding the same number (with the leading zero) in unpacked format would consume twice the storage.

[[logical shift|Shifting]] and [[mask (computing)|masking]] operations are used to pack or unpack a packed BCD digit. Other [[bitwise operation]]s are used to convert a numeral to its equivalent bit pattern or reverse the process.

==BCD in electronics==
{{Multiple issues|section=true|{{Refimprove section|date=January 2018}}{{Primary sources|section|date=January 2018}}}}

BCD is very common in electronic systems where a numeric value is to be displayed, especially in systems consisting solely of digital logic, and not containing a microprocessor. By employing BCD, the manipulation of numerical data for display can be greatly simplified by treating each digit as a separate single sub-circuit. This matches much more closely the physical reality of display hardware—a designer might choose to use a series of separate identical [[seven-segment display]]s to build a metering circuit, for example. If the numeric quantity were stored and manipulated as pure binary, interfacing to such a display would require complex circuitry. Therefore, in cases where the calculations are relatively simple, working throughout with BCD can lead to a simpler overall system than converting to and from binary. Most pocket calculators do all their calculations in BCD.

The same argument applies when hardware of this type uses an embedded microcontroller or other small processor. Often, smaller code results when representing numbers internally in BCD format, since a conversion from or to binary representation can be expensive on such limited processors. For these applications, some small processors feature BCD arithmetic modes, which assist when writing routines that manipulate BCD quantities.&lt;ref&gt;{{cite web |author=University of Alicante |title=A Cordic-based Architecture for High Performance Decimal Calculations |url=http://rua.ua.es/dspace/bitstream/10045/11826/1/VF-016519.pdf |publisher=[[IEEE]] |access-date=2015-08-15}}&lt;/ref&gt;&lt;ref&gt;{{cite web |title=Decimal CORDIC Rotation based on Selection by Rounding: Algorithm and Architecture |url=http://faculties.sbu.ac.ir/~jaberipur/Papers/Journals/19.pdf |publisher=[[British Computer Society]] |access-date=2015-08-14}}&lt;/ref&gt;

==Packed BCD==
&lt;!-- Section header used in redirects --&gt;
In '''packed BCD''' (or simply '''packed decimal'''), each of the two [[nibble]]s of each byte represent a decimal digit. Packed BCD has been in use since at least the 1960s and is implemented in all IBM mainframe hardware since then. Most implementations are [[big endian]], i.e. with the more significant digit in the upper half of each byte, and with the leftmost byte (residing at the lowest memory address) containing the most significant digits of the packed decimal value. The lower nibble of the rightmost byte is usually used as the sign flag, although some unsigned representations lack a sign flag. As an example, a 4-byte value consists of 8 nibbles, wherein the upper 7 nibbles store the digits of a 7-digit decimal value and the lowest nibble indicates the sign of the decimal integer value.

Standard sign values are 1100 ([[hexadecimal|hex]] C) for positive (+) and 1101 (D) for negative (−). This convention comes from the zone field for [[EBCDIC]] characters and the [[signed overpunch]] representation. Other allowed signs are 1010 (A) and 1110 (E) for positive and 1011 (B) for negative. IBM System/360 processors will use the 1010 (A) and 1011 (B) signs if the A bit is set in the PSW, for the ASCII-8 standard that never passed. Most implementations also provide unsigned BCD values with a sign nibble of 1111 (F).&lt;ref name=&quot;IBM_POP&quot;&gt;{{citation |title=IBM System/370 Principles of Operation |chapter=Chapter 8: Decimal Instructions |publisher=[[IBM]] |date=March 1980 }}&lt;/ref&gt;&lt;ref name=&quot;DEC_PDP11&quot;&gt;{{citation |title=PDP-11 Architecture Handbook |chapter=Chapter 3: Data Representation |publisher=[[Digital Equipment Corporation]] |year=1983}}&lt;/ref&gt;&lt;ref name=&quot;DEC_VAX11&quot;&gt;{{citation |title=VAX-11 Architecture Handbook |publisher=[[Digital Equipment Corporation]] |year=1985}}&lt;/ref&gt; ILE RPG uses 1111 (F) for positive and 1101 (D) for negative.&lt;ref&gt;{{cite web |url=http://publib.boulder.ibm.com/iseries/v5r2/ic2924/books/c0925083170.htm |title=ILE RPG Reference}}&lt;/ref&gt; These match the EBCDIC zone for digits without a sign overpunch. In packed BCD, the number 127 is represented by 0001 0010 0111 1100 (127C) and −127 is represented by 0001 0010 0111 1101 (127D). Burroughs systems used 1101 (D) for negative, and any other value is considered a positive sign value (the processors will normalize a positive sign to 1100 (C)).
{| class=&quot;wikitable&quot;  style=&quot;margin:auto; width:40%;&quot;
|-
!  style=&quot;background:#e0e0e0; width:20%;&quot;|Sign&lt;br&gt;Digit
!  style=&quot;background:#e0e0e0; width:20%;&quot;|BCD&lt;br&gt;8&amp;nbsp;4&amp;nbsp;2&amp;nbsp;1
!  style=&quot;background:#e0e0e0; width:20%;&quot;|Sign
!  style=&quot;background:#e0e0e0; width:40%;&quot;|Notes
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|A
| 1&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0
| '''+'''
| &amp;nbsp;
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|B
| 1&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1
| '''−'''
| &amp;nbsp;
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|C
| 1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0
| '''+'''
| Preferred
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|D
| 1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;1
| '''−'''
| Preferred
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|E
| 1&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0
| '''+'''
| &amp;nbsp;
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|F
| 1&amp;nbsp;1&amp;nbsp;1&amp;nbsp;1
| '''+'''
| Unsigned
|}

No matter how many bytes wide a [[Word (data type)|word]] is, there are always an even number of nibbles because each byte has two of them. Therefore, a word of ''n'' bytes can contain up to (2''n'')−1 decimal digits, which is always an odd number of digits. A decimal number with ''d'' digits requires {{sfrac|1|2}}(''d''+1) bytes of storage space.

For example, a 4-byte (32-bit) word can hold seven decimal digits plus a sign, and can represent values ranging from ±9,999,999. Thus the number −1,234,567 is 7 digits wide and is encoded as:
 0001 0010 0011 0100 0101 0110 0111 1101
 ''1    2    3    4    5    6    7    −''

Like character strings, the first byte of the packed decimal{{snd}} that with the most significant two digits{{snd}} is usually stored in the lowest address in memory, independent of the [[endianness]] of the machine.

In contrast, a 4-byte binary [[two's complement]] integer can represent values from −2,147,483,648 to +2,147,483,647.

While packed BCD does not make optimal use of storage (about one-sixth of the memory used is wasted), conversion to [[ASCII]], [[EBCDIC]], or the various encodings of [[Unicode]] is still trivial, as no arithmetic operations are required. The extra storage requirements are usually offset by the need for the accuracy and compatibility with calculator or hand calculation that fixed-point decimal arithmetic provides. Denser packings of [[BCD (character encoding)|BCD]] exist which avoid the storage penalty and also need no arithmetic operations for common conversions.

Packed BCD is supported in the [[COBOL]] programming language as the &quot;COMPUTATIONAL-3&quot; (an IBM extension adopted by many other compiler vendors) or &quot;PACKED-DECIMAL&quot; (part of the 1985 COBOL standard) data type. It is supported in [[PL/I]] as &quot;FIXED DECIMAL&quot;. Besides the IBM System/360 and later compatible mainframes, packed BCD is implemented in the native instruction set of the original [[VAX]] processors from [[Digital Equipment Corporation]] and some models of the [[SDS Sigma series]] mainframes, and is the native format for the [[Burroughs Corporation]] Medium Systems line of mainframes (descended from the 1950s [[Burroughs 205|Electrodata 200 series]]).

[[Ten's complement]] representations for negative numbers offer an alternative approach to encoding the sign of packed (and other) BCD numbers. In this case, positive numbers always have a most significant digit between 0 and 4 (inclusive), while negative numbers are represented by the 10's complement of the corresponding positive number. As a result, this system allows for 32-bit packed BCD numbers to range from −50,000,000 to +49,999,999, and −1 is represented as 99999999. (As with [[two's complement]] binary numbers, the range is not symmetric about zero.)

===Fixed-point packed decimal===
[[Fixed-point arithmetic|Fixed-point]] decimal numbers are supported by some programming languages (such as [[COBOL]], [[PL/I]] and [[Ada (programming language)|Ada]]). These languages allow the programmer to specify an implicit decimal point in front of one of the digits. For example, a packed decimal value encoded with the bytes 12 34 56 7C represents the fixed-point value +1,234.567 when the implied decimal point is located between the 4th and 5th digits:
 12 34 56 7C
 ''12 34.56 7+''

The decimal point is not actually stored in memory, as the packed BCD storage format does not provide for it. Its location is simply known to the compiler and the generated code acts accordingly for the various arithmetic operations.

===Higher-density encodings===
If a decimal digit requires four bits, then three decimal digits require 12 bits. However, since 2&lt;sup&gt;10&lt;/sup&gt; (1,024) is greater than 10&lt;sup&gt;3&lt;/sup&gt; (1,000), if three decimal digits are encoded together, only 10 bits are needed. Two such encodings are ''[[Chen–Ho encoding]]'' and ''[[densely packed decimal]]'' (DPD). The latter has the advantage that subsets of the encoding encode two digits in the optimal seven bits and one digit in four bits, as in regular BCD.

=={{anchor|Zoned BCD}}Zoned decimal==
Some implementations, for example [[IBM]] mainframe systems, support '''zoned decimal''' numeric representations. Each decimal digit is stored in one byte, with the lower four bits encoding the digit in BCD form. The upper four bits, called the &quot;zone&quot; bits, are usually set to a fixed value so that the byte holds a character value corresponding to the digit. EBCDIC systems use a zone value of 1111 (hex F); this yields bytes in the range F0 to F9 (hex), which are the [[EBCDIC]] codes for the characters &quot;0&quot; through &quot;9&quot;. Similarly, [[ASCII]] systems use a zone value of 0011 (hex 3), giving character codes 30 to 39 (hex).

For signed zoned decimal values, the rightmost (least significant) zone nibble holds the sign digit, which is the same set of values that are used for signed packed decimal numbers (see above). Thus a zoned decimal value encoded as the hex bytes F1 F2 D3 represents the signed decimal value −123:
 F1 F2 D3
 '' 1  2 −3''

===EBCDIC zoned decimal conversion table===
&lt;!-- Note that this table should also include codes A0-A9, B0-B9, and E0-E9 for completeness. --&gt;
{|  style=&quot;margin:auto; width:70%;&quot; class=&quot;wikitable&quot;
|-
! style=&quot;background:#e0e0e0;&quot;|BCD Digit
! style=&quot;background:#e0e0e0;&quot; colspan=&quot;4&quot;|Hexadecimal
! style=&quot;background:#e0e0e0;&quot; colspan=&quot;4&quot;|EBCDIC Character
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
|  style=&quot;width:20%; width:12%;&quot;|0+
|  style=&quot;width:10%; width:11%;&quot;|C0
|  style=&quot;width:10%; width:11%;&quot;|A0
|  style=&quot;width:10%; width:11%;&quot;|E0
|  style=&quot;width:10%; width:11%;&quot;|F0
|  style=&quot;width:10%; width:11%;&quot;|{ (*)
|  style=&quot;width:10%; width:11%; background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;width:10%; width:11%;&quot;|\ (*)
|  style=&quot;width:10%; width:11%;&quot;|0
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||1+
||C1
||A1
||E1
||F1
||A
||~ (*)
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||1
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||2+
||C2
||A2
||E2
||F2
||B
||s
||S
||2
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||3+
||C3
||A3
||E3
||F3
||C
||t
||T
||3
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||4+
||C4
||A4
||E4
||F4
||D
||u
||U
||4
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||5+
||C5
||A5
||E5
||F5
||E
||v
||V
||5
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||6+
||C6
||A6
||E6
||F6
||F
||w
||W
||6
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||7+
||C7
||A7
||E7
||F7
||G
||x
||X
||7
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||8+
||C8
||A8
||E8
||F8
||H
||y
||Y
||8
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||9+
||C9
||A9
||E9
||F9
||I
||z
||Z
||9
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||0−
||D0
||B0
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||} &amp;nbsp;(*)
||^ &amp;nbsp;(*)
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||1−
||D1
||B1
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||J
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||2−
||D2
||B2
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||K
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||3−
||D3
||B3
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||L
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||4−
||D4
||B4
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||M
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||5−
||D5
||B5
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||N
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||6−
||D6
||B6
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||O
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||7−
||D7
||B7
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||P
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||8−
||D8
||B8
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||Q
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|- style=&quot;text-align:center; font-family: monospace; font-size: larger&quot; 
||9−
||D9
||B9
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
||R
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|  style=&quot;background:#f0f0f0;&quot;|&amp;nbsp;
|}

(*) ''Note: These characters vary depending on the local character [[code page]] setting.''

===Fixed-point zoned decimal===
Some languages (such as [[COBOL]] and [[PL/I]]) directly support fixed-point zoned decimal values, assigning an implicit decimal point at some location between the decimal digits of a number. For example, given a six-byte signed zoned decimal value with an implied decimal point to the right of the fourth digit, the hex bytes F1 F2 F7 F9 F5 C0 represent the value +1,279.50:
 F1 F2 F7 F9 F5 C0
 '' 1  2  7  9. 5 +0''

{{Anchor|IBMBCD}}&lt;!--- keep anchor with following section, &quot;IBM and BCD&quot; ---&gt;

==IBM and BCD==
{{Main|BCDIC}}
[[IBM]] used the terms ''[[Binary-Coded Decimal Interchange Code]]'' (BCDIC, sometimes just called BCD), for 6-bit ''[[alphanumeric]]'' codes that represented numbers, upper-case letters and special characters. Some variation of BCDIC ''alphamerics'' is used in most early IBM computers, including the [[IBM 1620]], [[IBM 1400 series]], and non-[[IBM 700/7000 series#Decimal architecture (7070/7072/7074)|Decimal Architecture]] members of the [[IBM 700/7000 series]].

The [[IBM 1400 series]] are character-addressable machines, each location being six bits labeled ''B, A, 8, 4, 2'' and ''1,'' plus an odd parity check bit (''C'') and a word mark bit (''M''). For encoding digits ''1'' through ''9'', ''B'' and ''A'' are zero and the digit value represented by standard 4-bit BCD in bits ''8'' through ''1''. For most other characters bits ''B'' and ''A'' are derived simply from the &quot;12&quot;, &quot;11&quot;, and &quot;0&quot; &quot;zone punches&quot; in the punched card character code, and bits ''8'' through ''1'' from the ''1'' through ''9'' punches. A &quot;12 zone&quot; punch set both ''B'' and ''A'', an &quot;11 zone&quot; set ''B'', and a &quot;0 zone&quot; (a 0 punch combined with any others) set ''A''. Thus the letter '''A''', which is ''(12,1)'' in the punched card format, is encoded ''(B,A,1)''. The currency symbol '''$''', ''(11,8,3)'' in the punched card, was encoded in memory as ''(B,8,2,1)''. This allows the circuitry to convert between the punched card format and the internal storage format to be very simple with only a few special cases. One important special case is digit ''0'', represented by a lone ''0'' punch in the card, and ''(8,2)'' in core memory.&lt;ref&gt;[http://ed-thelen.org/1401Project/Van1401-CodeChart.pdf IBM BM 1401/1440/1460/1410/7010 Character Code Chart in BCD Order]{{dead link|date=November 2016 |bot=InternetArchiveBot |fix-attempted=yes }}&lt;/ref&gt;

The memory of the [[IBM 1620]] is organized into 6-bit addressable digits, the usual ''8, 4, 2, 1'' plus ''F'', used as a flag bit and ''C'', an odd parity check bit. BCD ''alphamerics'' are encoded using digit pairs, with the &quot;zone&quot; in the even-addressed digit and the &quot;digit&quot; in the odd-addressed digit, the &quot;zone&quot; being related to the ''12'', ''11'', and ''0'' &quot;zone punches&quot; as in the 1400 series. Input/Output translation hardware converted between the internal digit pairs and the external standard 6-bit BCD codes.

In the Decimal Architecture [[IBM 7070]], [[IBM 7072]], and [[IBM 7074]] ''alphamerics'' are encoded using digit pairs (using [[two-out-of-five code]] in the digits, '''not''' BCD) of the 10-digit word, with the &quot;zone&quot; in the left digit and the &quot;digit&quot; in the right digit. Input/Output translation hardware converted between the internal digit pairs and the external standard 6-bit BCD codes.

With the introduction of [[System/360]], IBM expanded 6-bit BCD ''alphamerics'' to 8-bit [[EBCDIC]], allowing the addition of many more characters (e.g., lowercase letters). A variable length Packed BCD ''numeric'' data type is also implemented, providing machine instructions that perform arithmetic directly on packed decimal data.

On the [[IBM 1130]] and [[IBM 1800|1800]], packed BCD is supported in software by IBM's Commercial Subroutine Package.

Today, BCD data is still heavily used in IBM processors and databases, such as [[IBM DB2]], mainframes, and [[Power6]]. In these products, the BCD is usually zoned BCD (as in EBCDIC or ASCII), Packed BCD (two decimal digits per [[byte]]), or &quot;pure&quot; BCD encoding (one decimal digit stored as BCD in the low four bits of each byte). All of these are used within hardware registers and processing units, and in software. To convert packed decimals in EBCDIC table unloads to readable numbers, you can use the OUTREC FIELDS mask of the JCL utility DFSORT.&lt;ref&gt;http://publib.boulder.ibm.com/infocenter/zos/v1r12/index.jsp?topic=%2Fcom.ibm.zos.r12.iceg200%2Fenf.htm{{dead link|date=November 2016 |bot=InternetArchiveBot |fix-attempted=yes }}&lt;/ref&gt;

==Other computers and BCD==
The [[Digital Equipment Corporation]] [[VAX|VAX-11]] series includes [[Instruction set|instructions]] that can perform arithmetic directly on packed BCD data and convert between packed BCD data and other integer representations.&lt;ref name=&quot;DEC_VAX11&quot;/&gt; The VAX's packed BCD format is compatible with that on IBM System/360 and IBM's later compatible processors. The MicroVAX and later VAX implementations dropped this ability from the CPU but retained code compatibility with earlier machines by implementing the missing instructions in an operating system-supplied software library. This is invoked automatically via exception handling when the no longer implemented instructions are encountered, so that programs using them can execute without modification on the newer machines.

The [[Intel]] [[x86]] architecture supports a [[Intel BCD opcode|unique 18-digit (ten-byte) BCD format]] that can be loaded into and stored from the floating point registers, and computations can be performed there.&lt;ref&gt;{{cite book|title=Intel® 64 and IA-32 Architectures Software Developer's Manual, Volume 1: Basic Architecture|pages=4–9|date=December 2016|publisher=Intel Corporation|url=http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html}}&lt;/ref&gt;

The [[Motorola 68000 series]] had BCD instructions.&lt;ref name=&quot;m68k&quot;&gt;url=http://www.tigernt.com/onlineDoc/68000.pdf&lt;/ref&gt;

In more recent computers such capabilities are almost always implemented in software rather than the CPU's instruction set, but BCD numeric data is still extremely common in commercial and financial applications. There are tricks for implementing packed BCD and zoned decimal add or subtract operations using short but difficult to understand sequences of word-parallel logic and binary arithmetic operations.&lt;ref name=&quot;Jones_AT&quot;&gt;{{cite web |title=BCD Arithmetic, a tutorial |work=Arithmetic Tutorials |author-first=Douglas W. |author-last=Jones |author-link=Douglas W. Jones |publisher=The University of Iowa, Department of Computer Science |orig-year=1999 |date=2015-11-25 |location=Iowa City, Iowa, USA |url=http://homepage.cs.uiowa.edu/~jones/bcd/bcd.html |access-date=2016-01-03}}&lt;/ref&gt; For example, the following code (written in [[C (programming language)|C]]) computes an unsigned 8-digit packed BCD add using 32-bit binary operations:
&lt;source lang=c&gt;
uint32_t BCDadd(uint32_t a,uint32_t b)
{
    uint32_t  t1, t2;    // unsigned 32-bit intermediate values

    t1 = a + 0x06666666;
    t2 = t1 ^ b;                   // sum without carry propagation
    t1 = t1 + b;                   // provisional sum
    t2 = t1 ^ t2;                  // all the binary carry bits
    t2 = ~t2 &amp; 0x11111110;         // just the BCD carry bits
    t2 = (t2 &gt;&gt; 2) | (t2 &gt;&gt; 3);    // correction
    return t1 - t2;                // corrected BCD sum
}
&lt;/source&gt;

==Addition with BCD==
It is possible to perform [[addition]] in BCD by first adding in binary, and then converting to BCD afterwards. Conversion of the simple sum of two digits can be done by adding 6 (that is, 16 – 10) when the five-bit result of adding a pair of digits has a value greater than 9. For example:
 1001 + 1000 = 10001
    9 +    8 =    17

10001 is the binary, not decimal, representation of the desired result, but the most-significant 1 (the &quot;carry&quot;) cannot fit in a 4-bit binary number. In BCD as in decimal, there cannot exist a value greater than 9 (1001) per digit. To correct this, 6 (0110) is added to the total and then the result is treated as two [[nibble]]s:

 10001 + 0110 = 00010111 =&gt; 0001 0111
    17 +    6 =       23       1    7

The two nibbles of the result, 0001 and 0111, correspond to the digits &quot;1&quot; and &quot;7&quot;. This yields &quot;17&quot; in BCD, which is the correct result.

This technique can be extended to adding multiple digits by adding in groups from right to left, propagating the second digit as a carry, always comparing the 5-bit result of each digit-pair sum to 9. Some CPUs provide a [[half-carry flag]] to facilitate BCD arithmetic adjustments following binary addition and subtraction operations.

==Subtraction with BCD==
Subtraction is done by adding the [[ten's complement]] of the [[subtrahend]] to the [[minuend]]. To represent the sign of a number in BCD, the number 0000 is used to represent a [[positive number]], and 1001 is used to represent a [[negative number]]. The remaining 14 combinations are invalid signs. To illustrate signed BCD subtraction, consider the following problem: 357 − 432.

In signed BCD, 357 is 0000 0011 0101 0111. The [[ten's complement]] of 432 can be obtained by taking the [[nine's complement]] of 432, and then adding one. So, 999 − 432 = 567, and 567 + 1 = 568. By preceding 568 in BCD by the negative sign code, the number −432 can be represented. So, −432 in signed BCD is 1001 0101 0110 1000.

Now that both numbers are represented in signed BCD, they can be added together:
   0000 0011 0101 0111
      0    3    5    7
 + 1001 0101 0110 1000
 &lt;u&gt;     9    5    6    8&lt;/u&gt;
 = 1001 1000 1011 1111
      9    8   11   15

Since BCD is a form of decimal representation, several of the digit sums above are invalid. In the event that an invalid entry (any BCD digit greater than 1001) exists, 6 is added to generate a carry bit and cause the sum to become a valid entry. The reason for adding 6 is that there are 16 possible 4-bit BCD values (since 2&lt;sup&gt;4&lt;/sup&gt; = 16), but only 10 values are valid (0000 through 1001). So adding 6 to the invalid entries results in the following:
   1001 1000 1011 1111
      9    8   11   15
 + 0000 0000 0110 0110
 &lt;u&gt;     0    0    6    6&lt;/u&gt;
 = 1001 1001 0010 0101
      9    9    2    5

Thus the result of the subtraction is 1001 1001 0010 0101 (−925). To confirm the result, note that the first digit is 9, which means negative. This seems to be correct, since 357 − 432 should result in a negative number. The remaining nibbles are BCD, so  1001 0010 0101 is 925. The [[ten's complement]] of 925 is 1000 − 925 = 75, so the calculated answer is −75.

If there are a different number of nibbles being added together (such as 1053 − 2), the number with the fewer digits must first be prefixed with zeros before taking the [[ten's complement]] or subtracting. So, with 1053 − 2, 2 would have to first be represented as 0002 in BCD, and the [[ten's complement]] of 0002 would have to be calculated.

==Background==
The binary-coded decimal scheme described in this article is the most common encoding, but there are many others. The method here can be referred to as ''Simple Binary-Coded Decimal'' (''SBCD'') or ''BCD&amp;nbsp;8421''.
&lt;!-- It is also sometimes named ''NBCD'' (''Naturally Binary-Coded Decimal''). (where?) --&gt;
The following table represents [[decimal]] digits from 0 to 9 in various BCD systems. 
In the headers to the table, the '{{code|8 4 2 1}}', indicates the weight of each bit shown; in the fifth column, &quot;BCD&amp;nbsp;8&amp;nbsp;4&amp;nbsp;−2&amp;nbsp;−1&quot;, two of the weights are negative. Both ASCII and EBCDIC character codes for the digits are examples of zoned BCD, and are also shown in the table.

:
{| border=&quot;1&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; style=&quot;margin:auto;&quot;
|-
! style=&quot;background:#e0e0e0;&quot;| &amp;nbsp;&lt;br /&gt;Digit
! style=&quot;background:#e0e0e0;&quot;| BCD&lt;br /&gt;8&amp;nbsp;4&amp;nbsp;2&amp;nbsp;1
! style=&quot;background:#e0e0e0;&quot;| [[George Stibitz|Stibitz]]&amp;nbsp;Code or [[Excess-3]]
! style=&quot;background:#e0e0e0;&quot;| [[Aiken-Code]] or BCD&lt;br /&gt;2&amp;nbsp;4&amp;nbsp;2&amp;nbsp;1
! style=&quot;background:#e0e0e0;&quot;| BCD&lt;br /&gt;8&amp;nbsp;4&amp;nbsp;−2&amp;nbsp;−1
! style=&quot;background:#e0e0e0;&quot;| {{nowrap| [[IBM 702]], }} {{nowrap| [[IBM 705]], }} {{nowrap| [[IBM 7080]], }} {{nowrap| [[IBM 1401]] }} 8&amp;nbsp;4&amp;nbsp;2&amp;nbsp;1
! style=&quot;background:#e0e0e0;&quot;| [[ASCII]] 0000&amp;nbsp;8421
! style=&quot;background:#e0e0e0;&quot;| [[EBCDIC]] 0000&amp;nbsp;8421
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|0
| 0000
| 0011
| 0000
| 0000
| 1010
| 0011&amp;nbsp;0000
| 1111&amp;nbsp;0000
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|1
| 0001
| 0100
| 0001
| 0111
| 0001
| 0011&amp;nbsp;0001
| 1111&amp;nbsp;0001
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|2
| 0010
| 0101
| 0010
| 0110
| 0010
| 0011&amp;nbsp;0010
| 1111&amp;nbsp;0010
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|3
| 0011
| 0110
| 0011
| 0101
| 0011
| 0011&amp;nbsp;0011
| 1111&amp;nbsp;0011
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|4
| 0100
| 0111
| 0100
| 0100
| 0100
| 0011&amp;nbsp;0100
| 1111&amp;nbsp;0100
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|5
| 0101
| 1000
| 1011
| 1011
| 0101
| 0011&amp;nbsp;0101
| 1111&amp;nbsp;0101
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|6
| 0110
| 1001
| 1100
| 1010
| 0110
| 0011 0110
| 1111 0110
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|7
| 0111
| 1010
| 1101
| 1001
| 0111
| 0011&amp;nbsp;0111
| 1111&amp;nbsp;0111
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|8
| 1000
| 1011
| 1110
| 1000
| 1000
| 0011&amp;nbsp;1000
| 1111&amp;nbsp;1000
|- style=&quot;text-align:center;&quot;
! style=&quot;background:#f0f0f0;&quot;|9
| 1001
| 1100
| 1111
| 1111
| 1001
| 0011&amp;nbsp;1001
| 1111&amp;nbsp;1001
|}

==Legal history==
In the 1972 case ''[[Gottschalk v. Benson]]'', the U.S. Supreme Court overturned a lower court decision which had allowed a patent for converting BCD encoded numbers to binary on a computer. This was an important case in determining the patentability of software and algorithms.

==Comparison with pure binary==
&lt;!-- not at all clear why this needs to be here at all, shouldn't the article just describe BCD? (mfc)--&gt;
&lt;!--as an alternative number system for computing and electronics imo a comparison to the standard one is justified (plugwash)--&gt;

===Advantages===
* Many non-integral values, such as decimal 0.2, have an infinite place-value representation in binary (.001100110011...) but have a finite place-value in binary-coded decimal (0.0010). Consequently, a system based on binary-coded decimal representations of decimal fractions avoids errors representing and calculating such values. This is useful in financial calculations.
* Scaling by a power of 10 is simple.
* [[Rounding]] at a decimal digit boundary is simpler. Addition and subtraction in decimal does not require rounding.
* Alignment of two decimal numbers (for example 1.3 + 27.08) is a simple, exact, shift.
* Conversion to a character form or for display (e.g., to a text-based format such as [[XML]], or to drive signals for a [[seven-segment display]]) is a simple per-digit mapping, and can be done in linear ([[Big-O notation|O]](''n'')) time. Conversion from pure [[binary numeral system|binary]] involves relatively complex logic that spans digits, and for large numbers no linear-time conversion algorithm is known (see {{see section|Binary numeral system|Conversion to and from other numeral systems}}).

===Disadvantages===
* Some operations are more complex to implement. [[Adder (electronics)|Adder]]s require extra logic to cause them to wrap and generate a carry early. 15 to 20 percent more circuitry is needed for BCD add compared to pure binary.{{Citation needed|date=May 2011}} Multiplication requires the use of algorithms that are somewhat more complex than shift-mask-add (a [[Binary numeral system#Multiplication|binary multiplication]], requiring binary shifts and adds or the equivalent, per-digit or group of digits is required)
* Standard BCD requires four bits per digit, roughly 20 percent more space than a binary encoding (the ratio of 4 bits to log&lt;sub&gt;2&lt;/sub&gt;10 bits is 1.204). When packed so that three digits are encoded in ten bits, the storage overhead is greatly reduced, at the expense of an encoding that is unaligned with the 8-bit byte boundaries common on existing hardware, resulting in slower implementations on these systems.&lt;!-- Could add: encoding or decoding is trivial in software using a table lookup, and fast using direct logic otherwise. In hardware it requires no more than three gate delays. --&gt;
* Practical existing implementations of BCD are typically slower than operations on binary representations, especially on embedded systems,{{Citation needed|date=May 2011}} due to limited processor support for native BCD operations.

==Application==
The [[BIOS]] in many [[personal computer]]s stores the date and time in BCD because the [[MC6818]] real-time clock chip used in the original [[IBM PC AT]] motherboard provided the time encoded in BCD. This form is easily converted into ASCII for display.&lt;ref&gt;http://www.se.ecu.edu.au/units/ens1242/lectures/ens_Notes_08.pdf{{dead link|date=November 2016 |bot=InternetArchiveBot |fix-attempted=yes }}&lt;/ref&gt;&lt;!-- also see MC6818 datasheet --&gt;

The [[Atari 8-bit family]] of computers used BCD to implement floating-point algorithms. The [[MOS Technology 6502|MOS 6502]] processor has a BCD mode that affects the addition and subtraction instructions. The [[Psion Organiser|Psion Organiser 1]] handheld computer’s manufacturer-supplied software also used entirely BCD to implement floating point; later Psion models used binary exclusively.

Early models of the [[PlayStation 3]] store the date and time in BCD. This led to a worldwide outage of the console on 1 March 2010. The last two digits of the year stored as BCD [[time formatting and storage bugs|were misinterpreted]] as 16 causing an error in the unit's date, rendering most functions inoperable. This has been referred to as the [[Year 2010 problem|Year 2010 Problem]].

==Representational variations==
Various BCD implementations exist that employ other representations for numbers. [[Programmable calculator]]s manufactured by [[Texas Instruments]], [[Hewlett-Packard]], and others typically employ a [[floating-point]] BCD format, typically with two or three digits for the (decimal) exponent. The extra bits of the sign digit may be used to indicate special numeric values, such as [[infinity]], [[arithmetic underflow|underflow]]/[[arithmetic overflow|overflow]], and [[Defined and undefined|error]] (a blinking display).

===Signed variations===
Signed decimal values may be represented in several ways. The [[COBOL]] programming language, for example, supports a total of five zoned decimal formats, each one encoding the numeric sign in a different way:
{| class=&quot;wikitable&quot; style=&quot;width:95%&quot;
|-
! style=&quot;background:#D0E0FF; width:25%&quot;| Type
! style=&quot;background:#D0E0FF; width:55%&quot;| Description
! style=&quot;background:#D0E0FF; width:20%&quot;| Example
|-
| Unsigned
| No sign nibble
| &lt;code&gt;F1 F2 &lt;u&gt;F&lt;/u&gt;3&lt;/code&gt;
|-
| Signed trailing ''(canonical format)''
| Sign nibble in the last (least significant) byte
| &lt;code&gt;F1 F2 &lt;u&gt;C&lt;/u&gt;3&lt;/code&gt;
|-
| Signed leading ''(overpunch)''
| Sign nibble in the first (most significant) byte
| &lt;code&gt;&lt;u&gt;C&lt;/u&gt;1 F2 F3&lt;/code&gt;
|-
| Signed trailing separate
| Separate sign character byte (&lt;code&gt;'+'&lt;/code&gt; or &lt;code&gt;'−'&lt;/code&gt;) following the digit bytes
| &lt;code&gt;F1 F2 F3 &lt;u&gt;2B&lt;/u&gt;&lt;/code&gt;
|-
| Signed leading separate
| Separate sign character byte (&lt;code&gt;'+'&lt;/code&gt; or &lt;code&gt;'−'&lt;/code&gt;) preceding the digit bytes
| &lt;code&gt;&lt;u&gt;2B&lt;/u&gt; F1 F2 F3&lt;/code&gt;
|}

==={{anchor|TBCD}}Telephony Binary Coded Decimal (TBCD)===
[[3GPP]] developed '''TBCD''',&lt;ref&gt;{{cite techreport |title=3GPP TS 29.002: Mobile Application Part (MAP) specification |at=sec. 17.7.8 Common data types |year=2013 |url=http://www.3gpp.org/ftp/Specs/html-info/29002.htm}}&lt;/ref&gt; an expansion to BCD where the remaining (unused) bit combinations are used to add specific [[telephony]] characters,&lt;ref&gt;{{cite web |url=http://www.etsi.org/deliver/etsi_etr/001_099/060/02_60/etr_060e02p.pdf |title=Signalling Protocols and Switching (SPS) Guidelines for using Abstract Syntax Notation One (ASN.1) in telecommunication application protocols |page=15}}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=http://www.openss7.org/specs/xmap.pdf |title=XOM Mobile Application Part (XMAP) Specification |page=93 |access-date=27 June 2013 |archive-url=https://web.archive.org/web/20150221103429/http://www.openss7.org/specs/xmap.pdf |archive-date=21 February 2015 |url-status=dead }}&lt;/ref&gt; with digits similar to those found in [[Dual-tone multi-frequency signaling|telephone keypads]] original design.
{| class=&quot;wikitable&quot; style=&quot;width:30%; text-align:center&quot;
|-
! style=&quot;background:#E0E0E0; width:50%&quot; |Decimal&lt;br/&gt;Digit
! style=&quot;background:#E0E0E0; width:50%&quot; |TBCD&lt;br/&gt;8 4 2 1
|-
! style=&quot;background:#F0F0F0&quot; |*
| 1 0 1 0
|-
! style=&quot;background:#F0F0F0&quot; |#
| 1 0 1 1
|-
! style=&quot;background:#F0F0F0&quot; |a
| 1 1 0 0
|-
! style=&quot;background:#F0F0F0&quot; |b
| 1 1 0 1
|-
! style=&quot;background:#F0F0F0&quot; |c
| 1 1 1 0
|-
! style=&quot;background:#F0F0F0&quot; |Used as filler when there is an odd number of digits
| 1 1 1 1
|}

The mentioned 3GPP document defines '''TBCD-STRING''' with swapped nibbles in each byte. Bits, octets and digits indexed from 1, bits from the right, digits and octets from the left.
&lt;blockquote&gt;
bits 8765 of octet ''n'' encoding digit 2''n''

bits 4321 of octet ''n'' encoding digit 2(''n'' – 1) + 1
&lt;/blockquote&gt;

Meaning number &lt;code&gt;1234&lt;/code&gt;, would become &lt;code&gt;21 43&lt;/code&gt; in TBCD.

==Alternative encodings==
If errors in representation and computation are more important than the speed of conversion to and from display, a scaled binary representation may be used, which stores a decimal number as a binary-encoded integer and a binary-encoded signed decimal exponent. For example, 0.2 can be represented as 2{{e|-1}}.

This representation allows rapid multiplication and division, but may require shifting by a power of 10 during addition and subtraction to align the decimal points. It is appropriate for applications with a fixed number of decimal places that do not then require this adjustment—particularly financial applications where 2 or 4 digits after the decimal point are usually enough. Indeed, this is almost a form of [[fixed point arithmetic]] since the position of the [[radix point]] is implied.

[[Chen–Ho encoding]] provides a boolean transformation for converting groups of three BCD-encoded digits to and from 10-bit values that can be efficiently encoded in hardware with only 2 or 3 gate delays. [[Densely packed decimal]] (DPD) is a similar scheme that is used for most of the [[significand]], except the lead digit, for one of the two alternative decimal encodings specified in the [[IEEE 754-2008]] standard.

==See also==
* [[Bi-quinary coded decimal]]
* [[Binary integer decimal]] (BID)
* [[Chen–Ho encoding]]
* [[Densely packed decimal]] (DPD)
* [[Double dabble]], an algorithm for converting binary numbers to BCD
* [[Gray code]]
* [[Year 2000 problem]]
* [[Decimal computer]]
* [[Binary-coded ternary]] (BCT)

==Notes==
{{reflist|group=&quot;nb&quot;|refs=
&lt;ref group=&quot;nb&quot; name=&quot;Pseudo-tetrades&quot;&gt;That is, in a standard packed 4-bit representation, there are 16 states (four bits for each digit) with 10 tetrades and 6 pseudo-tetrades, whereas in more densely packed schemes such as [[Chen–Ho encoding|Chen–Ho]] or [[densely packed decimal|DPD]] coding there are fewer--e.g., only 24 pseudo-tetrades in 1024 states (10 bits for three digits).&lt;/ref&gt;
}}

==References==
{{Reflist|refs=
&lt;ref name=&quot;Intel_IA32&quot;&gt;{{cite web |author=Intel |title=ia32 architecture manual |url=http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developers-manual.pdf |publisher=[[Intel]] |access-date=2015-07-01}}&lt;/ref&gt;
&lt;ref name=&quot;Schneider_1986&quot;&gt;{{cite book |title=Lexikon der Informatik und Datenverarbeitung |language=German |author-first=Hans-Jochen |author-last=Schneider |date=1986 |edition=2 |publisher=R. Oldenbourg Verlag München Wien |isbn=3-486-22662-2}}&lt;/ref&gt;
&lt;ref name=&quot;Tafel_1971&quot;&gt;{{cite book |title=Einführung in die digitale Datenverarbeitung |language=German |trans-title=Introduction to digital information processing |author-first=Hans Jörg |author-last=Tafel |publisher=[[Carl Hanser Verlag]] |date=1971 |location=[[RWTH]], Aachen, Germany |publication-place=Munich, Germany |isbn=3-446-10569-7}}&lt;/ref&gt;
&lt;ref name=&quot;Steinbuch-Weber_1974&quot;&gt;{{cite book |title=Taschenbuch der Informatik - Band II - Struktur und Programmierung von EDV-Systemen |language=German |editor-first1=Karl W. |editor-last1=Steinbuch |editor-link1=Karl W. Steinbuch |editor-first2=Wolfgang |editor-last2=Weber |editor-first3=Traute |editor-last3=Heinemann |date=1974 |orig-year=1967 |edition=3 |volume=2 |work=Taschenbuch der Nachrichtenverarbeitung |publisher=[[Springer-Verlag]] |location=Berlin, Germany |isbn=3-540-06241-6 |lccn=73-80607}}&lt;/ref&gt;
&lt;ref name=&quot;Tietze-Schenk_2013&quot;&gt;{{cite book |title=Advanced Electronic Circuits |author-first1=Ulrich |author-last1=Tietze |author-first2=Christoph |author-last2=Schenk |date=2012-12-06 |publisher=[[Springer Science &amp; Business Media]] |isbn=978-3642812415 |id=9783642812415 |url=https://books.google.com/books?id=dYruCAAAQBAJ |access-date=2015-08-05}}&lt;/ref&gt;
&lt;ref name=&quot;Kowalski_1070&quot;&gt;{{cite book |title=Nuclear Electronics |author-first=Emil |author-last=Kowalski |date=2013-03-08 |orig-year=1970 |publisher=[[Springer-Verlag]] |isbn=978-3642876639 |id=9783642876639, 978-3-642-87664-6 |doi=10.1007/978-3-642-87663-9 |url=https://books.google.com/books?id=Xr-IBwAAQBAJ |access-date=2015-08-05}}&lt;/ref&gt;
&lt;ref name=&quot;Ferretti_2013&quot;&gt;{{cite book |title=Wörterbuch der Elektronik, Datentechnik und Telekommunikation / Dictionary of Electronics, Computing and Telecommunications: Teil 1: Deutsch-Englisch / Part 1: German-English |author-first=Vittorio |author-last=Ferretti |edition=2 |volume=1 |publisher=Springer-Verlag |date=2013-03-13 
|isbn=978-3642980886 |id=9783642980886 |url=https://books.google.com/books?id=gtHzBQAAQBAJ |access-date=2015-08-05}}&lt;/ref&gt;
&lt;ref name=&quot;Speiser_1965&quot;&gt;{{cite book |author-first=Ambrosius Paul |author-last=Speiser |author-link=Ambrosius Paul Speiser |location=[[Eidgenössische Technische Hochschule Zürich|ETH Zürich]], Zürich, Switzerland |title=Digitale Rechenanlagen - Grundlagen / Schaltungstechnik / Arbeitsweise / Betriebssicherheit |language=German |trans-title=Digital computers - Basics / Circuits / Operation / Reliability |edition=2 |date=1965 |orig-year=1961 |publisher=[[Springer-Verlag]] / [[IBM]] |lccn=65-14624 |id=0978 |page=209}}&lt;/ref&gt;
&lt;ref name=&quot;Cowlishaw_GDA&quot;&gt;{{cite web |author-first=Mike F. |author-last=Cowlishaw |author-link=Mike F. Cowlishaw |title=General Decimal Arithmetic |orig-year=1981,2008 |date=2015 |url=http://speleotrove.com/decimal/&lt;!-- http://www2.hursley.ibm.com/decimal/ --&gt; |access-date=2016-01-02}}&lt;/ref&gt;
}}

==Further reading==
*{{cite book |title=Coded Character Sets, History and Development |work=The Systems Programming Series |author-last=Mackenzie |author-first=Charles E. |year=1980 |edition=1 |publisher=[[Addison-Wesley Publishing Company, Inc.]] |isbn=0-201-14460-3 |lccn=77-90165 |page=xii |url=https://books.google.com/books?id=6-tQAAAAMAAJ |access-date=2016-05-22}} [https://web.archive.org/web/20160526172151/https://textfiles.meulie.net/bitsaved/Books/Mackenzie_CodedCharSets.pdf]
*&lt;!-- &lt;ref name=&quot;Richards_1955&quot;&gt; --&gt;{{cite book |author-first=Richard Kohler |author-last=Richards |title=Arithmetic Operations in Digital Computers |publisher=[[van Nostrand (publisher)|van Nostrand]] |location=New York, USA |date=1955 |pages=397–}}&lt;!-- &lt;/ref&gt; --&gt;
*{{cite book |title=Decimal Computation |first=Hermann |last=Schmid&lt;!-- General Electric Company, Binghamton, New York, USA --&gt; |author-link=Hermann Schmid (computer scientist) |date=1974 |edition=1 |publisher=[[John Wiley &amp; Sons]] |location=Binghamton, New York, USA |isbn=0-471-76180-X |url-access=registration |url=https://archive.org/details/decimalcomputati0000schm }} and {{cite book |title=Decimal Computation |first=Hermann |last=Schmid&lt;!-- General Electric Company, Binghamton, New York, USA --&gt; |author-link=Hermann Schmid (computer scientist) |orig-year=1974 |date=1983 |edition=1 (reprint) |publisher=Robert E. Krieger Publishing Company |location=Malabar, Florida, USA |isbn=0-89874-318-4}} (NB. At least some batches of the Krieger reprint edition were [[misprint]]s with defective pages 115–146.)
*&lt;!-- &lt;ref name=&quot;Massalin_1987_Superoptimizer&quot;&gt; --&gt;{{cite journal |author-first=Henry |author-last=Massalin |author-link=Henry Massalin |editor-first=Randy |editor-last=Katz |editor-link=Randy Katz |title=Superoptimizer: A Look at the Smallest Program |journal=Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems ACM SIGOPS Operating Systems Review |pages=122–126 |lay-url=http://hpux.connect.org.uk/hppd/hpux/Gnu/superopt-2.5/readme.html |lay-date=1995-06-14 |doi= 10.1145/36204.36194|date=October 1987 |volume=21 |issue=4 |isbn=0-8186-0805-6 |url=http://www.stanford.edu/class/cs343/resources/superoptimizer.pdf |access-date=2012-04-25 |url-status=live |archive-url=https://web.archive.org/web/20170704123738/https://web.stanford.edu/class/cs343/resources/superoptimizer.pdf |archive-date=2017-07-04}} (Also: ACM SIGPLAN Notices, Vol. 22 #10, IEEE Computer Society Press #87CH2440-6, October 1987)&lt;!-- &lt;/ref&gt; --&gt;
* ''VLSI designs for redundant binary-coded decimal addition'', Behrooz Shirazi, David Y. Y. Yun, and Chang N. Zhang, IEEE Seventh Annual International Phoenix Conference on Computers and Communications, 1988, pp52–56, IEEE, March 1988
* ''Fundamentals of Digital Logic'' by Brown and Vranesic, 2003
* ''Modified Carry Look Ahead BCD Adder With CMOS and Reversible Logic Implementation'', Himanshu Thapliyal and Hamid R. Arabnia, Proceedings of the 2006 International Conference on Computer Design (CDES'06), {{ISBN|1-60132-009-4}}, pp64–69, CSREA Press, November 2006
* ''Reversible Implementation of {{Sic|hide=y|Densely|-}}Packed-Decimal Converter to and from Binary-Coded-Decimal Format Using in IEEE-754R'', A. Kaivani, A. Zaker Alhosseini, S. Gorgin, and M. Fazlali, 9th International Conference on Information Technology (ICIT'06), pp273–276, IEEE, December 2006.
* {{cite web |author-first=Mike F. |author-last=Cowlishaw |author-link=Mike F. Cowlishaw |title=Bibliography of material on Decimal Arithmetic – by category |work=General Decimal Arithmetic |orig-year=2002,2008 |publisher=IBM |date=2009 |url=http://speleotrove.com/decimal/decbibindex.html&lt;!-- http://www2.hursley.ibm.com/decimal/decbibindex.html --&gt; |access-date=2016-01-02}}

==External links==
* {{cite web |author-first=Mike F. |author-last=Cowlishaw |author-link=Mike F. Cowlishaw |title=A Summary of Chen-Ho Decimal Data encoding |work=General Decimal Arithmetic |orig-year=2000 |publisher=[[IBM]] |date=2014 |url=http://speleotrove.com/decimal/chen-ho.html&lt;!-- http://www2.hursley.ibm.com/decimal/chen-ho.html --&gt; |access-date=2016-01-02}}
* {{cite web |author-first=Mike F. |author-last=Cowlishaw |author-link=Mike F. Cowlishaw |title=A Summary of Densely Packed Decimal encoding |work=General Decimal Arithmetic |orig-year=2000 |publisher=[[IBM]] |date=2007 |url=http://speleotrove.com/decimal/DPDecimal.html&lt;!-- http://www2.hursley.ibm.com/decimal/DPDecimal.html --&gt; |access-date=2016-01-02}}
* [http://www.unitjuggler.com/convert-numbersystems-from-decimal-to-bcd.html Convert BCD to decimal, binary and hexadecimal and vice versa]
* [https://github.com/c-rack/bcd4j BCD for Java]

{{DEFAULTSORT:Binary-Coded Decimal}}
[[Category:Computer arithmetic]]
[[Category:Numeral systems]]
[[Category:Non-standard positional numeral systems]]
[[Category:Binary arithmetic]]</text>
      <sha1>c36ugzeubw28q5licrz9gn1atnl1ufs</sha1>
    </revision>
  </page>
